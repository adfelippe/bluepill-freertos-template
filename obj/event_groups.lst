ARM GAS  /tmp/ccKLeSvd.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"event_groups.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.align	1
  16              		.global	xEventGroupCreate
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  21              		.type	xEventGroupCreate, %function
  22              	xEventGroupCreate:
  23              	.LFB5:
  24              		.file 1 "FreeRTOS/Source/event_groups.c"
   1:FreeRTOS/Source/event_groups.c **** /*
   2:FreeRTOS/Source/event_groups.c ****  * FreeRTOS Kernel V10.3.1
   3:FreeRTOS/Source/event_groups.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/Source/event_groups.c ****  *
   5:FreeRTOS/Source/event_groups.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:FreeRTOS/Source/event_groups.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:FreeRTOS/Source/event_groups.c ****  * the Software without restriction, including without limitation the rights to
   8:FreeRTOS/Source/event_groups.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:FreeRTOS/Source/event_groups.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:FreeRTOS/Source/event_groups.c ****  * subject to the following conditions:
  11:FreeRTOS/Source/event_groups.c ****  *
  12:FreeRTOS/Source/event_groups.c ****  * The above copyright notice and this permission notice shall be included in all
  13:FreeRTOS/Source/event_groups.c ****  * copies or substantial portions of the Software.
  14:FreeRTOS/Source/event_groups.c ****  *
  15:FreeRTOS/Source/event_groups.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:FreeRTOS/Source/event_groups.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:FreeRTOS/Source/event_groups.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:FreeRTOS/Source/event_groups.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:FreeRTOS/Source/event_groups.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:FreeRTOS/Source/event_groups.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:FreeRTOS/Source/event_groups.c ****  *
  22:FreeRTOS/Source/event_groups.c ****  * http://www.FreeRTOS.org
  23:FreeRTOS/Source/event_groups.c ****  * http://aws.amazon.com/freertos
  24:FreeRTOS/Source/event_groups.c ****  *
  25:FreeRTOS/Source/event_groups.c ****  * 1 tab == 4 spaces!
  26:FreeRTOS/Source/event_groups.c ****  */
  27:FreeRTOS/Source/event_groups.c **** 
  28:FreeRTOS/Source/event_groups.c **** /* Standard includes. */
  29:FreeRTOS/Source/event_groups.c **** #include <stdlib.h>
  30:FreeRTOS/Source/event_groups.c **** 
  31:FreeRTOS/Source/event_groups.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  32:FreeRTOS/Source/event_groups.c **** all the API functions to use the MPU wrappers.  That should only be done when
  33:FreeRTOS/Source/event_groups.c **** task.h is included from an application file. */
ARM GAS  /tmp/ccKLeSvd.s 			page 2


  34:FreeRTOS/Source/event_groups.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:FreeRTOS/Source/event_groups.c **** 
  36:FreeRTOS/Source/event_groups.c **** /* FreeRTOS includes. */
  37:FreeRTOS/Source/event_groups.c **** #include "FreeRTOS.h"
  38:FreeRTOS/Source/event_groups.c **** #include "task.h"
  39:FreeRTOS/Source/event_groups.c **** #include "timers.h"
  40:FreeRTOS/Source/event_groups.c **** #include "event_groups.h"
  41:FreeRTOS/Source/event_groups.c **** 
  42:FreeRTOS/Source/event_groups.c **** /* Lint e961, e750 and e9021 are suppressed as a MISRA exception justified
  43:FreeRTOS/Source/event_groups.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  44:FreeRTOS/Source/event_groups.c **** for the header files above, but not in this file, in order to generate the
  45:FreeRTOS/Source/event_groups.c **** correct privileged Vs unprivileged linkage and placement. */
  46:FreeRTOS/Source/event_groups.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021 See comment above. */
  47:FreeRTOS/Source/event_groups.c **** 
  48:FreeRTOS/Source/event_groups.c **** /* The following bit fields convey control information in a task's event list
  49:FreeRTOS/Source/event_groups.c **** item value.  It is important they don't clash with the
  50:FreeRTOS/Source/event_groups.c **** taskEVENT_LIST_ITEM_VALUE_IN_USE definition. */
  51:FreeRTOS/Source/event_groups.c **** #if configUSE_16_BIT_TICKS == 1
  52:FreeRTOS/Source/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x0100U
  53:FreeRTOS/Source/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x0200U
  54:FreeRTOS/Source/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x0400U
  55:FreeRTOS/Source/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff00U
  56:FreeRTOS/Source/event_groups.c **** #else
  57:FreeRTOS/Source/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x01000000UL
  58:FreeRTOS/Source/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x02000000UL
  59:FreeRTOS/Source/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x04000000UL
  60:FreeRTOS/Source/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff000000UL
  61:FreeRTOS/Source/event_groups.c **** #endif
  62:FreeRTOS/Source/event_groups.c **** 
  63:FreeRTOS/Source/event_groups.c **** typedef struct EventGroupDef_t
  64:FreeRTOS/Source/event_groups.c **** {
  65:FreeRTOS/Source/event_groups.c **** 	EventBits_t uxEventBits;
  66:FreeRTOS/Source/event_groups.c **** 	List_t xTasksWaitingForBits;		/*< List of tasks waiting for a bit to be set. */
  67:FreeRTOS/Source/event_groups.c **** 
  68:FreeRTOS/Source/event_groups.c **** 	#if( configUSE_TRACE_FACILITY == 1 )
  69:FreeRTOS/Source/event_groups.c **** 		UBaseType_t uxEventGroupNumber;
  70:FreeRTOS/Source/event_groups.c **** 	#endif
  71:FreeRTOS/Source/event_groups.c **** 
  72:FreeRTOS/Source/event_groups.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
  73:FreeRTOS/Source/event_groups.c **** 		uint8_t ucStaticallyAllocated; /*< Set to pdTRUE if the event group is statically allocated to en
  74:FreeRTOS/Source/event_groups.c **** 	#endif
  75:FreeRTOS/Source/event_groups.c **** } EventGroup_t;
  76:FreeRTOS/Source/event_groups.c **** 
  77:FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
  78:FreeRTOS/Source/event_groups.c **** 
  79:FreeRTOS/Source/event_groups.c **** /*
  80:FreeRTOS/Source/event_groups.c ****  * Test the bits set in uxCurrentEventBits to see if the wait condition is met.
  81:FreeRTOS/Source/event_groups.c ****  * The wait condition is defined by xWaitForAllBits.  If xWaitForAllBits is
  82:FreeRTOS/Source/event_groups.c ****  * pdTRUE then the wait condition is met if all the bits set in uxBitsToWaitFor
  83:FreeRTOS/Source/event_groups.c ****  * are also set in uxCurrentEventBits.  If xWaitForAllBits is pdFALSE then the
  84:FreeRTOS/Source/event_groups.c ****  * wait condition is met if any of the bits set in uxBitsToWait for are also set
  85:FreeRTOS/Source/event_groups.c ****  * in uxCurrentEventBits.
  86:FreeRTOS/Source/event_groups.c ****  */
  87:FreeRTOS/Source/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxB
  88:FreeRTOS/Source/event_groups.c **** 
  89:FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
  90:FreeRTOS/Source/event_groups.c **** 
ARM GAS  /tmp/ccKLeSvd.s 			page 3


  91:FreeRTOS/Source/event_groups.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
  92:FreeRTOS/Source/event_groups.c **** 
  93:FreeRTOS/Source/event_groups.c **** 	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
  94:FreeRTOS/Source/event_groups.c **** 	{
  95:FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
  96:FreeRTOS/Source/event_groups.c **** 
  97:FreeRTOS/Source/event_groups.c **** 		/* A StaticEventGroup_t object must be provided. */
  98:FreeRTOS/Source/event_groups.c **** 		configASSERT( pxEventGroupBuffer );
  99:FreeRTOS/Source/event_groups.c **** 
 100:FreeRTOS/Source/event_groups.c **** 		#if( configASSERT_DEFINED == 1 )
 101:FreeRTOS/Source/event_groups.c **** 		{
 102:FreeRTOS/Source/event_groups.c **** 			/* Sanity check that the size of the structure used to declare a
 103:FreeRTOS/Source/event_groups.c **** 			variable of type StaticEventGroup_t equals the size of the real
 104:FreeRTOS/Source/event_groups.c **** 			event group structure. */
 105:FreeRTOS/Source/event_groups.c **** 			volatile size_t xSize = sizeof( StaticEventGroup_t );
 106:FreeRTOS/Source/event_groups.c **** 			configASSERT( xSize == sizeof( EventGroup_t ) );
 107:FreeRTOS/Source/event_groups.c **** 		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
 108:FreeRTOS/Source/event_groups.c **** 		#endif /* configASSERT_DEFINED */
 109:FreeRTOS/Source/event_groups.c **** 
 110:FreeRTOS/Source/event_groups.c **** 		/* The user has provided a statically allocated event group - use it. */
 111:FreeRTOS/Source/event_groups.c **** 		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticE
 112:FreeRTOS/Source/event_groups.c **** 
 113:FreeRTOS/Source/event_groups.c **** 		if( pxEventBits != NULL )
 114:FreeRTOS/Source/event_groups.c **** 		{
 115:FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits = 0;
 116:FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 117:FreeRTOS/Source/event_groups.c **** 
 118:FreeRTOS/Source/event_groups.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 119:FreeRTOS/Source/event_groups.c **** 			{
 120:FreeRTOS/Source/event_groups.c **** 				/* Both static and dynamic allocation can be used, so note that
 121:FreeRTOS/Source/event_groups.c **** 				this event group was created statically in case the event group
 122:FreeRTOS/Source/event_groups.c **** 				is later deleted. */
 123:FreeRTOS/Source/event_groups.c **** 				pxEventBits->ucStaticallyAllocated = pdTRUE;
 124:FreeRTOS/Source/event_groups.c **** 			}
 125:FreeRTOS/Source/event_groups.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 126:FreeRTOS/Source/event_groups.c **** 
 127:FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE( pxEventBits );
 128:FreeRTOS/Source/event_groups.c **** 		}
 129:FreeRTOS/Source/event_groups.c **** 		else
 130:FreeRTOS/Source/event_groups.c **** 		{
 131:FreeRTOS/Source/event_groups.c **** 			/* xEventGroupCreateStatic should only ever be called with
 132:FreeRTOS/Source/event_groups.c **** 			pxEventGroupBuffer pointing to a pre-allocated (compile time
 133:FreeRTOS/Source/event_groups.c **** 			allocated) StaticEventGroup_t variable. */
 134:FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE_FAILED();
 135:FreeRTOS/Source/event_groups.c **** 		}
 136:FreeRTOS/Source/event_groups.c **** 
 137:FreeRTOS/Source/event_groups.c **** 		return pxEventBits;
 138:FreeRTOS/Source/event_groups.c **** 	}
 139:FreeRTOS/Source/event_groups.c **** 
 140:FreeRTOS/Source/event_groups.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 141:FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 142:FreeRTOS/Source/event_groups.c **** 
 143:FreeRTOS/Source/event_groups.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 144:FreeRTOS/Source/event_groups.c **** 
 145:FreeRTOS/Source/event_groups.c **** 	EventGroupHandle_t xEventGroupCreate( void )
 146:FreeRTOS/Source/event_groups.c **** 	{
  25              		.loc 1 146 0
ARM GAS  /tmp/ccKLeSvd.s 			page 4


  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 8
  28              		@ frame_needed = 1, uses_anonymous_args = 0
  29 0000 80B5     		push	{r7, lr}
  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 7, -8
  32              		.cfi_offset 14, -4
  33 0002 82B0     		sub	sp, sp, #8
  34              		.cfi_def_cfa_offset 16
  35 0004 00AF     		add	r7, sp, #0
  36              		.cfi_def_cfa_register 7
 147:FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
 148:FreeRTOS/Source/event_groups.c **** 
 149:FreeRTOS/Source/event_groups.c **** 		/* Allocate the event group.  Justification for MISRA deviation as
 150:FreeRTOS/Source/event_groups.c **** 		follows:  pvPortMalloc() always ensures returned memory blocks are
 151:FreeRTOS/Source/event_groups.c **** 		aligned per the requirements of the MCU stack.  In this case
 152:FreeRTOS/Source/event_groups.c **** 		pvPortMalloc() must return a pointer that is guaranteed to meet the
 153:FreeRTOS/Source/event_groups.c **** 		alignment requirements of the EventGroup_t structure - which (if you
 154:FreeRTOS/Source/event_groups.c **** 		follow it through) is the alignment requirements of the TickType_t type
 155:FreeRTOS/Source/event_groups.c **** 		(EventBits_t being of TickType_t itself).  Therefore, whenever the
 156:FreeRTOS/Source/event_groups.c **** 		stack alignment requirements are greater than or equal to the
 157:FreeRTOS/Source/event_groups.c **** 		TickType_t alignment requirements the cast is safe.  In other cases,
 158:FreeRTOS/Source/event_groups.c **** 		where the natural word size of the architecture is less than
 159:FreeRTOS/Source/event_groups.c **** 		sizeof( TickType_t ), the TickType_t variables will be accessed in two
 160:FreeRTOS/Source/event_groups.c **** 		or more reads operations, and the alignment requirements is only that
 161:FreeRTOS/Source/event_groups.c **** 		of each individual read. */
 162:FreeRTOS/Source/event_groups.c **** 		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see
  37              		.loc 1 162 0
  38 0006 1820     		movs	r0, #24
  39 0008 FFF7FEFF 		bl	pvPortMalloc
  40 000c 7860     		str	r0, [r7, #4]
 163:FreeRTOS/Source/event_groups.c **** 
 164:FreeRTOS/Source/event_groups.c **** 		if( pxEventBits != NULL )
  41              		.loc 1 164 0
  42 000e 7B68     		ldr	r3, [r7, #4]
  43 0010 002B     		cmp	r3, #0
  44 0012 07D0     		beq	.L2
 165:FreeRTOS/Source/event_groups.c **** 		{
 166:FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits = 0;
  45              		.loc 1 166 0
  46 0014 7B68     		ldr	r3, [r7, #4]
  47 0016 0022     		movs	r2, #0
  48 0018 1A60     		str	r2, [r3]
 167:FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
  49              		.loc 1 167 0
  50 001a 7B68     		ldr	r3, [r7, #4]
  51 001c 0433     		adds	r3, r3, #4
  52 001e 1846     		mov	r0, r3
  53 0020 FFF7FEFF 		bl	vListInitialise
  54              	.L2:
 168:FreeRTOS/Source/event_groups.c **** 
 169:FreeRTOS/Source/event_groups.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 170:FreeRTOS/Source/event_groups.c **** 			{
 171:FreeRTOS/Source/event_groups.c **** 				/* Both static and dynamic allocation can be used, so note this
 172:FreeRTOS/Source/event_groups.c **** 				event group was allocated statically in case the event group is
 173:FreeRTOS/Source/event_groups.c **** 				later deleted. */
 174:FreeRTOS/Source/event_groups.c **** 				pxEventBits->ucStaticallyAllocated = pdFALSE;
ARM GAS  /tmp/ccKLeSvd.s 			page 5


 175:FreeRTOS/Source/event_groups.c **** 			}
 176:FreeRTOS/Source/event_groups.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 177:FreeRTOS/Source/event_groups.c **** 
 178:FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE( pxEventBits );
 179:FreeRTOS/Source/event_groups.c **** 		}
 180:FreeRTOS/Source/event_groups.c **** 		else
 181:FreeRTOS/Source/event_groups.c **** 		{
 182:FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and doe
 183:FreeRTOS/Source/event_groups.c **** 		}
 184:FreeRTOS/Source/event_groups.c **** 
 185:FreeRTOS/Source/event_groups.c **** 		return pxEventBits;
  55              		.loc 1 185 0
  56 0024 7B68     		ldr	r3, [r7, #4]
 186:FreeRTOS/Source/event_groups.c **** 	}
  57              		.loc 1 186 0
  58 0026 1846     		mov	r0, r3
  59 0028 0837     		adds	r7, r7, #8
  60              		.cfi_def_cfa_offset 8
  61 002a BD46     		mov	sp, r7
  62              		.cfi_def_cfa_register 13
  63              		@ sp needed
  64 002c 80BD     		pop	{r7, pc}
  65              		.cfi_endproc
  66              	.LFE5:
  67              		.size	xEventGroupCreate, .-xEventGroupCreate
  68              		.align	1
  69              		.global	xEventGroupSync
  70              		.syntax unified
  71              		.thumb
  72              		.thumb_func
  73              		.fpu softvfp
  74              		.type	xEventGroupSync, %function
  75              	xEventGroupSync:
  76              	.LFB6:
 187:FreeRTOS/Source/event_groups.c **** 
 188:FreeRTOS/Source/event_groups.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 189:FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 190:FreeRTOS/Source/event_groups.c **** 
 191:FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const E
 192:FreeRTOS/Source/event_groups.c **** {
  77              		.loc 1 192 0
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 40
  80              		@ frame_needed = 1, uses_anonymous_args = 0
  81 002e 80B5     		push	{r7, lr}
  82              		.cfi_def_cfa_offset 8
  83              		.cfi_offset 7, -8
  84              		.cfi_offset 14, -4
  85 0030 8AB0     		sub	sp, sp, #40
  86              		.cfi_def_cfa_offset 48
  87 0032 00AF     		add	r7, sp, #0
  88              		.cfi_def_cfa_register 7
  89 0034 F860     		str	r0, [r7, #12]
  90 0036 B960     		str	r1, [r7, #8]
  91 0038 7A60     		str	r2, [r7, #4]
  92 003a 3B60     		str	r3, [r7]
 193:FreeRTOS/Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
ARM GAS  /tmp/ccKLeSvd.s 			page 6


 194:FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
  93              		.loc 1 194 0
  94 003c FB68     		ldr	r3, [r7, #12]
  95 003e 3B62     		str	r3, [r7, #32]
 195:FreeRTOS/Source/event_groups.c **** BaseType_t xAlreadyYielded;
 196:FreeRTOS/Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
  96              		.loc 1 196 0
  97 0040 0023     		movs	r3, #0
  98 0042 FB61     		str	r3, [r7, #28]
 197:FreeRTOS/Source/event_groups.c **** 
 198:FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 199:FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 200:FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 201:FreeRTOS/Source/event_groups.c **** 	{
 202:FreeRTOS/Source/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 203:FreeRTOS/Source/event_groups.c **** 	}
 204:FreeRTOS/Source/event_groups.c **** 	#endif
 205:FreeRTOS/Source/event_groups.c **** 
 206:FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
  99              		.loc 1 206 0
 100 0044 FFF7FEFF 		bl	vTaskSuspendAll
 207:FreeRTOS/Source/event_groups.c **** 	{
 208:FreeRTOS/Source/event_groups.c **** 		uxOriginalBitValue = pxEventBits->uxEventBits;
 101              		.loc 1 208 0
 102 0048 3B6A     		ldr	r3, [r7, #32]
 103 004a 1B68     		ldr	r3, [r3]
 104 004c BB61     		str	r3, [r7, #24]
 209:FreeRTOS/Source/event_groups.c **** 
 210:FreeRTOS/Source/event_groups.c **** 		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 105              		.loc 1 210 0
 106 004e B968     		ldr	r1, [r7, #8]
 107 0050 F868     		ldr	r0, [r7, #12]
 108 0052 FFF7FEFF 		bl	xEventGroupSetBits
 211:FreeRTOS/Source/event_groups.c **** 
 212:FreeRTOS/Source/event_groups.c **** 		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 109              		.loc 1 212 0
 110 0056 BA69     		ldr	r2, [r7, #24]
 111 0058 BB68     		ldr	r3, [r7, #8]
 112 005a 1A43     		orrs	r2, r2, r3
 113 005c 7B68     		ldr	r3, [r7, #4]
 114 005e 1A40     		ands	r2, r2, r3
 115 0060 7B68     		ldr	r3, [r7, #4]
 116 0062 9A42     		cmp	r2, r3
 117 0064 0DD1     		bne	.L5
 213:FreeRTOS/Source/event_groups.c **** 		{
 214:FreeRTOS/Source/event_groups.c **** 			/* All the rendezvous bits are now set - no need to block. */
 215:FreeRTOS/Source/event_groups.c **** 			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 118              		.loc 1 215 0
 119 0066 BA69     		ldr	r2, [r7, #24]
 120 0068 BB68     		ldr	r3, [r7, #8]
 121 006a 1343     		orrs	r3, r3, r2
 122 006c 7B62     		str	r3, [r7, #36]
 216:FreeRTOS/Source/event_groups.c **** 
 217:FreeRTOS/Source/event_groups.c **** 			/* Rendezvous always clear the bits.  They will have been cleared
 218:FreeRTOS/Source/event_groups.c **** 			already unless this is the only task in the rendezvous. */
 219:FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 123              		.loc 1 219 0
ARM GAS  /tmp/ccKLeSvd.s 			page 7


 124 006e 3B6A     		ldr	r3, [r7, #32]
 125 0070 1A68     		ldr	r2, [r3]
 126 0072 7B68     		ldr	r3, [r7, #4]
 127 0074 DB43     		mvns	r3, r3
 128 0076 1A40     		ands	r2, r2, r3
 129 0078 3B6A     		ldr	r3, [r7, #32]
 130 007a 1A60     		str	r2, [r3]
 220:FreeRTOS/Source/event_groups.c **** 
 221:FreeRTOS/Source/event_groups.c **** 			xTicksToWait = 0;
 131              		.loc 1 221 0
 132 007c 0023     		movs	r3, #0
 133 007e 3B60     		str	r3, [r7]
 134 0080 13E0     		b	.L6
 135              	.L5:
 222:FreeRTOS/Source/event_groups.c **** 		}
 223:FreeRTOS/Source/event_groups.c **** 		else
 224:FreeRTOS/Source/event_groups.c **** 		{
 225:FreeRTOS/Source/event_groups.c **** 			if( xTicksToWait != ( TickType_t ) 0 )
 136              		.loc 1 225 0
 137 0082 3B68     		ldr	r3, [r7]
 138 0084 002B     		cmp	r3, #0
 139 0086 0BD0     		beq	.L7
 226:FreeRTOS/Source/event_groups.c **** 			{
 227:FreeRTOS/Source/event_groups.c **** 				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );
 228:FreeRTOS/Source/event_groups.c **** 
 229:FreeRTOS/Source/event_groups.c **** 				/* Store the bits that the calling task is waiting for in the
 230:FreeRTOS/Source/event_groups.c **** 				task's event list item so the kernel knows when a match is
 231:FreeRTOS/Source/event_groups.c **** 				found.  Then enter the blocked state. */
 232:FreeRTOS/Source/event_groups.c **** 				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eve
 140              		.loc 1 232 0
 141 0088 3B6A     		ldr	r3, [r7, #32]
 142 008a 181D     		adds	r0, r3, #4
 143 008c 7B68     		ldr	r3, [r7, #4]
 144 008e 43F0A063 		orr	r3, r3, #83886080
 145 0092 3A68     		ldr	r2, [r7]
 146 0094 1946     		mov	r1, r3
 147 0096 FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 233:FreeRTOS/Source/event_groups.c **** 
 234:FreeRTOS/Source/event_groups.c **** 				/* This assignment is obsolete as uxReturn will get set after
 235:FreeRTOS/Source/event_groups.c **** 				the task unblocks, but some compilers mistakenly generate a
 236:FreeRTOS/Source/event_groups.c **** 				warning about uxReturn being returned without being set if the
 237:FreeRTOS/Source/event_groups.c **** 				assignment is omitted. */
 238:FreeRTOS/Source/event_groups.c **** 				uxReturn = 0;
 148              		.loc 1 238 0
 149 009a 0023     		movs	r3, #0
 150 009c 7B62     		str	r3, [r7, #36]
 151 009e 04E0     		b	.L6
 152              	.L7:
 239:FreeRTOS/Source/event_groups.c **** 			}
 240:FreeRTOS/Source/event_groups.c **** 			else
 241:FreeRTOS/Source/event_groups.c **** 			{
 242:FreeRTOS/Source/event_groups.c **** 				/* The rendezvous bits were not set, but no block time was
 243:FreeRTOS/Source/event_groups.c **** 				specified - just return the current event bit value. */
 244:FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 153              		.loc 1 244 0
 154 00a0 3B6A     		ldr	r3, [r7, #32]
 155 00a2 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccKLeSvd.s 			page 8


 156 00a4 7B62     		str	r3, [r7, #36]
 245:FreeRTOS/Source/event_groups.c **** 				xTimeoutOccurred = pdTRUE;
 157              		.loc 1 245 0
 158 00a6 0123     		movs	r3, #1
 159 00a8 FB61     		str	r3, [r7, #28]
 160              	.L6:
 246:FreeRTOS/Source/event_groups.c **** 			}
 247:FreeRTOS/Source/event_groups.c **** 		}
 248:FreeRTOS/Source/event_groups.c **** 	}
 249:FreeRTOS/Source/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 161              		.loc 1 249 0
 162 00aa FFF7FEFF 		bl	xTaskResumeAll
 163 00ae 7861     		str	r0, [r7, #20]
 250:FreeRTOS/Source/event_groups.c **** 
 251:FreeRTOS/Source/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 164              		.loc 1 251 0
 165 00b0 3B68     		ldr	r3, [r7]
 166 00b2 002B     		cmp	r3, #0
 167 00b4 2CD0     		beq	.L8
 252:FreeRTOS/Source/event_groups.c **** 	{
 253:FreeRTOS/Source/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 168              		.loc 1 253 0
 169 00b6 7B69     		ldr	r3, [r7, #20]
 170 00b8 002B     		cmp	r3, #0
 171 00ba 07D1     		bne	.L9
 254:FreeRTOS/Source/event_groups.c **** 		{
 255:FreeRTOS/Source/event_groups.c **** 			portYIELD_WITHIN_API();
 172              		.loc 1 255 0
 173 00bc 174B     		ldr	r3, .L13
 174 00be 4FF08052 		mov	r2, #268435456
 175 00c2 1A60     		str	r2, [r3]
 176              		.syntax unified
 177              	@ 255 "FreeRTOS/Source/event_groups.c" 1
 178 00c4 BFF34F8F 		dsb
 179              	@ 0 "" 2
 180              	@ 255 "FreeRTOS/Source/event_groups.c" 1
 181 00c8 BFF36F8F 		isb
 182              	@ 0 "" 2
 183              		.thumb
 184              		.syntax unified
 185              	.L9:
 256:FreeRTOS/Source/event_groups.c **** 		}
 257:FreeRTOS/Source/event_groups.c **** 		else
 258:FreeRTOS/Source/event_groups.c **** 		{
 259:FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 260:FreeRTOS/Source/event_groups.c **** 		}
 261:FreeRTOS/Source/event_groups.c **** 
 262:FreeRTOS/Source/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 263:FreeRTOS/Source/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 264:FreeRTOS/Source/event_groups.c **** 		the required bits were set they will have been stored in the task's
 265:FreeRTOS/Source/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
 266:FreeRTOS/Source/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 186              		.loc 1 266 0
 187 00cc FFF7FEFF 		bl	uxTaskResetEventItemValue
 188 00d0 7862     		str	r0, [r7, #36]
 267:FreeRTOS/Source/event_groups.c **** 
 268:FreeRTOS/Source/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
ARM GAS  /tmp/ccKLeSvd.s 			page 9


 189              		.loc 1 268 0
 190 00d2 7B6A     		ldr	r3, [r7, #36]
 191 00d4 03F00073 		and	r3, r3, #33554432
 192 00d8 002B     		cmp	r3, #0
 193 00da 15D1     		bne	.L10
 269:FreeRTOS/Source/event_groups.c **** 		{
 270:FreeRTOS/Source/event_groups.c **** 			/* The task timed out, just return the current event bit value. */
 271:FreeRTOS/Source/event_groups.c **** 			taskENTER_CRITICAL();
 194              		.loc 1 271 0
 195 00dc FFF7FEFF 		bl	vPortEnterCritical
 272:FreeRTOS/Source/event_groups.c **** 			{
 273:FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 196              		.loc 1 273 0
 197 00e0 3B6A     		ldr	r3, [r7, #32]
 198 00e2 1B68     		ldr	r3, [r3]
 199 00e4 7B62     		str	r3, [r7, #36]
 274:FreeRTOS/Source/event_groups.c **** 
 275:FreeRTOS/Source/event_groups.c **** 				/* Although the task got here because it timed out before the
 276:FreeRTOS/Source/event_groups.c **** 				bits it was waiting for were set, it is possible that since it
 277:FreeRTOS/Source/event_groups.c **** 				unblocked another task has set the bits.  If this is the case
 278:FreeRTOS/Source/event_groups.c **** 				then it needs to clear the bits before exiting. */
 279:FreeRTOS/Source/event_groups.c **** 				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 200              		.loc 1 279 0
 201 00e6 7A6A     		ldr	r2, [r7, #36]
 202 00e8 7B68     		ldr	r3, [r7, #4]
 203 00ea 1A40     		ands	r2, r2, r3
 204 00ec 7B68     		ldr	r3, [r7, #4]
 205 00ee 9A42     		cmp	r2, r3
 206 00f0 06D1     		bne	.L11
 280:FreeRTOS/Source/event_groups.c **** 				{
 281:FreeRTOS/Source/event_groups.c **** 					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 207              		.loc 1 281 0
 208 00f2 3B6A     		ldr	r3, [r7, #32]
 209 00f4 1A68     		ldr	r2, [r3]
 210 00f6 7B68     		ldr	r3, [r7, #4]
 211 00f8 DB43     		mvns	r3, r3
 212 00fa 1A40     		ands	r2, r2, r3
 213 00fc 3B6A     		ldr	r3, [r7, #32]
 214 00fe 1A60     		str	r2, [r3]
 215              	.L11:
 282:FreeRTOS/Source/event_groups.c **** 				}
 283:FreeRTOS/Source/event_groups.c **** 				else
 284:FreeRTOS/Source/event_groups.c **** 				{
 285:FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 286:FreeRTOS/Source/event_groups.c **** 				}
 287:FreeRTOS/Source/event_groups.c **** 			}
 288:FreeRTOS/Source/event_groups.c **** 			taskEXIT_CRITICAL();
 216              		.loc 1 288 0
 217 0100 FFF7FEFF 		bl	vPortExitCritical
 289:FreeRTOS/Source/event_groups.c **** 
 290:FreeRTOS/Source/event_groups.c **** 			xTimeoutOccurred = pdTRUE;
 218              		.loc 1 290 0
 219 0104 0123     		movs	r3, #1
 220 0106 FB61     		str	r3, [r7, #28]
 221              	.L10:
 291:FreeRTOS/Source/event_groups.c **** 		}
 292:FreeRTOS/Source/event_groups.c **** 		else
ARM GAS  /tmp/ccKLeSvd.s 			page 10


 293:FreeRTOS/Source/event_groups.c **** 		{
 294:FreeRTOS/Source/event_groups.c **** 			/* The task unblocked because the bits were set. */
 295:FreeRTOS/Source/event_groups.c **** 		}
 296:FreeRTOS/Source/event_groups.c **** 
 297:FreeRTOS/Source/event_groups.c **** 		/* Control bits might be set as the task had blocked should not be
 298:FreeRTOS/Source/event_groups.c **** 		returned. */
 299:FreeRTOS/Source/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 222              		.loc 1 299 0
 223 0108 7B6A     		ldr	r3, [r7, #36]
 224 010a 23F07F43 		bic	r3, r3, #-16777216
 225 010e 7B62     		str	r3, [r7, #36]
 226              	.L8:
 300:FreeRTOS/Source/event_groups.c **** 	}
 301:FreeRTOS/Source/event_groups.c **** 
 302:FreeRTOS/Source/event_groups.c **** 	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );
 303:FreeRTOS/Source/event_groups.c **** 
 304:FreeRTOS/Source/event_groups.c **** 	/* Prevent compiler warnings when trace macros are not used. */
 305:FreeRTOS/Source/event_groups.c **** 	( void ) xTimeoutOccurred;
 306:FreeRTOS/Source/event_groups.c **** 
 307:FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 227              		.loc 1 307 0
 228 0110 7B6A     		ldr	r3, [r7, #36]
 308:FreeRTOS/Source/event_groups.c **** }
 229              		.loc 1 308 0
 230 0112 1846     		mov	r0, r3
 231 0114 2837     		adds	r7, r7, #40
 232              		.cfi_def_cfa_offset 8
 233 0116 BD46     		mov	sp, r7
 234              		.cfi_def_cfa_register 13
 235              		@ sp needed
 236 0118 80BD     		pop	{r7, pc}
 237              	.L14:
 238 011a 00BF     		.align	2
 239              	.L13:
 240 011c 04ED00E0 		.word	-536810236
 241              		.cfi_endproc
 242              	.LFE6:
 243              		.size	xEventGroupSync, .-xEventGroupSync
 244              		.align	1
 245              		.global	xEventGroupWaitBits
 246              		.syntax unified
 247              		.thumb
 248              		.thumb_func
 249              		.fpu softvfp
 250              		.type	xEventGroupWaitBits, %function
 251              	xEventGroupWaitBits:
 252              	.LFB7:
 309:FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 310:FreeRTOS/Source/event_groups.c **** 
 311:FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor,
 312:FreeRTOS/Source/event_groups.c **** {
 253              		.loc 1 312 0
 254              		.cfi_startproc
 255              		@ args = 4, pretend = 0, frame = 48
 256              		@ frame_needed = 1, uses_anonymous_args = 0
 257 0120 80B5     		push	{r7, lr}
 258              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccKLeSvd.s 			page 11


 259              		.cfi_offset 7, -8
 260              		.cfi_offset 14, -4
 261 0122 8CB0     		sub	sp, sp, #48
 262              		.cfi_def_cfa_offset 56
 263 0124 00AF     		add	r7, sp, #0
 264              		.cfi_def_cfa_register 7
 265 0126 F860     		str	r0, [r7, #12]
 266 0128 B960     		str	r1, [r7, #8]
 267 012a 7A60     		str	r2, [r7, #4]
 268 012c 3B60     		str	r3, [r7]
 313:FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 269              		.loc 1 313 0
 270 012e FB68     		ldr	r3, [r7, #12]
 271 0130 7B62     		str	r3, [r7, #36]
 314:FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn, uxControlBits = 0;
 272              		.loc 1 314 0
 273 0132 0023     		movs	r3, #0
 274 0134 BB62     		str	r3, [r7, #40]
 315:FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet, xAlreadyYielded;
 316:FreeRTOS/Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 275              		.loc 1 316 0
 276 0136 0023     		movs	r3, #0
 277 0138 3B62     		str	r3, [r7, #32]
 317:FreeRTOS/Source/event_groups.c **** 
 318:FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to wait on the bits used by the kernel
 319:FreeRTOS/Source/event_groups.c **** 	itself, and that at least one bit is being requested. */
 320:FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 321:FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 322:FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 323:FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 324:FreeRTOS/Source/event_groups.c **** 	{
 325:FreeRTOS/Source/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 326:FreeRTOS/Source/event_groups.c **** 	}
 327:FreeRTOS/Source/event_groups.c **** 	#endif
 328:FreeRTOS/Source/event_groups.c **** 
 329:FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 278              		.loc 1 329 0
 279 013a FFF7FEFF 		bl	vTaskSuspendAll
 280              	.LBB6:
 330:FreeRTOS/Source/event_groups.c **** 	{
 331:FreeRTOS/Source/event_groups.c **** 		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 281              		.loc 1 331 0
 282 013e 7B6A     		ldr	r3, [r7, #36]
 283 0140 1B68     		ldr	r3, [r3]
 284 0142 FB61     		str	r3, [r7, #28]
 332:FreeRTOS/Source/event_groups.c **** 
 333:FreeRTOS/Source/event_groups.c **** 		/* Check to see if the wait condition is already met or not. */
 334:FreeRTOS/Source/event_groups.c **** 		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 285              		.loc 1 334 0
 286 0144 3A68     		ldr	r2, [r7]
 287 0146 B968     		ldr	r1, [r7, #8]
 288 0148 F869     		ldr	r0, [r7, #28]
 289 014a 00F056F9 		bl	prvTestWaitCondition
 290 014e B861     		str	r0, [r7, #24]
 335:FreeRTOS/Source/event_groups.c **** 
 336:FreeRTOS/Source/event_groups.c **** 		if( xWaitConditionMet != pdFALSE )
 291              		.loc 1 336 0
ARM GAS  /tmp/ccKLeSvd.s 			page 12


 292 0150 BB69     		ldr	r3, [r7, #24]
 293 0152 002B     		cmp	r3, #0
 294 0154 0ED0     		beq	.L16
 337:FreeRTOS/Source/event_groups.c **** 		{
 338:FreeRTOS/Source/event_groups.c **** 			/* The wait condition has already been met so there is no need to
 339:FreeRTOS/Source/event_groups.c **** 			block. */
 340:FreeRTOS/Source/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 295              		.loc 1 340 0
 296 0156 FB69     		ldr	r3, [r7, #28]
 297 0158 FB62     		str	r3, [r7, #44]
 341:FreeRTOS/Source/event_groups.c **** 			xTicksToWait = ( TickType_t ) 0;
 298              		.loc 1 341 0
 299 015a 0023     		movs	r3, #0
 300 015c BB63     		str	r3, [r7, #56]
 342:FreeRTOS/Source/event_groups.c **** 
 343:FreeRTOS/Source/event_groups.c **** 			/* Clear the wait bits if requested to do so. */
 344:FreeRTOS/Source/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 301              		.loc 1 344 0
 302 015e 7B68     		ldr	r3, [r7, #4]
 303 0160 002B     		cmp	r3, #0
 304 0162 28D0     		beq	.L17
 345:FreeRTOS/Source/event_groups.c **** 			{
 346:FreeRTOS/Source/event_groups.c **** 				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 305              		.loc 1 346 0
 306 0164 7B6A     		ldr	r3, [r7, #36]
 307 0166 1A68     		ldr	r2, [r3]
 308 0168 BB68     		ldr	r3, [r7, #8]
 309 016a DB43     		mvns	r3, r3
 310 016c 1A40     		ands	r2, r2, r3
 311 016e 7B6A     		ldr	r3, [r7, #36]
 312 0170 1A60     		str	r2, [r3]
 313 0172 20E0     		b	.L17
 314              	.L16:
 347:FreeRTOS/Source/event_groups.c **** 			}
 348:FreeRTOS/Source/event_groups.c **** 			else
 349:FreeRTOS/Source/event_groups.c **** 			{
 350:FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 351:FreeRTOS/Source/event_groups.c **** 			}
 352:FreeRTOS/Source/event_groups.c **** 		}
 353:FreeRTOS/Source/event_groups.c **** 		else if( xTicksToWait == ( TickType_t ) 0 )
 315              		.loc 1 353 0
 316 0174 BB6B     		ldr	r3, [r7, #56]
 317 0176 002B     		cmp	r3, #0
 318 0178 04D1     		bne	.L18
 354:FreeRTOS/Source/event_groups.c **** 		{
 355:FreeRTOS/Source/event_groups.c **** 			/* The wait condition has not been met, but no block time was
 356:FreeRTOS/Source/event_groups.c **** 			specified, so just return the current value. */
 357:FreeRTOS/Source/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 319              		.loc 1 357 0
 320 017a FB69     		ldr	r3, [r7, #28]
 321 017c FB62     		str	r3, [r7, #44]
 358:FreeRTOS/Source/event_groups.c **** 			xTimeoutOccurred = pdTRUE;
 322              		.loc 1 358 0
 323 017e 0123     		movs	r3, #1
 324 0180 3B62     		str	r3, [r7, #32]
 325 0182 18E0     		b	.L17
 326              	.L18:
ARM GAS  /tmp/ccKLeSvd.s 			page 13


 359:FreeRTOS/Source/event_groups.c **** 		}
 360:FreeRTOS/Source/event_groups.c **** 		else
 361:FreeRTOS/Source/event_groups.c **** 		{
 362:FreeRTOS/Source/event_groups.c **** 			/* The task is going to block to wait for its required bits to be
 363:FreeRTOS/Source/event_groups.c **** 			set.  uxControlBits are used to remember the specified behaviour of
 364:FreeRTOS/Source/event_groups.c **** 			this call to xEventGroupWaitBits() - for use when the event bits
 365:FreeRTOS/Source/event_groups.c **** 			unblock the task. */
 366:FreeRTOS/Source/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 327              		.loc 1 366 0
 328 0184 7B68     		ldr	r3, [r7, #4]
 329 0186 002B     		cmp	r3, #0
 330 0188 03D0     		beq	.L19
 367:FreeRTOS/Source/event_groups.c **** 			{
 368:FreeRTOS/Source/event_groups.c **** 				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 331              		.loc 1 368 0
 332 018a BB6A     		ldr	r3, [r7, #40]
 333 018c 43F08073 		orr	r3, r3, #16777216
 334 0190 BB62     		str	r3, [r7, #40]
 335              	.L19:
 369:FreeRTOS/Source/event_groups.c **** 			}
 370:FreeRTOS/Source/event_groups.c **** 			else
 371:FreeRTOS/Source/event_groups.c **** 			{
 372:FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 373:FreeRTOS/Source/event_groups.c **** 			}
 374:FreeRTOS/Source/event_groups.c **** 
 375:FreeRTOS/Source/event_groups.c **** 			if( xWaitForAllBits != pdFALSE )
 336              		.loc 1 375 0
 337 0192 3B68     		ldr	r3, [r7]
 338 0194 002B     		cmp	r3, #0
 339 0196 03D0     		beq	.L20
 376:FreeRTOS/Source/event_groups.c **** 			{
 377:FreeRTOS/Source/event_groups.c **** 				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 340              		.loc 1 377 0
 341 0198 BB6A     		ldr	r3, [r7, #40]
 342 019a 43F08063 		orr	r3, r3, #67108864
 343 019e BB62     		str	r3, [r7, #40]
 344              	.L20:
 378:FreeRTOS/Source/event_groups.c **** 			}
 379:FreeRTOS/Source/event_groups.c **** 			else
 380:FreeRTOS/Source/event_groups.c **** 			{
 381:FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 382:FreeRTOS/Source/event_groups.c **** 			}
 383:FreeRTOS/Source/event_groups.c **** 
 384:FreeRTOS/Source/event_groups.c **** 			/* Store the bits that the calling task is waiting for in the
 385:FreeRTOS/Source/event_groups.c **** 			task's event list item so the kernel knows when a match is
 386:FreeRTOS/Source/event_groups.c **** 			found.  Then enter the blocked state. */
 387:FreeRTOS/Source/event_groups.c **** 			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxCo
 345              		.loc 1 387 0
 346 01a0 7B6A     		ldr	r3, [r7, #36]
 347 01a2 181D     		adds	r0, r3, #4
 348 01a4 BA68     		ldr	r2, [r7, #8]
 349 01a6 BB6A     		ldr	r3, [r7, #40]
 350 01a8 1343     		orrs	r3, r3, r2
 351 01aa BA6B     		ldr	r2, [r7, #56]
 352 01ac 1946     		mov	r1, r3
 353 01ae FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 388:FreeRTOS/Source/event_groups.c **** 
ARM GAS  /tmp/ccKLeSvd.s 			page 14


 389:FreeRTOS/Source/event_groups.c **** 			/* This is obsolete as it will get set after the task unblocks, but
 390:FreeRTOS/Source/event_groups.c **** 			some compilers mistakenly generate a warning about the variable
 391:FreeRTOS/Source/event_groups.c **** 			being returned without being set if it is not done. */
 392:FreeRTOS/Source/event_groups.c **** 			uxReturn = 0;
 354              		.loc 1 392 0
 355 01b2 0023     		movs	r3, #0
 356 01b4 FB62     		str	r3, [r7, #44]
 357              	.L17:
 358              	.LBE6:
 393:FreeRTOS/Source/event_groups.c **** 
 394:FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
 395:FreeRTOS/Source/event_groups.c **** 		}
 396:FreeRTOS/Source/event_groups.c **** 	}
 397:FreeRTOS/Source/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 359              		.loc 1 397 0
 360 01b6 FFF7FEFF 		bl	xTaskResumeAll
 361 01ba 7861     		str	r0, [r7, #20]
 398:FreeRTOS/Source/event_groups.c **** 
 399:FreeRTOS/Source/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 362              		.loc 1 399 0
 363 01bc BB6B     		ldr	r3, [r7, #56]
 364 01be 002B     		cmp	r3, #0
 365 01c0 31D0     		beq	.L21
 400:FreeRTOS/Source/event_groups.c **** 	{
 401:FreeRTOS/Source/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 366              		.loc 1 401 0
 367 01c2 7B69     		ldr	r3, [r7, #20]
 368 01c4 002B     		cmp	r3, #0
 369 01c6 07D1     		bne	.L22
 402:FreeRTOS/Source/event_groups.c **** 		{
 403:FreeRTOS/Source/event_groups.c **** 			portYIELD_WITHIN_API();
 370              		.loc 1 403 0
 371 01c8 194B     		ldr	r3, .L26
 372 01ca 4FF08052 		mov	r2, #268435456
 373 01ce 1A60     		str	r2, [r3]
 374              		.syntax unified
 375              	@ 403 "FreeRTOS/Source/event_groups.c" 1
 376 01d0 BFF34F8F 		dsb
 377              	@ 0 "" 2
 378              	@ 403 "FreeRTOS/Source/event_groups.c" 1
 379 01d4 BFF36F8F 		isb
 380              	@ 0 "" 2
 381              		.thumb
 382              		.syntax unified
 383              	.L22:
 404:FreeRTOS/Source/event_groups.c **** 		}
 405:FreeRTOS/Source/event_groups.c **** 		else
 406:FreeRTOS/Source/event_groups.c **** 		{
 407:FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 408:FreeRTOS/Source/event_groups.c **** 		}
 409:FreeRTOS/Source/event_groups.c **** 
 410:FreeRTOS/Source/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 411:FreeRTOS/Source/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 412:FreeRTOS/Source/event_groups.c **** 		the required bits were set they will have been stored in the task's
 413:FreeRTOS/Source/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
 414:FreeRTOS/Source/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 384              		.loc 1 414 0
ARM GAS  /tmp/ccKLeSvd.s 			page 15


 385 01d8 FFF7FEFF 		bl	uxTaskResetEventItemValue
 386 01dc F862     		str	r0, [r7, #44]
 415:FreeRTOS/Source/event_groups.c **** 
 416:FreeRTOS/Source/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 387              		.loc 1 416 0
 388 01de FB6A     		ldr	r3, [r7, #44]
 389 01e0 03F00073 		and	r3, r3, #33554432
 390 01e4 002B     		cmp	r3, #0
 391 01e6 1AD1     		bne	.L23
 417:FreeRTOS/Source/event_groups.c **** 		{
 418:FreeRTOS/Source/event_groups.c **** 			taskENTER_CRITICAL();
 392              		.loc 1 418 0
 393 01e8 FFF7FEFF 		bl	vPortEnterCritical
 419:FreeRTOS/Source/event_groups.c **** 			{
 420:FreeRTOS/Source/event_groups.c **** 				/* The task timed out, just return the current event bit value. */
 421:FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 394              		.loc 1 421 0
 395 01ec 7B6A     		ldr	r3, [r7, #36]
 396 01ee 1B68     		ldr	r3, [r3]
 397 01f0 FB62     		str	r3, [r7, #44]
 422:FreeRTOS/Source/event_groups.c **** 
 423:FreeRTOS/Source/event_groups.c **** 				/* It is possible that the event bits were updated between this
 424:FreeRTOS/Source/event_groups.c **** 				task leaving the Blocked state and running again. */
 425:FreeRTOS/Source/event_groups.c **** 				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 398              		.loc 1 425 0
 399 01f2 3A68     		ldr	r2, [r7]
 400 01f4 B968     		ldr	r1, [r7, #8]
 401 01f6 F86A     		ldr	r0, [r7, #44]
 402 01f8 00F0FFF8 		bl	prvTestWaitCondition
 403 01fc 0346     		mov	r3, r0
 404 01fe 002B     		cmp	r3, #0
 405 0200 09D0     		beq	.L24
 426:FreeRTOS/Source/event_groups.c **** 				{
 427:FreeRTOS/Source/event_groups.c **** 					if( xClearOnExit != pdFALSE )
 406              		.loc 1 427 0
 407 0202 7B68     		ldr	r3, [r7, #4]
 408 0204 002B     		cmp	r3, #0
 409 0206 06D0     		beq	.L24
 428:FreeRTOS/Source/event_groups.c **** 					{
 429:FreeRTOS/Source/event_groups.c **** 						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 410              		.loc 1 429 0
 411 0208 7B6A     		ldr	r3, [r7, #36]
 412 020a 1A68     		ldr	r2, [r3]
 413 020c BB68     		ldr	r3, [r7, #8]
 414 020e DB43     		mvns	r3, r3
 415 0210 1A40     		ands	r2, r2, r3
 416 0212 7B6A     		ldr	r3, [r7, #36]
 417 0214 1A60     		str	r2, [r3]
 418              	.L24:
 430:FreeRTOS/Source/event_groups.c **** 					}
 431:FreeRTOS/Source/event_groups.c **** 					else
 432:FreeRTOS/Source/event_groups.c **** 					{
 433:FreeRTOS/Source/event_groups.c **** 						mtCOVERAGE_TEST_MARKER();
 434:FreeRTOS/Source/event_groups.c **** 					}
 435:FreeRTOS/Source/event_groups.c **** 				}
 436:FreeRTOS/Source/event_groups.c **** 				else
 437:FreeRTOS/Source/event_groups.c **** 				{
ARM GAS  /tmp/ccKLeSvd.s 			page 16


 438:FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 439:FreeRTOS/Source/event_groups.c **** 				}
 440:FreeRTOS/Source/event_groups.c **** 				xTimeoutOccurred = pdTRUE;
 419              		.loc 1 440 0
 420 0216 0123     		movs	r3, #1
 421 0218 3B62     		str	r3, [r7, #32]
 441:FreeRTOS/Source/event_groups.c **** 			}
 442:FreeRTOS/Source/event_groups.c **** 			taskEXIT_CRITICAL();
 422              		.loc 1 442 0
 423 021a FFF7FEFF 		bl	vPortExitCritical
 424              	.L23:
 443:FreeRTOS/Source/event_groups.c **** 		}
 444:FreeRTOS/Source/event_groups.c **** 		else
 445:FreeRTOS/Source/event_groups.c **** 		{
 446:FreeRTOS/Source/event_groups.c **** 			/* The task unblocked because the bits were set. */
 447:FreeRTOS/Source/event_groups.c **** 		}
 448:FreeRTOS/Source/event_groups.c **** 
 449:FreeRTOS/Source/event_groups.c **** 		/* The task blocked so control bits may have been set. */
 450:FreeRTOS/Source/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 425              		.loc 1 450 0
 426 021e FB6A     		ldr	r3, [r7, #44]
 427 0220 23F07F43 		bic	r3, r3, #-16777216
 428 0224 FB62     		str	r3, [r7, #44]
 429              	.L21:
 451:FreeRTOS/Source/event_groups.c **** 	}
 452:FreeRTOS/Source/event_groups.c **** 	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
 453:FreeRTOS/Source/event_groups.c **** 
 454:FreeRTOS/Source/event_groups.c **** 	/* Prevent compiler warnings when trace macros are not used. */
 455:FreeRTOS/Source/event_groups.c **** 	( void ) xTimeoutOccurred;
 456:FreeRTOS/Source/event_groups.c **** 
 457:FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 430              		.loc 1 457 0
 431 0226 FB6A     		ldr	r3, [r7, #44]
 458:FreeRTOS/Source/event_groups.c **** }
 432              		.loc 1 458 0
 433 0228 1846     		mov	r0, r3
 434 022a 3037     		adds	r7, r7, #48
 435              		.cfi_def_cfa_offset 8
 436 022c BD46     		mov	sp, r7
 437              		.cfi_def_cfa_register 13
 438              		@ sp needed
 439 022e 80BD     		pop	{r7, pc}
 440              	.L27:
 441              		.align	2
 442              	.L26:
 443 0230 04ED00E0 		.word	-536810236
 444              		.cfi_endproc
 445              	.LFE7:
 446              		.size	xEventGroupWaitBits, .-xEventGroupWaitBits
 447              		.align	1
 448              		.global	xEventGroupClearBits
 449              		.syntax unified
 450              		.thumb
 451              		.thumb_func
 452              		.fpu softvfp
 453              		.type	xEventGroupClearBits, %function
 454              	xEventGroupClearBits:
ARM GAS  /tmp/ccKLeSvd.s 			page 17


 455              	.LFB8:
 459:FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 460:FreeRTOS/Source/event_groups.c **** 
 461:FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
 462:FreeRTOS/Source/event_groups.c **** {
 456              		.loc 1 462 0
 457              		.cfi_startproc
 458              		@ args = 0, pretend = 0, frame = 16
 459              		@ frame_needed = 1, uses_anonymous_args = 0
 460 0234 80B5     		push	{r7, lr}
 461              		.cfi_def_cfa_offset 8
 462              		.cfi_offset 7, -8
 463              		.cfi_offset 14, -4
 464 0236 84B0     		sub	sp, sp, #16
 465              		.cfi_def_cfa_offset 24
 466 0238 00AF     		add	r7, sp, #0
 467              		.cfi_def_cfa_register 7
 468 023a 7860     		str	r0, [r7, #4]
 469 023c 3960     		str	r1, [r7]
 463:FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 470              		.loc 1 463 0
 471 023e 7B68     		ldr	r3, [r7, #4]
 472 0240 FB60     		str	r3, [r7, #12]
 464:FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn;
 465:FreeRTOS/Source/event_groups.c **** 
 466:FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to clear the bits used by the kernel
 467:FreeRTOS/Source/event_groups.c **** 	itself. */
 468:FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 469:FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 470:FreeRTOS/Source/event_groups.c **** 
 471:FreeRTOS/Source/event_groups.c **** 	taskENTER_CRITICAL();
 473              		.loc 1 471 0
 474 0242 FFF7FEFF 		bl	vPortEnterCritical
 472:FreeRTOS/Source/event_groups.c **** 	{
 473:FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );
 474:FreeRTOS/Source/event_groups.c **** 
 475:FreeRTOS/Source/event_groups.c **** 		/* The value returned is the event group value prior to the bits being
 476:FreeRTOS/Source/event_groups.c **** 		cleared. */
 477:FreeRTOS/Source/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
 475              		.loc 1 477 0
 476 0246 FB68     		ldr	r3, [r7, #12]
 477 0248 1B68     		ldr	r3, [r3]
 478 024a BB60     		str	r3, [r7, #8]
 478:FreeRTOS/Source/event_groups.c **** 
 479:FreeRTOS/Source/event_groups.c **** 		/* Clear the bits. */
 480:FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
 479              		.loc 1 480 0
 480 024c FB68     		ldr	r3, [r7, #12]
 481 024e 1A68     		ldr	r2, [r3]
 482 0250 3B68     		ldr	r3, [r7]
 483 0252 DB43     		mvns	r3, r3
 484 0254 1A40     		ands	r2, r2, r3
 485 0256 FB68     		ldr	r3, [r7, #12]
 486 0258 1A60     		str	r2, [r3]
 481:FreeRTOS/Source/event_groups.c **** 	}
 482:FreeRTOS/Source/event_groups.c **** 	taskEXIT_CRITICAL();
 487              		.loc 1 482 0
ARM GAS  /tmp/ccKLeSvd.s 			page 18


 488 025a FFF7FEFF 		bl	vPortExitCritical
 483:FreeRTOS/Source/event_groups.c **** 
 484:FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 489              		.loc 1 484 0
 490 025e BB68     		ldr	r3, [r7, #8]
 485:FreeRTOS/Source/event_groups.c **** }
 491              		.loc 1 485 0
 492 0260 1846     		mov	r0, r3
 493 0262 1037     		adds	r7, r7, #16
 494              		.cfi_def_cfa_offset 8
 495 0264 BD46     		mov	sp, r7
 496              		.cfi_def_cfa_register 13
 497              		@ sp needed
 498 0266 80BD     		pop	{r7, pc}
 499              		.cfi_endproc
 500              	.LFE8:
 501              		.size	xEventGroupClearBits, .-xEventGroupClearBits
 502              		.align	1
 503              		.global	xEventGroupGetBitsFromISR
 504              		.syntax unified
 505              		.thumb
 506              		.thumb_func
 507              		.fpu softvfp
 508              		.type	xEventGroupGetBitsFromISR, %function
 509              	xEventGroupGetBitsFromISR:
 510              	.LFB9:
 486:FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 487:FreeRTOS/Source/event_groups.c **** 
 488:FreeRTOS/Source/event_groups.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_T
 489:FreeRTOS/Source/event_groups.c **** 
 490:FreeRTOS/Source/event_groups.c **** 	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsTo
 491:FreeRTOS/Source/event_groups.c **** 	{
 492:FreeRTOS/Source/event_groups.c **** 		BaseType_t xReturn;
 493:FreeRTOS/Source/event_groups.c **** 
 494:FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
 495:FreeRTOS/Source/event_groups.c **** 		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( 
 496:FreeRTOS/Source/event_groups.c **** 
 497:FreeRTOS/Source/event_groups.c **** 		return xReturn;
 498:FreeRTOS/Source/event_groups.c **** 	}
 499:FreeRTOS/Source/event_groups.c **** 
 500:FreeRTOS/Source/event_groups.c **** #endif
 501:FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 502:FreeRTOS/Source/event_groups.c **** 
 503:FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
 504:FreeRTOS/Source/event_groups.c **** {
 511              		.loc 1 504 0
 512              		.cfi_startproc
 513              		@ args = 0, pretend = 0, frame = 32
 514              		@ frame_needed = 1, uses_anonymous_args = 0
 515              		@ link register save eliminated.
 516 0268 80B4     		push	{r7}
 517              		.cfi_def_cfa_offset 4
 518              		.cfi_offset 7, -4
 519 026a 89B0     		sub	sp, sp, #36
 520              		.cfi_def_cfa_offset 40
 521 026c 00AF     		add	r7, sp, #0
 522              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccKLeSvd.s 			page 19


 523 026e 7860     		str	r0, [r7, #4]
 505:FreeRTOS/Source/event_groups.c **** UBaseType_t uxSavedInterruptStatus;
 506:FreeRTOS/Source/event_groups.c **** EventGroup_t const * const pxEventBits = xEventGroup;
 524              		.loc 1 506 0
 525 0270 7B68     		ldr	r3, [r7, #4]
 526 0272 FB61     		str	r3, [r7, #28]
 527              	.LBB7:
 528              	.LBB8:
 529              		.file 2 "FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h"
   1:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*
   2:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
   5:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * subject to the following conditions:
  11:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  12:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  14:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  15:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  22:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * http://www.FreeRTOS.org
  23:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * http://aws.amazon.com/freertos
  24:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  25:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * 1 tab == 4 spaces!
  26:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  */
  27:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  28:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  29:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  30:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define PORTMACRO_H
  31:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  32:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef __cplusplus
  33:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern "C" {
  34:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
  35:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  36:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  37:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Port specific definitions.
  38:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  39:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  41:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  42:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  43:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  44:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  */
  45:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  46:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Type definitions. */
  47:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCHAR		char
  48:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portFLOAT		float
ARM GAS  /tmp/ccKLeSvd.s 			page 20


  49:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDOUBLE		double
  50:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portLONG		long
  51:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSHORT		short
  52:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  54:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  55:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef long BaseType_t;
  57:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  58:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  59:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
  61:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #else
  63:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
  64:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  66:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
  68:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
  70:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  71:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  72:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specifics. */
  73:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  77:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  78:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  79:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD() 															\
  80:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {																				\
  81:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 																				\
  84:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
  88:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
  89:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  90:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  95:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  96:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Critical section management. */
  97:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
  98:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
  99:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
ARM GAS  /tmp/ccKLeSvd.s 			page 21


 106:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 107:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 108:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 111:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 114:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 115:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 116:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 120:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 121:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 122:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 123:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 126:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 127:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 129:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 130:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 132:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 133:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 134:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 136:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 137:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 138:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 139:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#endif
 142:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 143:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 147:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 149:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 151:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 153:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 154:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 155:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef configASSERT
 156:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 159:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 160:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 161:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNOP()
 162:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
ARM GAS  /tmp/ccKLeSvd.s 			page 22


 163:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portINLINE	__inline
 164:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 165:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 166:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 168:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 169:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 170:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 171:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 172:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 173:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 174:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** BaseType_t xReturn;
 175:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 176:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 177:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 178:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 179:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 180:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 181:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 182:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 183:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	else
 184:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 185:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 186:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 187:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 188:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	return xReturn;
 189:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 190:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 191:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 192:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 193:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 194:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 195:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 196:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 197:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 198:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 199:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n" \
 200:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 201:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 202:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 203:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 204:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	);
 205:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 206:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 207:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 208:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 209:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 210:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 211:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 212:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 213:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 530              		.loc 2 213 0
 531              		.syntax unified
 532              	@ 213 "FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 533 0274 EFF31182 			mrs r2, basepri											
 534 0278 4FF0BF03 		mov r3, #191												
 535 027c 83F31188 		msr basepri, r3											
ARM GAS  /tmp/ccKLeSvd.s 			page 23


 536 0280 BFF36F8F 		isb														
 537 0284 BFF34F8F 		dsb														
 538              	
 539              	@ 0 "" 2
 540              		.thumb
 541              		.syntax unified
 542 0288 FA60     		str	r2, [r7, #12]
 543 028a BB60     		str	r3, [r7, #8]
 214:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 215:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 216:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n" \
 217:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 218:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 219:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 220:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 221:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	);
 222:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 223:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 224:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	warnings. */
 225:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 544              		.loc 2 225 0
 545 028c FB68     		ldr	r3, [r7, #12]
 546              	.LBE8:
 547              	.LBE7:
 507:FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn;
 508:FreeRTOS/Source/event_groups.c **** 
 509:FreeRTOS/Source/event_groups.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 548              		.loc 1 509 0
 549 028e BB61     		str	r3, [r7, #24]
 510:FreeRTOS/Source/event_groups.c **** 	{
 511:FreeRTOS/Source/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
 550              		.loc 1 511 0
 551 0290 FB69     		ldr	r3, [r7, #28]
 552 0292 1B68     		ldr	r3, [r3]
 553 0294 7B61     		str	r3, [r7, #20]
 554 0296 BB69     		ldr	r3, [r7, #24]
 555 0298 3B61     		str	r3, [r7, #16]
 556              	.LBB9:
 557              	.LBB10:
 226:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 227:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 228:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 229:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 230:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 231:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 558              		.loc 2 231 0
 559 029a 3B69     		ldr	r3, [r7, #16]
 560              		.syntax unified
 561              	@ 231 "FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 562 029c 83F31188 			msr basepri, r3	
 563              	@ 0 "" 2
 564              		.thumb
 565              		.syntax unified
 566              	.LBE10:
 567              	.LBE9:
 512:FreeRTOS/Source/event_groups.c **** 	}
 513:FreeRTOS/Source/event_groups.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
ARM GAS  /tmp/ccKLeSvd.s 			page 24


 514:FreeRTOS/Source/event_groups.c **** 
 515:FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 568              		.loc 1 515 0
 569 02a0 7B69     		ldr	r3, [r7, #20]
 516:FreeRTOS/Source/event_groups.c **** } /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to co
 570              		.loc 1 516 0
 571 02a2 1846     		mov	r0, r3
 572 02a4 2437     		adds	r7, r7, #36
 573              		.cfi_def_cfa_offset 4
 574 02a6 BD46     		mov	sp, r7
 575              		.cfi_def_cfa_register 13
 576              		@ sp needed
 577 02a8 80BC     		pop	{r7}
 578              		.cfi_restore 7
 579              		.cfi_def_cfa_offset 0
 580 02aa 7047     		bx	lr
 581              		.cfi_endproc
 582              	.LFE9:
 583              		.size	xEventGroupGetBitsFromISR, .-xEventGroupGetBitsFromISR
 584              		.align	1
 585              		.global	xEventGroupSetBits
 586              		.syntax unified
 587              		.thumb
 588              		.thumb_func
 589              		.fpu softvfp
 590              		.type	xEventGroupSetBits, %function
 591              	xEventGroupSetBits:
 592              	.LFB10:
 517:FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 518:FreeRTOS/Source/event_groups.c **** 
 519:FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
 520:FreeRTOS/Source/event_groups.c **** {
 593              		.loc 1 520 0
 594              		.cfi_startproc
 595              		@ args = 0, pretend = 0, frame = 48
 596              		@ frame_needed = 1, uses_anonymous_args = 0
 597 02ac 80B5     		push	{r7, lr}
 598              		.cfi_def_cfa_offset 8
 599              		.cfi_offset 7, -8
 600              		.cfi_offset 14, -4
 601 02ae 8CB0     		sub	sp, sp, #48
 602              		.cfi_def_cfa_offset 56
 603 02b0 00AF     		add	r7, sp, #0
 604              		.cfi_def_cfa_register 7
 605 02b2 7860     		str	r0, [r7, #4]
 606 02b4 3960     		str	r1, [r7]
 521:FreeRTOS/Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 522:FreeRTOS/Source/event_groups.c **** ListItem_t const *pxListEnd;
 523:FreeRTOS/Source/event_groups.c **** List_t const * pxList;
 524:FreeRTOS/Source/event_groups.c **** EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 607              		.loc 1 524 0
 608 02b6 0023     		movs	r3, #0
 609 02b8 BB62     		str	r3, [r7, #40]
 525:FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 610              		.loc 1 525 0
 611 02ba 7B68     		ldr	r3, [r7, #4]
 612 02bc 3B62     		str	r3, [r7, #32]
ARM GAS  /tmp/ccKLeSvd.s 			page 25


 526:FreeRTOS/Source/event_groups.c **** BaseType_t xMatchFound = pdFALSE;
 613              		.loc 1 526 0
 614 02be 0023     		movs	r3, #0
 615 02c0 7B62     		str	r3, [r7, #36]
 527:FreeRTOS/Source/event_groups.c **** 
 528:FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to set the bits used by the kernel
 529:FreeRTOS/Source/event_groups.c **** 	itself. */
 530:FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 531:FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 532:FreeRTOS/Source/event_groups.c **** 
 533:FreeRTOS/Source/event_groups.c **** 	pxList = &( pxEventBits->xTasksWaitingForBits );
 616              		.loc 1 533 0
 617 02c2 3B6A     		ldr	r3, [r7, #32]
 618 02c4 0433     		adds	r3, r3, #4
 619 02c6 FB61     		str	r3, [r7, #28]
 534:FreeRTOS/Source/event_groups.c **** 	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is use
 620              		.loc 1 534 0
 621 02c8 FB69     		ldr	r3, [r7, #28]
 622 02ca 0833     		adds	r3, r3, #8
 623 02cc BB61     		str	r3, [r7, #24]
 535:FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 624              		.loc 1 535 0
 625 02ce FFF7FEFF 		bl	vTaskSuspendAll
 536:FreeRTOS/Source/event_groups.c **** 	{
 537:FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
 538:FreeRTOS/Source/event_groups.c **** 
 539:FreeRTOS/Source/event_groups.c **** 		pxListItem = listGET_HEAD_ENTRY( pxList );
 626              		.loc 1 539 0
 627 02d2 FB69     		ldr	r3, [r7, #28]
 628 02d4 DB68     		ldr	r3, [r3, #12]
 629 02d6 FB62     		str	r3, [r7, #44]
 540:FreeRTOS/Source/event_groups.c **** 
 541:FreeRTOS/Source/event_groups.c **** 		/* Set the bits. */
 542:FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits |= uxBitsToSet;
 630              		.loc 1 542 0
 631 02d8 3B6A     		ldr	r3, [r7, #32]
 632 02da 1A68     		ldr	r2, [r3]
 633 02dc 3B68     		ldr	r3, [r7]
 634 02de 1A43     		orrs	r2, r2, r3
 635 02e0 3B6A     		ldr	r3, [r7, #32]
 636 02e2 1A60     		str	r2, [r3]
 543:FreeRTOS/Source/event_groups.c **** 
 544:FreeRTOS/Source/event_groups.c **** 		/* See if the new bit value should unblock any tasks. */
 545:FreeRTOS/Source/event_groups.c **** 		while( pxListItem != pxListEnd )
 637              		.loc 1 545 0
 638 02e4 3CE0     		b	.L34
 639              	.L39:
 546:FreeRTOS/Source/event_groups.c **** 		{
 547:FreeRTOS/Source/event_groups.c **** 			pxNext = listGET_NEXT( pxListItem );
 640              		.loc 1 547 0
 641 02e6 FB6A     		ldr	r3, [r7, #44]
 642 02e8 5B68     		ldr	r3, [r3, #4]
 643 02ea 7B61     		str	r3, [r7, #20]
 548:FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 644              		.loc 1 548 0
 645 02ec FB6A     		ldr	r3, [r7, #44]
 646 02ee 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccKLeSvd.s 			page 26


 647 02f0 3B61     		str	r3, [r7, #16]
 549:FreeRTOS/Source/event_groups.c **** 			xMatchFound = pdFALSE;
 648              		.loc 1 549 0
 649 02f2 0023     		movs	r3, #0
 650 02f4 7B62     		str	r3, [r7, #36]
 550:FreeRTOS/Source/event_groups.c **** 
 551:FreeRTOS/Source/event_groups.c **** 			/* Split the bits waited for from the control bits. */
 552:FreeRTOS/Source/event_groups.c **** 			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 651              		.loc 1 552 0
 652 02f6 3B69     		ldr	r3, [r7, #16]
 653 02f8 03F07F43 		and	r3, r3, #-16777216
 654 02fc FB60     		str	r3, [r7, #12]
 553:FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 655              		.loc 1 553 0
 656 02fe 3B69     		ldr	r3, [r7, #16]
 657 0300 23F07F43 		bic	r3, r3, #-16777216
 658 0304 3B61     		str	r3, [r7, #16]
 554:FreeRTOS/Source/event_groups.c **** 
 555:FreeRTOS/Source/event_groups.c **** 			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 659              		.loc 1 555 0
 660 0306 FB68     		ldr	r3, [r7, #12]
 661 0308 03F08063 		and	r3, r3, #67108864
 662 030c 002B     		cmp	r3, #0
 663 030e 08D1     		bne	.L35
 556:FreeRTOS/Source/event_groups.c **** 			{
 557:FreeRTOS/Source/event_groups.c **** 				/* Just looking for single bit being set. */
 558:FreeRTOS/Source/event_groups.c **** 				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 664              		.loc 1 558 0
 665 0310 3B6A     		ldr	r3, [r7, #32]
 666 0312 1A68     		ldr	r2, [r3]
 667 0314 3B69     		ldr	r3, [r7, #16]
 668 0316 1340     		ands	r3, r3, r2
 669 0318 002B     		cmp	r3, #0
 670 031a 0BD0     		beq	.L36
 559:FreeRTOS/Source/event_groups.c **** 				{
 560:FreeRTOS/Source/event_groups.c **** 					xMatchFound = pdTRUE;
 671              		.loc 1 560 0
 672 031c 0123     		movs	r3, #1
 673 031e 7B62     		str	r3, [r7, #36]
 674 0320 08E0     		b	.L36
 675              	.L35:
 561:FreeRTOS/Source/event_groups.c **** 				}
 562:FreeRTOS/Source/event_groups.c **** 				else
 563:FreeRTOS/Source/event_groups.c **** 				{
 564:FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 565:FreeRTOS/Source/event_groups.c **** 				}
 566:FreeRTOS/Source/event_groups.c **** 			}
 567:FreeRTOS/Source/event_groups.c **** 			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 676              		.loc 1 567 0
 677 0322 3B6A     		ldr	r3, [r7, #32]
 678 0324 1A68     		ldr	r2, [r3]
 679 0326 3B69     		ldr	r3, [r7, #16]
 680 0328 1A40     		ands	r2, r2, r3
 681 032a 3B69     		ldr	r3, [r7, #16]
 682 032c 9A42     		cmp	r2, r3
 683 032e 01D1     		bne	.L36
 568:FreeRTOS/Source/event_groups.c **** 			{
ARM GAS  /tmp/ccKLeSvd.s 			page 27


 569:FreeRTOS/Source/event_groups.c **** 				/* All bits are set. */
 570:FreeRTOS/Source/event_groups.c **** 				xMatchFound = pdTRUE;
 684              		.loc 1 570 0
 685 0330 0123     		movs	r3, #1
 686 0332 7B62     		str	r3, [r7, #36]
 687              	.L36:
 571:FreeRTOS/Source/event_groups.c **** 			}
 572:FreeRTOS/Source/event_groups.c **** 			else
 573:FreeRTOS/Source/event_groups.c **** 			{
 574:FreeRTOS/Source/event_groups.c **** 				/* Need all bits to be set, but not all the bits were set. */
 575:FreeRTOS/Source/event_groups.c **** 			}
 576:FreeRTOS/Source/event_groups.c **** 
 577:FreeRTOS/Source/event_groups.c **** 			if( xMatchFound != pdFALSE )
 688              		.loc 1 577 0
 689 0334 7B6A     		ldr	r3, [r7, #36]
 690 0336 002B     		cmp	r3, #0
 691 0338 10D0     		beq	.L37
 578:FreeRTOS/Source/event_groups.c **** 			{
 579:FreeRTOS/Source/event_groups.c **** 				/* The bits match.  Should the bits be cleared on exit? */
 580:FreeRTOS/Source/event_groups.c **** 				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 692              		.loc 1 580 0
 693 033a FB68     		ldr	r3, [r7, #12]
 694 033c 03F08073 		and	r3, r3, #16777216
 695 0340 002B     		cmp	r3, #0
 696 0342 03D0     		beq	.L38
 581:FreeRTOS/Source/event_groups.c **** 				{
 582:FreeRTOS/Source/event_groups.c **** 					uxBitsToClear |= uxBitsWaitedFor;
 697              		.loc 1 582 0
 698 0344 BA6A     		ldr	r2, [r7, #40]
 699 0346 3B69     		ldr	r3, [r7, #16]
 700 0348 1343     		orrs	r3, r3, r2
 701 034a BB62     		str	r3, [r7, #40]
 702              	.L38:
 583:FreeRTOS/Source/event_groups.c **** 				}
 584:FreeRTOS/Source/event_groups.c **** 				else
 585:FreeRTOS/Source/event_groups.c **** 				{
 586:FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 587:FreeRTOS/Source/event_groups.c **** 				}
 588:FreeRTOS/Source/event_groups.c **** 
 589:FreeRTOS/Source/event_groups.c **** 				/* Store the actual event flag value in the task's event list
 590:FreeRTOS/Source/event_groups.c **** 				item before removing the task from the event list.  The
 591:FreeRTOS/Source/event_groups.c **** 				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
 592:FreeRTOS/Source/event_groups.c **** 				that is was unblocked due to its required bits matching, rather
 593:FreeRTOS/Source/event_groups.c **** 				than because it timed out. */
 594:FreeRTOS/Source/event_groups.c **** 				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO
 703              		.loc 1 594 0
 704 034c 3B6A     		ldr	r3, [r7, #32]
 705 034e 1B68     		ldr	r3, [r3]
 706 0350 43F00073 		orr	r3, r3, #33554432
 707 0354 1946     		mov	r1, r3
 708 0356 F86A     		ldr	r0, [r7, #44]
 709 0358 FFF7FEFF 		bl	vTaskRemoveFromUnorderedEventList
 710              	.L37:
 595:FreeRTOS/Source/event_groups.c **** 			}
 596:FreeRTOS/Source/event_groups.c **** 
 597:FreeRTOS/Source/event_groups.c **** 			/* Move onto the next list item.  Note pxListItem->pxNext is not
 598:FreeRTOS/Source/event_groups.c **** 			used here as the list item may have been removed from the event list
ARM GAS  /tmp/ccKLeSvd.s 			page 28


 599:FreeRTOS/Source/event_groups.c **** 			and inserted into the ready/pending reading list. */
 600:FreeRTOS/Source/event_groups.c **** 			pxListItem = pxNext;
 711              		.loc 1 600 0
 712 035c 7B69     		ldr	r3, [r7, #20]
 713 035e FB62     		str	r3, [r7, #44]
 714              	.L34:
 545:FreeRTOS/Source/event_groups.c **** 		{
 715              		.loc 1 545 0
 716 0360 FA6A     		ldr	r2, [r7, #44]
 717 0362 BB69     		ldr	r3, [r7, #24]
 718 0364 9A42     		cmp	r2, r3
 719 0366 BED1     		bne	.L39
 601:FreeRTOS/Source/event_groups.c **** 		}
 602:FreeRTOS/Source/event_groups.c **** 
 603:FreeRTOS/Source/event_groups.c **** 		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
 604:FreeRTOS/Source/event_groups.c **** 		bit was set in the control word. */
 605:FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
 720              		.loc 1 605 0
 721 0368 3B6A     		ldr	r3, [r7, #32]
 722 036a 1A68     		ldr	r2, [r3]
 723 036c BB6A     		ldr	r3, [r7, #40]
 724 036e DB43     		mvns	r3, r3
 725 0370 1A40     		ands	r2, r2, r3
 726 0372 3B6A     		ldr	r3, [r7, #32]
 727 0374 1A60     		str	r2, [r3]
 606:FreeRTOS/Source/event_groups.c **** 	}
 607:FreeRTOS/Source/event_groups.c **** 	( void ) xTaskResumeAll();
 728              		.loc 1 607 0
 729 0376 FFF7FEFF 		bl	xTaskResumeAll
 608:FreeRTOS/Source/event_groups.c **** 
 609:FreeRTOS/Source/event_groups.c **** 	return pxEventBits->uxEventBits;
 730              		.loc 1 609 0
 731 037a 3B6A     		ldr	r3, [r7, #32]
 732 037c 1B68     		ldr	r3, [r3]
 610:FreeRTOS/Source/event_groups.c **** }
 733              		.loc 1 610 0
 734 037e 1846     		mov	r0, r3
 735 0380 3037     		adds	r7, r7, #48
 736              		.cfi_def_cfa_offset 8
 737 0382 BD46     		mov	sp, r7
 738              		.cfi_def_cfa_register 13
 739              		@ sp needed
 740 0384 80BD     		pop	{r7, pc}
 741              		.cfi_endproc
 742              	.LFE10:
 743              		.size	xEventGroupSetBits, .-xEventGroupSetBits
 744              		.align	1
 745              		.global	vEventGroupDelete
 746              		.syntax unified
 747              		.thumb
 748              		.thumb_func
 749              		.fpu softvfp
 750              		.type	vEventGroupDelete, %function
 751              	vEventGroupDelete:
 752              	.LFB11:
 611:FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 612:FreeRTOS/Source/event_groups.c **** 
ARM GAS  /tmp/ccKLeSvd.s 			page 29


 613:FreeRTOS/Source/event_groups.c **** void vEventGroupDelete( EventGroupHandle_t xEventGroup )
 614:FreeRTOS/Source/event_groups.c **** {
 753              		.loc 1 614 0
 754              		.cfi_startproc
 755              		@ args = 0, pretend = 0, frame = 16
 756              		@ frame_needed = 1, uses_anonymous_args = 0
 757 0386 80B5     		push	{r7, lr}
 758              		.cfi_def_cfa_offset 8
 759              		.cfi_offset 7, -8
 760              		.cfi_offset 14, -4
 761 0388 84B0     		sub	sp, sp, #16
 762              		.cfi_def_cfa_offset 24
 763 038a 00AF     		add	r7, sp, #0
 764              		.cfi_def_cfa_register 7
 765 038c 7860     		str	r0, [r7, #4]
 615:FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 766              		.loc 1 615 0
 767 038e 7B68     		ldr	r3, [r7, #4]
 768 0390 FB60     		str	r3, [r7, #12]
 616:FreeRTOS/Source/event_groups.c **** const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 769              		.loc 1 616 0
 770 0392 FB68     		ldr	r3, [r7, #12]
 771 0394 0433     		adds	r3, r3, #4
 772 0396 BB60     		str	r3, [r7, #8]
 617:FreeRTOS/Source/event_groups.c **** 
 618:FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 773              		.loc 1 618 0
 774 0398 FFF7FEFF 		bl	vTaskSuspendAll
 619:FreeRTOS/Source/event_groups.c **** 	{
 620:FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_DELETE( xEventGroup );
 621:FreeRTOS/Source/event_groups.c **** 
 622:FreeRTOS/Source/event_groups.c **** 		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 775              		.loc 1 622 0
 776 039c 06E0     		b	.L42
 777              	.L43:
 623:FreeRTOS/Source/event_groups.c **** 		{
 624:FreeRTOS/Source/event_groups.c **** 			/* Unblock the task, returning 0 as the event list is being deleted
 625:FreeRTOS/Source/event_groups.c **** 			and cannot therefore have any bits set. */
 626:FreeRTOS/Source/event_groups.c **** 			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaiting
 627:FreeRTOS/Source/event_groups.c **** 			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO
 778              		.loc 1 627 0
 779 039e BB68     		ldr	r3, [r7, #8]
 780 03a0 DB68     		ldr	r3, [r3, #12]
 781 03a2 4FF00071 		mov	r1, #33554432
 782 03a6 1846     		mov	r0, r3
 783 03a8 FFF7FEFF 		bl	vTaskRemoveFromUnorderedEventList
 784              	.L42:
 622:FreeRTOS/Source/event_groups.c **** 		{
 785              		.loc 1 622 0
 786 03ac BB68     		ldr	r3, [r7, #8]
 787 03ae 1B68     		ldr	r3, [r3]
 788 03b0 002B     		cmp	r3, #0
 789 03b2 F4D1     		bne	.L43
 628:FreeRTOS/Source/event_groups.c **** 		}
 629:FreeRTOS/Source/event_groups.c **** 
 630:FreeRTOS/Source/event_groups.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
 631:FreeRTOS/Source/event_groups.c **** 		{
ARM GAS  /tmp/ccKLeSvd.s 			page 30


 632:FreeRTOS/Source/event_groups.c **** 			/* The event group can only have been allocated dynamically - free
 633:FreeRTOS/Source/event_groups.c **** 			it again. */
 634:FreeRTOS/Source/event_groups.c **** 			vPortFree( pxEventBits );
 790              		.loc 1 634 0
 791 03b4 F868     		ldr	r0, [r7, #12]
 792 03b6 FFF7FEFF 		bl	vPortFree
 635:FreeRTOS/Source/event_groups.c **** 		}
 636:FreeRTOS/Source/event_groups.c **** 		#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 637:FreeRTOS/Source/event_groups.c **** 		{
 638:FreeRTOS/Source/event_groups.c **** 			/* The event group could have been allocated statically or
 639:FreeRTOS/Source/event_groups.c **** 			dynamically, so check before attempting to free the memory. */
 640:FreeRTOS/Source/event_groups.c **** 			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 641:FreeRTOS/Source/event_groups.c **** 			{
 642:FreeRTOS/Source/event_groups.c **** 				vPortFree( pxEventBits );
 643:FreeRTOS/Source/event_groups.c **** 			}
 644:FreeRTOS/Source/event_groups.c **** 			else
 645:FreeRTOS/Source/event_groups.c **** 			{
 646:FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 647:FreeRTOS/Source/event_groups.c **** 			}
 648:FreeRTOS/Source/event_groups.c **** 		}
 649:FreeRTOS/Source/event_groups.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 650:FreeRTOS/Source/event_groups.c **** 	}
 651:FreeRTOS/Source/event_groups.c **** 	( void ) xTaskResumeAll();
 793              		.loc 1 651 0
 794 03ba FFF7FEFF 		bl	xTaskResumeAll
 652:FreeRTOS/Source/event_groups.c **** }
 795              		.loc 1 652 0
 796 03be 00BF     		nop
 797 03c0 1037     		adds	r7, r7, #16
 798              		.cfi_def_cfa_offset 8
 799 03c2 BD46     		mov	sp, r7
 800              		.cfi_def_cfa_register 13
 801              		@ sp needed
 802 03c4 80BD     		pop	{r7, pc}
 803              		.cfi_endproc
 804              	.LFE11:
 805              		.size	vEventGroupDelete, .-vEventGroupDelete
 806              		.align	1
 807              		.global	vEventGroupSetBitsCallback
 808              		.syntax unified
 809              		.thumb
 810              		.thumb_func
 811              		.fpu softvfp
 812              		.type	vEventGroupSetBitsCallback, %function
 813              	vEventGroupSetBitsCallback:
 814              	.LFB12:
 653:FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 654:FreeRTOS/Source/event_groups.c **** 
 655:FreeRTOS/Source/event_groups.c **** /* For internal use only - execute a 'set bits' command that was pended from
 656:FreeRTOS/Source/event_groups.c **** an interrupt. */
 657:FreeRTOS/Source/event_groups.c **** void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
 658:FreeRTOS/Source/event_groups.c **** {
 815              		.loc 1 658 0
 816              		.cfi_startproc
 817              		@ args = 0, pretend = 0, frame = 8
 818              		@ frame_needed = 1, uses_anonymous_args = 0
 819 03c6 80B5     		push	{r7, lr}
ARM GAS  /tmp/ccKLeSvd.s 			page 31


 820              		.cfi_def_cfa_offset 8
 821              		.cfi_offset 7, -8
 822              		.cfi_offset 14, -4
 823 03c8 82B0     		sub	sp, sp, #8
 824              		.cfi_def_cfa_offset 16
 825 03ca 00AF     		add	r7, sp, #0
 826              		.cfi_def_cfa_register 7
 827 03cc 7860     		str	r0, [r7, #4]
 828 03ce 3960     		str	r1, [r7]
 659:FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoi
 829              		.loc 1 659 0
 830 03d0 3968     		ldr	r1, [r7]
 831 03d2 7868     		ldr	r0, [r7, #4]
 832 03d4 FFF7FEFF 		bl	xEventGroupSetBits
 660:FreeRTOS/Source/event_groups.c **** }
 833              		.loc 1 660 0
 834 03d8 00BF     		nop
 835 03da 0837     		adds	r7, r7, #8
 836              		.cfi_def_cfa_offset 8
 837 03dc BD46     		mov	sp, r7
 838              		.cfi_def_cfa_register 13
 839              		@ sp needed
 840 03de 80BD     		pop	{r7, pc}
 841              		.cfi_endproc
 842              	.LFE12:
 843              		.size	vEventGroupSetBitsCallback, .-vEventGroupSetBitsCallback
 844              		.align	1
 845              		.global	vEventGroupClearBitsCallback
 846              		.syntax unified
 847              		.thumb
 848              		.thumb_func
 849              		.fpu softvfp
 850              		.type	vEventGroupClearBitsCallback, %function
 851              	vEventGroupClearBitsCallback:
 852              	.LFB13:
 661:FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 662:FreeRTOS/Source/event_groups.c **** 
 663:FreeRTOS/Source/event_groups.c **** /* For internal use only - execute a 'clear bits' command that was pended from
 664:FreeRTOS/Source/event_groups.c **** an interrupt. */
 665:FreeRTOS/Source/event_groups.c **** void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
 666:FreeRTOS/Source/event_groups.c **** {
 853              		.loc 1 666 0
 854              		.cfi_startproc
 855              		@ args = 0, pretend = 0, frame = 8
 856              		@ frame_needed = 1, uses_anonymous_args = 0
 857 03e0 80B5     		push	{r7, lr}
 858              		.cfi_def_cfa_offset 8
 859              		.cfi_offset 7, -8
 860              		.cfi_offset 14, -4
 861 03e2 82B0     		sub	sp, sp, #8
 862              		.cfi_def_cfa_offset 16
 863 03e4 00AF     		add	r7, sp, #0
 864              		.cfi_def_cfa_register 7
 865 03e6 7860     		str	r0, [r7, #4]
 866 03e8 3960     		str	r1, [r7]
 667:FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't 
 867              		.loc 1 667 0
ARM GAS  /tmp/ccKLeSvd.s 			page 32


 868 03ea 3968     		ldr	r1, [r7]
 869 03ec 7868     		ldr	r0, [r7, #4]
 870 03ee FFF7FEFF 		bl	xEventGroupClearBits
 668:FreeRTOS/Source/event_groups.c **** }
 871              		.loc 1 668 0
 872 03f2 00BF     		nop
 873 03f4 0837     		adds	r7, r7, #8
 874              		.cfi_def_cfa_offset 8
 875 03f6 BD46     		mov	sp, r7
 876              		.cfi_def_cfa_register 13
 877              		@ sp needed
 878 03f8 80BD     		pop	{r7, pc}
 879              		.cfi_endproc
 880              	.LFE13:
 881              		.size	vEventGroupClearBitsCallback, .-vEventGroupClearBitsCallback
 882              		.align	1
 883              		.syntax unified
 884              		.thumb
 885              		.thumb_func
 886              		.fpu softvfp
 887              		.type	prvTestWaitCondition, %function
 888              	prvTestWaitCondition:
 889              	.LFB14:
 669:FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 670:FreeRTOS/Source/event_groups.c **** 
 671:FreeRTOS/Source/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxB
 672:FreeRTOS/Source/event_groups.c **** {
 890              		.loc 1 672 0
 891              		.cfi_startproc
 892              		@ args = 0, pretend = 0, frame = 24
 893              		@ frame_needed = 1, uses_anonymous_args = 0
 894              		@ link register save eliminated.
 895 03fa 80B4     		push	{r7}
 896              		.cfi_def_cfa_offset 4
 897              		.cfi_offset 7, -4
 898 03fc 87B0     		sub	sp, sp, #28
 899              		.cfi_def_cfa_offset 32
 900 03fe 00AF     		add	r7, sp, #0
 901              		.cfi_def_cfa_register 7
 902 0400 F860     		str	r0, [r7, #12]
 903 0402 B960     		str	r1, [r7, #8]
 904 0404 7A60     		str	r2, [r7, #4]
 673:FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet = pdFALSE;
 905              		.loc 1 673 0
 906 0406 0023     		movs	r3, #0
 907 0408 7B61     		str	r3, [r7, #20]
 674:FreeRTOS/Source/event_groups.c **** 
 675:FreeRTOS/Source/event_groups.c **** 	if( xWaitForAllBits == pdFALSE )
 908              		.loc 1 675 0
 909 040a 7B68     		ldr	r3, [r7, #4]
 910 040c 002B     		cmp	r3, #0
 911 040e 07D1     		bne	.L47
 676:FreeRTOS/Source/event_groups.c **** 	{
 677:FreeRTOS/Source/event_groups.c **** 		/* Task only has to wait for one bit within uxBitsToWaitFor to be
 678:FreeRTOS/Source/event_groups.c **** 		set.  Is one already set? */
 679:FreeRTOS/Source/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 912              		.loc 1 679 0
ARM GAS  /tmp/ccKLeSvd.s 			page 33


 913 0410 FA68     		ldr	r2, [r7, #12]
 914 0412 BB68     		ldr	r3, [r7, #8]
 915 0414 1340     		ands	r3, r3, r2
 916 0416 002B     		cmp	r3, #0
 917 0418 0AD0     		beq	.L48
 680:FreeRTOS/Source/event_groups.c **** 		{
 681:FreeRTOS/Source/event_groups.c **** 			xWaitConditionMet = pdTRUE;
 918              		.loc 1 681 0
 919 041a 0123     		movs	r3, #1
 920 041c 7B61     		str	r3, [r7, #20]
 921 041e 07E0     		b	.L48
 922              	.L47:
 682:FreeRTOS/Source/event_groups.c **** 		}
 683:FreeRTOS/Source/event_groups.c **** 		else
 684:FreeRTOS/Source/event_groups.c **** 		{
 685:FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 686:FreeRTOS/Source/event_groups.c **** 		}
 687:FreeRTOS/Source/event_groups.c **** 	}
 688:FreeRTOS/Source/event_groups.c **** 	else
 689:FreeRTOS/Source/event_groups.c **** 	{
 690:FreeRTOS/Source/event_groups.c **** 		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
 691:FreeRTOS/Source/event_groups.c **** 		Are they set already? */
 692:FreeRTOS/Source/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 923              		.loc 1 692 0
 924 0420 FA68     		ldr	r2, [r7, #12]
 925 0422 BB68     		ldr	r3, [r7, #8]
 926 0424 1A40     		ands	r2, r2, r3
 927 0426 BB68     		ldr	r3, [r7, #8]
 928 0428 9A42     		cmp	r2, r3
 929 042a 01D1     		bne	.L48
 693:FreeRTOS/Source/event_groups.c **** 		{
 694:FreeRTOS/Source/event_groups.c **** 			xWaitConditionMet = pdTRUE;
 930              		.loc 1 694 0
 931 042c 0123     		movs	r3, #1
 932 042e 7B61     		str	r3, [r7, #20]
 933              	.L48:
 695:FreeRTOS/Source/event_groups.c **** 		}
 696:FreeRTOS/Source/event_groups.c **** 		else
 697:FreeRTOS/Source/event_groups.c **** 		{
 698:FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 699:FreeRTOS/Source/event_groups.c **** 		}
 700:FreeRTOS/Source/event_groups.c **** 	}
 701:FreeRTOS/Source/event_groups.c **** 
 702:FreeRTOS/Source/event_groups.c **** 	return xWaitConditionMet;
 934              		.loc 1 702 0
 935 0430 7B69     		ldr	r3, [r7, #20]
 703:FreeRTOS/Source/event_groups.c **** }
 936              		.loc 1 703 0
 937 0432 1846     		mov	r0, r3
 938 0434 1C37     		adds	r7, r7, #28
 939              		.cfi_def_cfa_offset 4
 940 0436 BD46     		mov	sp, r7
 941              		.cfi_def_cfa_register 13
 942              		@ sp needed
 943 0438 80BC     		pop	{r7}
 944              		.cfi_restore 7
 945              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccKLeSvd.s 			page 34


 946 043a 7047     		bx	lr
 947              		.cfi_endproc
 948              	.LFE14:
 949              		.size	prvTestWaitCondition, .-prvTestWaitCondition
 950              	.Letext0:
 951              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 952              		.file 4 "/usr/include/newlib/sys/lock.h"
 953              		.file 5 "/usr/include/newlib/sys/_types.h"
 954              		.file 6 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 955              		.file 7 "/usr/include/newlib/sys/reent.h"
 956              		.file 8 "/usr/include/newlib/sys/_stdint.h"
 957              		.file 9 "include/FreeRTOSConfig.h"
 958              		.file 10 "FreeRTOS/Source/include/list.h"
 959              		.file 11 "FreeRTOS/Source/include/event_groups.h"
 960              		.section	.debug_info,"",%progbits
 961              	.Ldebug_info0:
 962 0000 B60E0000 		.4byte	0xeb6
 963 0004 0400     		.2byte	0x4
 964 0006 00000000 		.4byte	.Ldebug_abbrev0
 965 000a 04       		.byte	0x4
 966 000b 01       		.uleb128 0x1
 967 000c 25000000 		.4byte	.LASF183
 968 0010 0C       		.byte	0xc
 969 0011 AA070000 		.4byte	.LASF184
 970 0015 39040000 		.4byte	.LASF185
 971 0019 00000000 		.4byte	.Ltext0
 972 001d 3C040000 		.4byte	.Letext0-.Ltext0
 973 0021 00000000 		.4byte	.Ldebug_line0
 974 0025 02       		.uleb128 0x2
 975 0026 04       		.byte	0x4
 976 0027 07       		.byte	0x7
 977 0028 B8000000 		.4byte	.LASF0
 978 002c 03       		.uleb128 0x3
 979 002d 04       		.byte	0x4
 980 002e 05       		.byte	0x5
 981 002f 696E7400 		.ascii	"int\000"
 982 0033 02       		.uleb128 0x2
 983 0034 01       		.byte	0x1
 984 0035 06       		.byte	0x6
 985 0036 FA070000 		.4byte	.LASF1
 986 003a 02       		.uleb128 0x2
 987 003b 01       		.byte	0x1
 988 003c 08       		.byte	0x8
 989 003d 47070000 		.4byte	.LASF2
 990 0041 02       		.uleb128 0x2
 991 0042 02       		.byte	0x2
 992 0043 05       		.byte	0x5
 993 0044 F8050000 		.4byte	.LASF3
 994 0048 02       		.uleb128 0x2
 995 0049 02       		.byte	0x2
 996 004a 07       		.byte	0x7
 997 004b 0D080000 		.4byte	.LASF4
 998 004f 02       		.uleb128 0x2
 999 0050 04       		.byte	0x4
 1000 0051 05       		.byte	0x5
 1001 0052 0D060000 		.4byte	.LASF5
 1002 0056 04       		.uleb128 0x4
ARM GAS  /tmp/ccKLeSvd.s 			page 35


 1003 0057 61070000 		.4byte	.LASF9
 1004 005b 03       		.byte	0x3
 1005 005c 41       		.byte	0x41
 1006 005d 61000000 		.4byte	0x61
 1007 0061 02       		.uleb128 0x2
 1008 0062 04       		.byte	0x4
 1009 0063 07       		.byte	0x7
 1010 0064 03070000 		.4byte	.LASF6
 1011 0068 02       		.uleb128 0x2
 1012 0069 08       		.byte	0x8
 1013 006a 05       		.byte	0x5
 1014 006b 6E040000 		.4byte	.LASF7
 1015 006f 02       		.uleb128 0x2
 1016 0070 08       		.byte	0x8
 1017 0071 07       		.byte	0x7
 1018 0072 1B020000 		.4byte	.LASF8
 1019 0076 04       		.uleb128 0x4
 1020 0077 FD000000 		.4byte	.LASF10
 1021 007b 04       		.byte	0x4
 1022 007c 07       		.byte	0x7
 1023 007d 2C000000 		.4byte	0x2c
 1024 0081 04       		.uleb128 0x4
 1025 0082 3B080000 		.4byte	.LASF11
 1026 0086 05       		.byte	0x5
 1027 0087 2C       		.byte	0x2c
 1028 0088 4F000000 		.4byte	0x4f
 1029 008c 04       		.uleb128 0x4
 1030 008d 45010000 		.4byte	.LASF12
 1031 0091 05       		.byte	0x5
 1032 0092 72       		.byte	0x72
 1033 0093 4F000000 		.4byte	0x4f
 1034 0097 05       		.uleb128 0x5
 1035 0098 2C070000 		.4byte	.LASF13
 1036 009c 06       		.byte	0x6
 1037 009d 6501     		.2byte	0x165
 1038 009f 25000000 		.4byte	0x25
 1039 00a3 06       		.uleb128 0x6
 1040 00a4 04       		.byte	0x4
 1041 00a5 05       		.byte	0x5
 1042 00a6 A6       		.byte	0xa6
 1043 00a7 C2000000 		.4byte	0xc2
 1044 00ab 07       		.uleb128 0x7
 1045 00ac ED030000 		.4byte	.LASF14
 1046 00b0 05       		.byte	0x5
 1047 00b1 A8       		.byte	0xa8
 1048 00b2 97000000 		.4byte	0x97
 1049 00b6 07       		.uleb128 0x7
 1050 00b7 62060000 		.4byte	.LASF15
 1051 00bb 05       		.byte	0x5
 1052 00bc A9       		.byte	0xa9
 1053 00bd C2000000 		.4byte	0xc2
 1054 00c1 00       		.byte	0
 1055 00c2 08       		.uleb128 0x8
 1056 00c3 3A000000 		.4byte	0x3a
 1057 00c7 D2000000 		.4byte	0xd2
 1058 00cb 09       		.uleb128 0x9
 1059 00cc D2000000 		.4byte	0xd2
ARM GAS  /tmp/ccKLeSvd.s 			page 36


 1060 00d0 03       		.byte	0x3
 1061 00d1 00       		.byte	0
 1062 00d2 02       		.uleb128 0x2
 1063 00d3 04       		.byte	0x4
 1064 00d4 07       		.byte	0x7
 1065 00d5 FA060000 		.4byte	.LASF16
 1066 00d9 0A       		.uleb128 0xa
 1067 00da 08       		.byte	0x8
 1068 00db 05       		.byte	0x5
 1069 00dc A3       		.byte	0xa3
 1070 00dd FA000000 		.4byte	0xfa
 1071 00e1 0B       		.uleb128 0xb
 1072 00e2 D3010000 		.4byte	.LASF17
 1073 00e6 05       		.byte	0x5
 1074 00e7 A5       		.byte	0xa5
 1075 00e8 2C000000 		.4byte	0x2c
 1076 00ec 00       		.byte	0
 1077 00ed 0B       		.uleb128 0xb
 1078 00ee 3F030000 		.4byte	.LASF18
 1079 00f2 05       		.byte	0x5
 1080 00f3 AA       		.byte	0xaa
 1081 00f4 A3000000 		.4byte	0xa3
 1082 00f8 04       		.byte	0x4
 1083 00f9 00       		.byte	0
 1084 00fa 04       		.uleb128 0x4
 1085 00fb 17050000 		.4byte	.LASF19
 1086 00ff 05       		.byte	0x5
 1087 0100 AB       		.byte	0xab
 1088 0101 D9000000 		.4byte	0xd9
 1089 0105 04       		.uleb128 0x4
 1090 0106 D5030000 		.4byte	.LASF20
 1091 010a 05       		.byte	0x5
 1092 010b AF       		.byte	0xaf
 1093 010c 76000000 		.4byte	0x76
 1094 0110 0C       		.uleb128 0xc
 1095 0111 04       		.byte	0x4
 1096 0112 0D       		.uleb128 0xd
 1097 0113 04       		.byte	0x4
 1098 0114 18010000 		.4byte	0x118
 1099 0118 02       		.uleb128 0x2
 1100 0119 01       		.byte	0x1
 1101 011a 08       		.byte	0x8
 1102 011b 77030000 		.4byte	.LASF21
 1103 011f 0E       		.uleb128 0xe
 1104 0120 18010000 		.4byte	0x118
 1105 0124 04       		.uleb128 0x4
 1106 0125 92040000 		.4byte	.LASF22
 1107 0129 07       		.byte	0x7
 1108 012a 16       		.byte	0x16
 1109 012b 61000000 		.4byte	0x61
 1110 012f 0F       		.uleb128 0xf
 1111 0130 76010000 		.4byte	.LASF27
 1112 0134 18       		.byte	0x18
 1113 0135 07       		.byte	0x7
 1114 0136 2D       		.byte	0x2d
 1115 0137 82010000 		.4byte	0x182
 1116 013b 0B       		.uleb128 0xb
ARM GAS  /tmp/ccKLeSvd.s 			page 37


 1117 013c 09030000 		.4byte	.LASF23
 1118 0140 07       		.byte	0x7
 1119 0141 2F       		.byte	0x2f
 1120 0142 82010000 		.4byte	0x182
 1121 0146 00       		.byte	0
 1122 0147 10       		.uleb128 0x10
 1123 0148 5F6B00   		.ascii	"_k\000"
 1124 014b 07       		.byte	0x7
 1125 014c 30       		.byte	0x30
 1126 014d 2C000000 		.4byte	0x2c
 1127 0151 04       		.byte	0x4
 1128 0152 0B       		.uleb128 0xb
 1129 0153 AA060000 		.4byte	.LASF24
 1130 0157 07       		.byte	0x7
 1131 0158 30       		.byte	0x30
 1132 0159 2C000000 		.4byte	0x2c
 1133 015d 08       		.byte	0x8
 1134 015e 0B       		.uleb128 0xb
 1135 015f 46060000 		.4byte	.LASF25
 1136 0163 07       		.byte	0x7
 1137 0164 30       		.byte	0x30
 1138 0165 2C000000 		.4byte	0x2c
 1139 0169 0C       		.byte	0xc
 1140 016a 0B       		.uleb128 0xb
 1141 016b 47020000 		.4byte	.LASF26
 1142 016f 07       		.byte	0x7
 1143 0170 30       		.byte	0x30
 1144 0171 2C000000 		.4byte	0x2c
 1145 0175 10       		.byte	0x10
 1146 0176 10       		.uleb128 0x10
 1147 0177 5F7800   		.ascii	"_x\000"
 1148 017a 07       		.byte	0x7
 1149 017b 31       		.byte	0x31
 1150 017c 88010000 		.4byte	0x188
 1151 0180 14       		.byte	0x14
 1152 0181 00       		.byte	0
 1153 0182 0D       		.uleb128 0xd
 1154 0183 04       		.byte	0x4
 1155 0184 2F010000 		.4byte	0x12f
 1156 0188 08       		.uleb128 0x8
 1157 0189 24010000 		.4byte	0x124
 1158 018d 98010000 		.4byte	0x198
 1159 0191 09       		.uleb128 0x9
 1160 0192 D2000000 		.4byte	0xd2
 1161 0196 00       		.byte	0
 1162 0197 00       		.byte	0
 1163 0198 0F       		.uleb128 0xf
 1164 0199 E3060000 		.4byte	.LASF28
 1165 019d 24       		.byte	0x24
 1166 019e 07       		.byte	0x7
 1167 019f 35       		.byte	0x35
 1168 01a0 11020000 		.4byte	0x211
 1169 01a4 0B       		.uleb128 0xb
 1170 01a5 92020000 		.4byte	.LASF29
 1171 01a9 07       		.byte	0x7
 1172 01aa 37       		.byte	0x37
 1173 01ab 2C000000 		.4byte	0x2c
ARM GAS  /tmp/ccKLeSvd.s 			page 38


 1174 01af 00       		.byte	0
 1175 01b0 0B       		.uleb128 0xb
 1176 01b1 DB010000 		.4byte	.LASF30
 1177 01b5 07       		.byte	0x7
 1178 01b6 38       		.byte	0x38
 1179 01b7 2C000000 		.4byte	0x2c
 1180 01bb 04       		.byte	0x4
 1181 01bc 0B       		.uleb128 0xb
 1182 01bd B0010000 		.4byte	.LASF31
 1183 01c1 07       		.byte	0x7
 1184 01c2 39       		.byte	0x39
 1185 01c3 2C000000 		.4byte	0x2c
 1186 01c7 08       		.byte	0x8
 1187 01c8 0B       		.uleb128 0xb
 1188 01c9 7C030000 		.4byte	.LASF32
 1189 01cd 07       		.byte	0x7
 1190 01ce 3A       		.byte	0x3a
 1191 01cf 2C000000 		.4byte	0x2c
 1192 01d3 0C       		.byte	0xc
 1193 01d4 0B       		.uleb128 0xb
 1194 01d5 A8050000 		.4byte	.LASF33
 1195 01d9 07       		.byte	0x7
 1196 01da 3B       		.byte	0x3b
 1197 01db 2C000000 		.4byte	0x2c
 1198 01df 10       		.byte	0x10
 1199 01e0 0B       		.uleb128 0xb
 1200 01e1 7C060000 		.4byte	.LASF34
 1201 01e5 07       		.byte	0x7
 1202 01e6 3C       		.byte	0x3c
 1203 01e7 2C000000 		.4byte	0x2c
 1204 01eb 14       		.byte	0x14
 1205 01ec 0B       		.uleb128 0xb
 1206 01ed 7E010000 		.4byte	.LASF35
 1207 01f1 07       		.byte	0x7
 1208 01f2 3D       		.byte	0x3d
 1209 01f3 2C000000 		.4byte	0x2c
 1210 01f7 18       		.byte	0x18
 1211 01f8 0B       		.uleb128 0xb
 1212 01f9 B7020000 		.4byte	.LASF36
 1213 01fd 07       		.byte	0x7
 1214 01fe 3E       		.byte	0x3e
 1215 01ff 2C000000 		.4byte	0x2c
 1216 0203 1C       		.byte	0x1c
 1217 0204 0B       		.uleb128 0xb
 1218 0205 2E050000 		.4byte	.LASF37
 1219 0209 07       		.byte	0x7
 1220 020a 3F       		.byte	0x3f
 1221 020b 2C000000 		.4byte	0x2c
 1222 020f 20       		.byte	0x20
 1223 0210 00       		.byte	0
 1224 0211 11       		.uleb128 0x11
 1225 0212 6C000000 		.4byte	.LASF38
 1226 0216 0801     		.2byte	0x108
 1227 0218 07       		.byte	0x7
 1228 0219 48       		.byte	0x48
 1229 021a 51020000 		.4byte	0x251
 1230 021e 0B       		.uleb128 0xb
ARM GAS  /tmp/ccKLeSvd.s 			page 39


 1231 021f F2070000 		.4byte	.LASF39
 1232 0223 07       		.byte	0x7
 1233 0224 49       		.byte	0x49
 1234 0225 51020000 		.4byte	0x251
 1235 0229 00       		.byte	0
 1236 022a 0B       		.uleb128 0xb
 1237 022b 33070000 		.4byte	.LASF40
 1238 022f 07       		.byte	0x7
 1239 0230 4A       		.byte	0x4a
 1240 0231 51020000 		.4byte	0x251
 1241 0235 80       		.byte	0x80
 1242 0236 12       		.uleb128 0x12
 1243 0237 20080000 		.4byte	.LASF41
 1244 023b 07       		.byte	0x7
 1245 023c 4C       		.byte	0x4c
 1246 023d 24010000 		.4byte	0x124
 1247 0241 0001     		.2byte	0x100
 1248 0243 12       		.uleb128 0x12
 1249 0244 6A080000 		.4byte	.LASF42
 1250 0248 07       		.byte	0x7
 1251 0249 4F       		.byte	0x4f
 1252 024a 24010000 		.4byte	0x124
 1253 024e 0401     		.2byte	0x104
 1254 0250 00       		.byte	0
 1255 0251 08       		.uleb128 0x8
 1256 0252 10010000 		.4byte	0x110
 1257 0256 61020000 		.4byte	0x261
 1258 025a 09       		.uleb128 0x9
 1259 025b D2000000 		.4byte	0xd2
 1260 025f 1F       		.byte	0x1f
 1261 0260 00       		.byte	0
 1262 0261 11       		.uleb128 0x11
 1263 0262 D4050000 		.4byte	.LASF43
 1264 0266 9001     		.2byte	0x190
 1265 0268 07       		.byte	0x7
 1266 0269 5B       		.byte	0x5b
 1267 026a 9F020000 		.4byte	0x29f
 1268 026e 0B       		.uleb128 0xb
 1269 026f 09030000 		.4byte	.LASF23
 1270 0273 07       		.byte	0x7
 1271 0274 5C       		.byte	0x5c
 1272 0275 9F020000 		.4byte	0x29f
 1273 0279 00       		.byte	0
 1274 027a 0B       		.uleb128 0xb
 1275 027b C6020000 		.4byte	.LASF44
 1276 027f 07       		.byte	0x7
 1277 0280 5D       		.byte	0x5d
 1278 0281 2C000000 		.4byte	0x2c
 1279 0285 04       		.byte	0x4
 1280 0286 0B       		.uleb128 0xb
 1281 0287 4D010000 		.4byte	.LASF45
 1282 028b 07       		.byte	0x7
 1283 028c 5F       		.byte	0x5f
 1284 028d A5020000 		.4byte	0x2a5
 1285 0291 08       		.byte	0x8
 1286 0292 0B       		.uleb128 0xb
 1287 0293 6C000000 		.4byte	.LASF38
ARM GAS  /tmp/ccKLeSvd.s 			page 40


 1288 0297 07       		.byte	0x7
 1289 0298 60       		.byte	0x60
 1290 0299 11020000 		.4byte	0x211
 1291 029d 88       		.byte	0x88
 1292 029e 00       		.byte	0
 1293 029f 0D       		.uleb128 0xd
 1294 02a0 04       		.byte	0x4
 1295 02a1 61020000 		.4byte	0x261
 1296 02a5 08       		.uleb128 0x8
 1297 02a6 B5020000 		.4byte	0x2b5
 1298 02aa B5020000 		.4byte	0x2b5
 1299 02ae 09       		.uleb128 0x9
 1300 02af D2000000 		.4byte	0xd2
 1301 02b3 1F       		.byte	0x1f
 1302 02b4 00       		.byte	0
 1303 02b5 0D       		.uleb128 0xd
 1304 02b6 04       		.byte	0x4
 1305 02b7 BB020000 		.4byte	0x2bb
 1306 02bb 13       		.uleb128 0x13
 1307 02bc 0F       		.uleb128 0xf
 1308 02bd A3070000 		.4byte	.LASF46
 1309 02c1 08       		.byte	0x8
 1310 02c2 07       		.byte	0x7
 1311 02c3 73       		.byte	0x73
 1312 02c4 E1020000 		.4byte	0x2e1
 1313 02c8 0B       		.uleb128 0xb
 1314 02c9 7C040000 		.4byte	.LASF47
 1315 02cd 07       		.byte	0x7
 1316 02ce 74       		.byte	0x74
 1317 02cf E1020000 		.4byte	0x2e1
 1318 02d3 00       		.byte	0
 1319 02d4 0B       		.uleb128 0xb
 1320 02d5 29080000 		.4byte	.LASF48
 1321 02d9 07       		.byte	0x7
 1322 02da 75       		.byte	0x75
 1323 02db 2C000000 		.4byte	0x2c
 1324 02df 04       		.byte	0x4
 1325 02e0 00       		.byte	0
 1326 02e1 0D       		.uleb128 0xd
 1327 02e2 04       		.byte	0x4
 1328 02e3 3A000000 		.4byte	0x3a
 1329 02e7 0F       		.uleb128 0xf
 1330 02e8 3F020000 		.4byte	.LASF49
 1331 02ec 68       		.byte	0x68
 1332 02ed 07       		.byte	0x7
 1333 02ee B3       		.byte	0xb3
 1334 02ef 11040000 		.4byte	0x411
 1335 02f3 10       		.uleb128 0x10
 1336 02f4 5F7000   		.ascii	"_p\000"
 1337 02f7 07       		.byte	0x7
 1338 02f8 B4       		.byte	0xb4
 1339 02f9 E1020000 		.4byte	0x2e1
 1340 02fd 00       		.byte	0
 1341 02fe 10       		.uleb128 0x10
 1342 02ff 5F7200   		.ascii	"_r\000"
 1343 0302 07       		.byte	0x7
 1344 0303 B5       		.byte	0xb5
ARM GAS  /tmp/ccKLeSvd.s 			page 41


 1345 0304 2C000000 		.4byte	0x2c
 1346 0308 04       		.byte	0x4
 1347 0309 10       		.uleb128 0x10
 1348 030a 5F7700   		.ascii	"_w\000"
 1349 030d 07       		.byte	0x7
 1350 030e B6       		.byte	0xb6
 1351 030f 2C000000 		.4byte	0x2c
 1352 0313 08       		.byte	0x8
 1353 0314 0B       		.uleb128 0xb
 1354 0315 E4000000 		.4byte	.LASF50
 1355 0319 07       		.byte	0x7
 1356 031a B7       		.byte	0xb7
 1357 031b 41000000 		.4byte	0x41
 1358 031f 0C       		.byte	0xc
 1359 0320 0B       		.uleb128 0xb
 1360 0321 00050000 		.4byte	.LASF51
 1361 0325 07       		.byte	0x7
 1362 0326 B8       		.byte	0xb8
 1363 0327 41000000 		.4byte	0x41
 1364 032b 0E       		.byte	0xe
 1365 032c 10       		.uleb128 0x10
 1366 032d 5F626600 		.ascii	"_bf\000"
 1367 0331 07       		.byte	0x7
 1368 0332 B9       		.byte	0xb9
 1369 0333 BC020000 		.4byte	0x2bc
 1370 0337 10       		.byte	0x10
 1371 0338 0B       		.uleb128 0xb
 1372 0339 DB000000 		.4byte	.LASF52
 1373 033d 07       		.byte	0x7
 1374 033e BA       		.byte	0xba
 1375 033f 2C000000 		.4byte	0x2c
 1376 0343 18       		.byte	0x18
 1377 0344 0B       		.uleb128 0xb
 1378 0345 52010000 		.4byte	.LASF53
 1379 0349 07       		.byte	0x7
 1380 034a C1       		.byte	0xc1
 1381 034b 10010000 		.4byte	0x110
 1382 034f 1C       		.byte	0x1c
 1383 0350 0B       		.uleb128 0xb
 1384 0351 0F010000 		.4byte	.LASF54
 1385 0355 07       		.byte	0x7
 1386 0356 C3       		.byte	0xc3
 1387 0357 6C050000 		.4byte	0x56c
 1388 035b 20       		.byte	0x20
 1389 035c 0B       		.uleb128 0xb
 1390 035d C1050000 		.4byte	.LASF55
 1391 0361 07       		.byte	0x7
 1392 0362 C5       		.byte	0xc5
 1393 0363 96050000 		.4byte	0x596
 1394 0367 24       		.byte	0x24
 1395 0368 0B       		.uleb128 0xb
 1396 0369 8A080000 		.4byte	.LASF56
 1397 036d 07       		.byte	0x7
 1398 036e C8       		.byte	0xc8
 1399 036f BA050000 		.4byte	0x5ba
 1400 0373 28       		.byte	0x28
 1401 0374 0B       		.uleb128 0xb
ARM GAS  /tmp/ccKLeSvd.s 			page 42


 1402 0375 09040000 		.4byte	.LASF57
 1403 0379 07       		.byte	0x7
 1404 037a C9       		.byte	0xc9
 1405 037b D4050000 		.4byte	0x5d4
 1406 037f 2C       		.byte	0x2c
 1407 0380 10       		.uleb128 0x10
 1408 0381 5F756200 		.ascii	"_ub\000"
 1409 0385 07       		.byte	0x7
 1410 0386 CC       		.byte	0xcc
 1411 0387 BC020000 		.4byte	0x2bc
 1412 038b 30       		.byte	0x30
 1413 038c 10       		.uleb128 0x10
 1414 038d 5F757000 		.ascii	"_up\000"
 1415 0391 07       		.byte	0x7
 1416 0392 CD       		.byte	0xcd
 1417 0393 E1020000 		.4byte	0x2e1
 1418 0397 38       		.byte	0x38
 1419 0398 10       		.uleb128 0x10
 1420 0399 5F757200 		.ascii	"_ur\000"
 1421 039d 07       		.byte	0x7
 1422 039e CE       		.byte	0xce
 1423 039f 2C000000 		.4byte	0x2c
 1424 03a3 3C       		.byte	0x3c
 1425 03a4 0B       		.uleb128 0xb
 1426 03a5 B4080000 		.4byte	.LASF58
 1427 03a9 07       		.byte	0x7
 1428 03aa D1       		.byte	0xd1
 1429 03ab DA050000 		.4byte	0x5da
 1430 03af 40       		.byte	0x40
 1431 03b0 0B       		.uleb128 0xb
 1432 03b1 4F080000 		.4byte	.LASF59
 1433 03b5 07       		.byte	0x7
 1434 03b6 D2       		.byte	0xd2
 1435 03b7 EA050000 		.4byte	0x5ea
 1436 03bb 43       		.byte	0x43
 1437 03bc 10       		.uleb128 0x10
 1438 03bd 5F6C6200 		.ascii	"_lb\000"
 1439 03c1 07       		.byte	0x7
 1440 03c2 D5       		.byte	0xd5
 1441 03c3 BC020000 		.4byte	0x2bc
 1442 03c7 44       		.byte	0x44
 1443 03c8 0B       		.uleb128 0xb
 1444 03c9 DA060000 		.4byte	.LASF60
 1445 03cd 07       		.byte	0x7
 1446 03ce D8       		.byte	0xd8
 1447 03cf 2C000000 		.4byte	0x2c
 1448 03d3 4C       		.byte	0x4c
 1449 03d4 0B       		.uleb128 0xb
 1450 03d5 5E020000 		.4byte	.LASF61
 1451 03d9 07       		.byte	0x7
 1452 03da D9       		.byte	0xd9
 1453 03db 81000000 		.4byte	0x81
 1454 03df 50       		.byte	0x50
 1455 03e0 0B       		.uleb128 0xb
 1456 03e1 5C060000 		.4byte	.LASF62
 1457 03e5 07       		.byte	0x7
 1458 03e6 DC       		.byte	0xdc
ARM GAS  /tmp/ccKLeSvd.s 			page 43


 1459 03e7 2F040000 		.4byte	0x42f
 1460 03eb 54       		.byte	0x54
 1461 03ec 0B       		.uleb128 0xb
 1462 03ed E8060000 		.4byte	.LASF63
 1463 03f1 07       		.byte	0x7
 1464 03f2 E0       		.byte	0xe0
 1465 03f3 05010000 		.4byte	0x105
 1466 03f7 58       		.byte	0x58
 1467 03f8 0B       		.uleb128 0xb
 1468 03f9 DC050000 		.4byte	.LASF64
 1469 03fd 07       		.byte	0x7
 1470 03fe E2       		.byte	0xe2
 1471 03ff FA000000 		.4byte	0xfa
 1472 0403 5C       		.byte	0x5c
 1473 0404 0B       		.uleb128 0xb
 1474 0405 62080000 		.4byte	.LASF65
 1475 0409 07       		.byte	0x7
 1476 040a E3       		.byte	0xe3
 1477 040b 2C000000 		.4byte	0x2c
 1478 040f 64       		.byte	0x64
 1479 0410 00       		.byte	0
 1480 0411 14       		.uleb128 0x14
 1481 0412 2C000000 		.4byte	0x2c
 1482 0416 2F040000 		.4byte	0x42f
 1483 041a 15       		.uleb128 0x15
 1484 041b 2F040000 		.4byte	0x42f
 1485 041f 15       		.uleb128 0x15
 1486 0420 10010000 		.4byte	0x110
 1487 0424 15       		.uleb128 0x15
 1488 0425 12010000 		.4byte	0x112
 1489 0429 15       		.uleb128 0x15
 1490 042a 2C000000 		.4byte	0x2c
 1491 042e 00       		.byte	0
 1492 042f 0D       		.uleb128 0xd
 1493 0430 04       		.byte	0x4
 1494 0431 3A040000 		.4byte	0x43a
 1495 0435 0E       		.uleb128 0xe
 1496 0436 2F040000 		.4byte	0x42f
 1497 043a 16       		.uleb128 0x16
 1498 043b 06080000 		.4byte	.LASF66
 1499 043f 2804     		.2byte	0x428
 1500 0441 07       		.byte	0x7
 1501 0442 3802     		.2byte	0x238
 1502 0444 6C050000 		.4byte	0x56c
 1503 0448 17       		.uleb128 0x17
 1504 0449 F6000000 		.4byte	.LASF67
 1505 044d 07       		.byte	0x7
 1506 044e 3A02     		.2byte	0x23a
 1507 0450 2C000000 		.4byte	0x2c
 1508 0454 00       		.byte	0
 1509 0455 17       		.uleb128 0x17
 1510 0456 BA010000 		.4byte	.LASF68
 1511 045a 07       		.byte	0x7
 1512 045b 3F02     		.2byte	0x23f
 1513 045d 41060000 		.4byte	0x641
 1514 0461 04       		.byte	0x4
 1515 0462 17       		.uleb128 0x17
ARM GAS  /tmp/ccKLeSvd.s 			page 44


 1516 0463 3D010000 		.4byte	.LASF69
 1517 0467 07       		.byte	0x7
 1518 0468 3F02     		.2byte	0x23f
 1519 046a 41060000 		.4byte	0x641
 1520 046e 08       		.byte	0x8
 1521 046f 17       		.uleb128 0x17
 1522 0470 A3080000 		.4byte	.LASF70
 1523 0474 07       		.byte	0x7
 1524 0475 3F02     		.2byte	0x23f
 1525 0477 41060000 		.4byte	0x641
 1526 047b 0C       		.byte	0xc
 1527 047c 17       		.uleb128 0x17
 1528 047d C1020000 		.4byte	.LASF71
 1529 0481 07       		.byte	0x7
 1530 0482 4102     		.2byte	0x241
 1531 0484 2C000000 		.4byte	0x2c
 1532 0488 10       		.byte	0x10
 1533 0489 17       		.uleb128 0x17
 1534 048a 66020000 		.4byte	.LASF72
 1535 048e 07       		.byte	0x7
 1536 048f 4202     		.2byte	0x242
 1537 0491 23080000 		.4byte	0x823
 1538 0495 14       		.byte	0x14
 1539 0496 17       		.uleb128 0x17
 1540 0497 BC060000 		.4byte	.LASF73
 1541 049b 07       		.byte	0x7
 1542 049c 4402     		.2byte	0x244
 1543 049e 2C000000 		.4byte	0x2c
 1544 04a2 30       		.byte	0x30
 1545 04a3 17       		.uleb128 0x17
 1546 04a4 4C060000 		.4byte	.LASF74
 1547 04a8 07       		.byte	0x7
 1548 04a9 4502     		.2byte	0x245
 1549 04ab 90050000 		.4byte	0x590
 1550 04af 34       		.byte	0x34
 1551 04b0 17       		.uleb128 0x17
 1552 04b1 10040000 		.4byte	.LASF75
 1553 04b5 07       		.byte	0x7
 1554 04b6 4702     		.2byte	0x247
 1555 04b8 2C000000 		.4byte	0x2c
 1556 04bc 38       		.byte	0x38
 1557 04bd 17       		.uleb128 0x17
 1558 04be 0D050000 		.4byte	.LASF76
 1559 04c2 07       		.byte	0x7
 1560 04c3 4902     		.2byte	0x249
 1561 04c5 3E080000 		.4byte	0x83e
 1562 04c9 3C       		.byte	0x3c
 1563 04ca 17       		.uleb128 0x17
 1564 04cb 88010000 		.4byte	.LASF77
 1565 04cf 07       		.byte	0x7
 1566 04d0 4C02     		.2byte	0x24c
 1567 04d2 82010000 		.4byte	0x182
 1568 04d6 40       		.byte	0x40
 1569 04d7 17       		.uleb128 0x17
 1570 04d8 11020000 		.4byte	.LASF78
 1571 04dc 07       		.byte	0x7
 1572 04dd 4D02     		.2byte	0x24d
ARM GAS  /tmp/ccKLeSvd.s 			page 45


 1573 04df 2C000000 		.4byte	0x2c
 1574 04e3 44       		.byte	0x44
 1575 04e4 17       		.uleb128 0x17
 1576 04e5 47030000 		.4byte	.LASF79
 1577 04e9 07       		.byte	0x7
 1578 04ea 4E02     		.2byte	0x24e
 1579 04ec 82010000 		.4byte	0x182
 1580 04f0 48       		.byte	0x48
 1581 04f1 17       		.uleb128 0x17
 1582 04f2 82040000 		.4byte	.LASF80
 1583 04f6 07       		.byte	0x7
 1584 04f7 4F02     		.2byte	0x24f
 1585 04f9 44080000 		.4byte	0x844
 1586 04fd 4C       		.byte	0x4c
 1587 04fe 17       		.uleb128 0x17
 1588 04ff A2060000 		.4byte	.LASF81
 1589 0503 07       		.byte	0x7
 1590 0504 5202     		.2byte	0x252
 1591 0506 2C000000 		.4byte	0x2c
 1592 050a 50       		.byte	0x50
 1593 050b 17       		.uleb128 0x17
 1594 050c 3F070000 		.4byte	.LASF82
 1595 0510 07       		.byte	0x7
 1596 0511 5302     		.2byte	0x253
 1597 0513 12010000 		.4byte	0x112
 1598 0517 54       		.byte	0x54
 1599 0518 17       		.uleb128 0x17
 1600 0519 9D060000 		.4byte	.LASF83
 1601 051d 07       		.byte	0x7
 1602 051e 7602     		.2byte	0x276
 1603 0520 01080000 		.4byte	0x801
 1604 0524 58       		.byte	0x58
 1605 0525 18       		.uleb128 0x18
 1606 0526 D4050000 		.4byte	.LASF43
 1607 052a 07       		.byte	0x7
 1608 052b 7A02     		.2byte	0x27a
 1609 052d 9F020000 		.4byte	0x29f
 1610 0531 4801     		.2byte	0x148
 1611 0533 18       		.uleb128 0x18
 1612 0534 AA030000 		.4byte	.LASF84
 1613 0538 07       		.byte	0x7
 1614 0539 7B02     		.2byte	0x27b
 1615 053b 61020000 		.4byte	0x261
 1616 053f 4C01     		.2byte	0x14c
 1617 0541 18       		.uleb128 0x18
 1618 0542 91030000 		.4byte	.LASF85
 1619 0546 07       		.byte	0x7
 1620 0547 7F02     		.2byte	0x27f
 1621 0549 55080000 		.4byte	0x855
 1622 054d DC02     		.2byte	0x2dc
 1623 054f 18       		.uleb128 0x18
 1624 0550 CF070000 		.4byte	.LASF86
 1625 0554 07       		.byte	0x7
 1626 0555 8402     		.2byte	0x284
 1627 0557 06060000 		.4byte	0x606
 1628 055b E002     		.2byte	0x2e0
 1629 055d 18       		.uleb128 0x18
ARM GAS  /tmp/ccKLeSvd.s 			page 46


 1630 055e 41060000 		.4byte	.LASF87
 1631 0562 07       		.byte	0x7
 1632 0563 8502     		.2byte	0x285
 1633 0565 61080000 		.4byte	0x861
 1634 0569 EC02     		.2byte	0x2ec
 1635 056b 00       		.byte	0
 1636 056c 0D       		.uleb128 0xd
 1637 056d 04       		.byte	0x4
 1638 056e 11040000 		.4byte	0x411
 1639 0572 14       		.uleb128 0x14
 1640 0573 2C000000 		.4byte	0x2c
 1641 0577 90050000 		.4byte	0x590
 1642 057b 15       		.uleb128 0x15
 1643 057c 2F040000 		.4byte	0x42f
 1644 0580 15       		.uleb128 0x15
 1645 0581 10010000 		.4byte	0x110
 1646 0585 15       		.uleb128 0x15
 1647 0586 90050000 		.4byte	0x590
 1648 058a 15       		.uleb128 0x15
 1649 058b 2C000000 		.4byte	0x2c
 1650 058f 00       		.byte	0
 1651 0590 0D       		.uleb128 0xd
 1652 0591 04       		.byte	0x4
 1653 0592 1F010000 		.4byte	0x11f
 1654 0596 0D       		.uleb128 0xd
 1655 0597 04       		.byte	0x4
 1656 0598 72050000 		.4byte	0x572
 1657 059c 14       		.uleb128 0x14
 1658 059d 8C000000 		.4byte	0x8c
 1659 05a1 BA050000 		.4byte	0x5ba
 1660 05a5 15       		.uleb128 0x15
 1661 05a6 2F040000 		.4byte	0x42f
 1662 05aa 15       		.uleb128 0x15
 1663 05ab 10010000 		.4byte	0x110
 1664 05af 15       		.uleb128 0x15
 1665 05b0 8C000000 		.4byte	0x8c
 1666 05b4 15       		.uleb128 0x15
 1667 05b5 2C000000 		.4byte	0x2c
 1668 05b9 00       		.byte	0
 1669 05ba 0D       		.uleb128 0xd
 1670 05bb 04       		.byte	0x4
 1671 05bc 9C050000 		.4byte	0x59c
 1672 05c0 14       		.uleb128 0x14
 1673 05c1 2C000000 		.4byte	0x2c
 1674 05c5 D4050000 		.4byte	0x5d4
 1675 05c9 15       		.uleb128 0x15
 1676 05ca 2F040000 		.4byte	0x42f
 1677 05ce 15       		.uleb128 0x15
 1678 05cf 10010000 		.4byte	0x110
 1679 05d3 00       		.byte	0
 1680 05d4 0D       		.uleb128 0xd
 1681 05d5 04       		.byte	0x4
 1682 05d6 C0050000 		.4byte	0x5c0
 1683 05da 08       		.uleb128 0x8
 1684 05db 3A000000 		.4byte	0x3a
 1685 05df EA050000 		.4byte	0x5ea
 1686 05e3 09       		.uleb128 0x9
ARM GAS  /tmp/ccKLeSvd.s 			page 47


 1687 05e4 D2000000 		.4byte	0xd2
 1688 05e8 02       		.byte	0x2
 1689 05e9 00       		.byte	0
 1690 05ea 08       		.uleb128 0x8
 1691 05eb 3A000000 		.4byte	0x3a
 1692 05ef FA050000 		.4byte	0x5fa
 1693 05f3 09       		.uleb128 0x9
 1694 05f4 D2000000 		.4byte	0xd2
 1695 05f8 00       		.byte	0
 1696 05f9 00       		.byte	0
 1697 05fa 05       		.uleb128 0x5
 1698 05fb 57020000 		.4byte	.LASF88
 1699 05ff 07       		.byte	0x7
 1700 0600 1D01     		.2byte	0x11d
 1701 0602 E7020000 		.4byte	0x2e7
 1702 0606 19       		.uleb128 0x19
 1703 0607 C9070000 		.4byte	.LASF89
 1704 060b 0C       		.byte	0xc
 1705 060c 07       		.byte	0x7
 1706 060d 2101     		.2byte	0x121
 1707 060f 3B060000 		.4byte	0x63b
 1708 0613 17       		.uleb128 0x17
 1709 0614 09030000 		.4byte	.LASF23
 1710 0618 07       		.byte	0x7
 1711 0619 2301     		.2byte	0x123
 1712 061b 3B060000 		.4byte	0x63b
 1713 061f 00       		.byte	0
 1714 0620 17       		.uleb128 0x17
 1715 0621 25070000 		.4byte	.LASF90
 1716 0625 07       		.byte	0x7
 1717 0626 2401     		.2byte	0x124
 1718 0628 2C000000 		.4byte	0x2c
 1719 062c 04       		.byte	0x4
 1720 062d 17       		.uleb128 0x17
 1721 062e F3030000 		.4byte	.LASF91
 1722 0632 07       		.byte	0x7
 1723 0633 2501     		.2byte	0x125
 1724 0635 41060000 		.4byte	0x641
 1725 0639 08       		.byte	0x8
 1726 063a 00       		.byte	0
 1727 063b 0D       		.uleb128 0xd
 1728 063c 04       		.byte	0x4
 1729 063d 06060000 		.4byte	0x606
 1730 0641 0D       		.uleb128 0xd
 1731 0642 04       		.byte	0x4
 1732 0643 FA050000 		.4byte	0x5fa
 1733 0647 19       		.uleb128 0x19
 1734 0648 F7010000 		.4byte	.LASF92
 1735 064c 0E       		.byte	0xe
 1736 064d 07       		.byte	0x7
 1737 064e 3D01     		.2byte	0x13d
 1738 0650 7C060000 		.4byte	0x67c
 1739 0654 17       		.uleb128 0x17
 1740 0655 79080000 		.4byte	.LASF93
 1741 0659 07       		.byte	0x7
 1742 065a 3E01     		.2byte	0x13e
 1743 065c 7C060000 		.4byte	0x67c
ARM GAS  /tmp/ccKLeSvd.s 			page 48


 1744 0660 00       		.byte	0
 1745 0661 17       		.uleb128 0x17
 1746 0662 8C040000 		.4byte	.LASF94
 1747 0666 07       		.byte	0x7
 1748 0667 3F01     		.2byte	0x13f
 1749 0669 7C060000 		.4byte	0x67c
 1750 066d 06       		.byte	0x6
 1751 066e 17       		.uleb128 0x17
 1752 066f 79070000 		.4byte	.LASF95
 1753 0673 07       		.byte	0x7
 1754 0674 4001     		.2byte	0x140
 1755 0676 48000000 		.4byte	0x48
 1756 067a 0C       		.byte	0xc
 1757 067b 00       		.byte	0
 1758 067c 08       		.uleb128 0x8
 1759 067d 48000000 		.4byte	0x48
 1760 0681 8C060000 		.4byte	0x68c
 1761 0685 09       		.uleb128 0x9
 1762 0686 D2000000 		.4byte	0xd2
 1763 068a 02       		.byte	0x2
 1764 068b 00       		.byte	0
 1765 068c 1A       		.uleb128 0x1a
 1766 068d D0       		.byte	0xd0
 1767 068e 07       		.byte	0x7
 1768 068f 5702     		.2byte	0x257
 1769 0691 8D070000 		.4byte	0x78d
 1770 0695 17       		.uleb128 0x17
 1771 0696 55080000 		.4byte	.LASF96
 1772 069a 07       		.byte	0x7
 1773 069b 5902     		.2byte	0x259
 1774 069d 25000000 		.4byte	0x25
 1775 06a1 00       		.byte	0
 1776 06a2 17       		.uleb128 0x17
 1777 06a3 D7070000 		.4byte	.LASF97
 1778 06a7 07       		.byte	0x7
 1779 06a8 5A02     		.2byte	0x25a
 1780 06aa 12010000 		.4byte	0x112
 1781 06ae 04       		.byte	0x4
 1782 06af 17       		.uleb128 0x17
 1783 06b0 32020000 		.4byte	.LASF98
 1784 06b4 07       		.byte	0x7
 1785 06b5 5B02     		.2byte	0x25b
 1786 06b7 8D070000 		.4byte	0x78d
 1787 06bb 08       		.byte	0x8
 1788 06bc 17       		.uleb128 0x17
 1789 06bd 86060000 		.4byte	.LASF99
 1790 06c1 07       		.byte	0x7
 1791 06c2 5C02     		.2byte	0x25c
 1792 06c4 98010000 		.4byte	0x198
 1793 06c8 24       		.byte	0x24
 1794 06c9 17       		.uleb128 0x17
 1795 06ca 5F040000 		.4byte	.LASF100
 1796 06ce 07       		.byte	0x7
 1797 06cf 5D02     		.2byte	0x25d
 1798 06d1 2C000000 		.4byte	0x2c
 1799 06d5 48       		.byte	0x48
 1800 06d6 17       		.uleb128 0x17
ARM GAS  /tmp/ccKLeSvd.s 			page 49


 1801 06d7 7F080000 		.4byte	.LASF101
 1802 06db 07       		.byte	0x7
 1803 06dc 5E02     		.2byte	0x25e
 1804 06de 6F000000 		.4byte	0x6f
 1805 06e2 50       		.byte	0x50
 1806 06e3 17       		.uleb128 0x17
 1807 06e4 9A000000 		.4byte	.LASF102
 1808 06e8 07       		.byte	0x7
 1809 06e9 5F02     		.2byte	0x25f
 1810 06eb 47060000 		.4byte	0x647
 1811 06ef 58       		.byte	0x58
 1812 06f0 17       		.uleb128 0x17
 1813 06f1 6A030000 		.4byte	.LASF103
 1814 06f5 07       		.byte	0x7
 1815 06f6 6002     		.2byte	0x260
 1816 06f8 FA000000 		.4byte	0xfa
 1817 06fc 68       		.byte	0x68
 1818 06fd 17       		.uleb128 0x17
 1819 06fe E4070000 		.4byte	.LASF104
 1820 0702 07       		.byte	0x7
 1821 0703 6102     		.2byte	0x261
 1822 0705 FA000000 		.4byte	0xfa
 1823 0709 70       		.byte	0x70
 1824 070a 17       		.uleb128 0x17
 1825 070b 8C000000 		.4byte	.LASF105
 1826 070f 07       		.byte	0x7
 1827 0710 6202     		.2byte	0x262
 1828 0712 FA000000 		.4byte	0xfa
 1829 0716 78       		.byte	0x78
 1830 0717 17       		.uleb128 0x17
 1831 0718 B2060000 		.4byte	.LASF106
 1832 071c 07       		.byte	0x7
 1833 071d 6302     		.2byte	0x263
 1834 071f 9D070000 		.4byte	0x79d
 1835 0723 80       		.byte	0x80
 1836 0724 17       		.uleb128 0x17
 1837 0725 AC000000 		.4byte	.LASF107
 1838 0729 07       		.byte	0x7
 1839 072a 6402     		.2byte	0x264
 1840 072c AD070000 		.4byte	0x7ad
 1841 0730 88       		.byte	0x88
 1842 0731 17       		.uleb128 0x17
 1843 0732 6C070000 		.4byte	.LASF108
 1844 0736 07       		.byte	0x7
 1845 0737 6502     		.2byte	0x265
 1846 0739 2C000000 		.4byte	0x2c
 1847 073d A0       		.byte	0xa0
 1848 073e 17       		.uleb128 0x17
 1849 073f 15010000 		.4byte	.LASF109
 1850 0743 07       		.byte	0x7
 1851 0744 6602     		.2byte	0x266
 1852 0746 FA000000 		.4byte	0xfa
 1853 074a A4       		.byte	0xa4
 1854 074b 17       		.uleb128 0x17
 1855 074c 9B030000 		.4byte	.LASF110
 1856 0750 07       		.byte	0x7
 1857 0751 6702     		.2byte	0x267
ARM GAS  /tmp/ccKLeSvd.s 			page 50


 1858 0753 FA000000 		.4byte	0xfa
 1859 0757 AC       		.byte	0xac
 1860 0758 17       		.uleb128 0x17
 1861 0759 0F030000 		.4byte	.LASF111
 1862 075d 07       		.byte	0x7
 1863 075e 6802     		.2byte	0x268
 1864 0760 FA000000 		.4byte	0xfa
 1865 0764 B4       		.byte	0xb4
 1866 0765 17       		.uleb128 0x17
 1867 0766 C9040000 		.4byte	.LASF112
 1868 076a 07       		.byte	0x7
 1869 076b 6902     		.2byte	0x269
 1870 076d FA000000 		.4byte	0xfa
 1871 0771 BC       		.byte	0xbc
 1872 0772 17       		.uleb128 0x17
 1873 0773 59030000 		.4byte	.LASF113
 1874 0777 07       		.byte	0x7
 1875 0778 6A02     		.2byte	0x26a
 1876 077a FA000000 		.4byte	0xfa
 1877 077e C4       		.byte	0xc4
 1878 077f 17       		.uleb128 0x17
 1879 0780 56050000 		.4byte	.LASF114
 1880 0784 07       		.byte	0x7
 1881 0785 6B02     		.2byte	0x26b
 1882 0787 2C000000 		.4byte	0x2c
 1883 078b CC       		.byte	0xcc
 1884 078c 00       		.byte	0
 1885 078d 08       		.uleb128 0x8
 1886 078e 18010000 		.4byte	0x118
 1887 0792 9D070000 		.4byte	0x79d
 1888 0796 09       		.uleb128 0x9
 1889 0797 D2000000 		.4byte	0xd2
 1890 079b 19       		.byte	0x19
 1891 079c 00       		.byte	0
 1892 079d 08       		.uleb128 0x8
 1893 079e 18010000 		.4byte	0x118
 1894 07a2 AD070000 		.4byte	0x7ad
 1895 07a6 09       		.uleb128 0x9
 1896 07a7 D2000000 		.4byte	0xd2
 1897 07ab 07       		.byte	0x7
 1898 07ac 00       		.byte	0
 1899 07ad 08       		.uleb128 0x8
 1900 07ae 18010000 		.4byte	0x118
 1901 07b2 BD070000 		.4byte	0x7bd
 1902 07b6 09       		.uleb128 0x9
 1903 07b7 D2000000 		.4byte	0xd2
 1904 07bb 17       		.byte	0x17
 1905 07bc 00       		.byte	0
 1906 07bd 1A       		.uleb128 0x1a
 1907 07be F0       		.byte	0xf0
 1908 07bf 07       		.byte	0x7
 1909 07c0 7002     		.2byte	0x270
 1910 07c2 E1070000 		.4byte	0x7e1
 1911 07c6 17       		.uleb128 0x17
 1912 07c7 F0010000 		.4byte	.LASF115
 1913 07cb 07       		.byte	0x7
 1914 07cc 7302     		.2byte	0x273
ARM GAS  /tmp/ccKLeSvd.s 			page 51


 1915 07ce E1070000 		.4byte	0x7e1
 1916 07d2 00       		.byte	0
 1917 07d3 17       		.uleb128 0x17
 1918 07d4 AB080000 		.4byte	.LASF116
 1919 07d8 07       		.byte	0x7
 1920 07d9 7402     		.2byte	0x274
 1921 07db F1070000 		.4byte	0x7f1
 1922 07df 78       		.byte	0x78
 1923 07e0 00       		.byte	0
 1924 07e1 08       		.uleb128 0x8
 1925 07e2 E1020000 		.4byte	0x2e1
 1926 07e6 F1070000 		.4byte	0x7f1
 1927 07ea 09       		.uleb128 0x9
 1928 07eb D2000000 		.4byte	0xd2
 1929 07ef 1D       		.byte	0x1d
 1930 07f0 00       		.byte	0
 1931 07f1 08       		.uleb128 0x8
 1932 07f2 25000000 		.4byte	0x25
 1933 07f6 01080000 		.4byte	0x801
 1934 07fa 09       		.uleb128 0x9
 1935 07fb D2000000 		.4byte	0xd2
 1936 07ff 1D       		.byte	0x1d
 1937 0800 00       		.byte	0
 1938 0801 1B       		.uleb128 0x1b
 1939 0802 F0       		.byte	0xf0
 1940 0803 07       		.byte	0x7
 1941 0804 5502     		.2byte	0x255
 1942 0806 23080000 		.4byte	0x823
 1943 080a 1C       		.uleb128 0x1c
 1944 080b 06080000 		.4byte	.LASF66
 1945 080f 07       		.byte	0x7
 1946 0810 6C02     		.2byte	0x26c
 1947 0812 8C060000 		.4byte	0x68c
 1948 0816 1C       		.uleb128 0x1c
 1949 0817 95060000 		.4byte	.LASF117
 1950 081b 07       		.byte	0x7
 1951 081c 7502     		.2byte	0x275
 1952 081e BD070000 		.4byte	0x7bd
 1953 0822 00       		.byte	0
 1954 0823 08       		.uleb128 0x8
 1955 0824 18010000 		.4byte	0x118
 1956 0828 33080000 		.4byte	0x833
 1957 082c 09       		.uleb128 0x9
 1958 082d D2000000 		.4byte	0xd2
 1959 0831 18       		.byte	0x18
 1960 0832 00       		.byte	0
 1961 0833 1D       		.uleb128 0x1d
 1962 0834 3E080000 		.4byte	0x83e
 1963 0838 15       		.uleb128 0x15
 1964 0839 2F040000 		.4byte	0x42f
 1965 083d 00       		.byte	0
 1966 083e 0D       		.uleb128 0xd
 1967 083f 04       		.byte	0x4
 1968 0840 33080000 		.4byte	0x833
 1969 0844 0D       		.uleb128 0xd
 1970 0845 04       		.byte	0x4
 1971 0846 82010000 		.4byte	0x182
ARM GAS  /tmp/ccKLeSvd.s 			page 52


 1972 084a 1D       		.uleb128 0x1d
 1973 084b 55080000 		.4byte	0x855
 1974 084f 15       		.uleb128 0x15
 1975 0850 2C000000 		.4byte	0x2c
 1976 0854 00       		.byte	0
 1977 0855 0D       		.uleb128 0xd
 1978 0856 04       		.byte	0x4
 1979 0857 5B080000 		.4byte	0x85b
 1980 085b 0D       		.uleb128 0xd
 1981 085c 04       		.byte	0x4
 1982 085d 4A080000 		.4byte	0x84a
 1983 0861 08       		.uleb128 0x8
 1984 0862 FA050000 		.4byte	0x5fa
 1985 0866 71080000 		.4byte	0x871
 1986 086a 09       		.uleb128 0x9
 1987 086b D2000000 		.4byte	0xd2
 1988 086f 02       		.byte	0x2
 1989 0870 00       		.byte	0
 1990 0871 1E       		.uleb128 0x1e
 1991 0872 E4010000 		.4byte	.LASF118
 1992 0876 07       		.byte	0x7
 1993 0877 FD02     		.2byte	0x2fd
 1994 0879 2F040000 		.4byte	0x42f
 1995 087d 1E       		.uleb128 0x1e
 1996 087e 69060000 		.4byte	.LASF119
 1997 0882 07       		.byte	0x7
 1998 0883 FE02     		.2byte	0x2fe
 1999 0885 35040000 		.4byte	0x435
 2000 0889 04       		.uleb128 0x4
 2001 088a A7010000 		.4byte	.LASF120
 2002 088e 08       		.byte	0x8
 2003 088f 30       		.byte	0x30
 2004 0890 56000000 		.4byte	0x56
 2005 0894 0E       		.uleb128 0xe
 2006 0895 89080000 		.4byte	0x889
 2007 0899 1F       		.uleb128 0x1f
 2008 089a B1050000 		.4byte	.LASF121
 2009 089e 09       		.byte	0x9
 2010 089f 2B       		.byte	0x2b
 2011 08a0 89080000 		.4byte	0x889
 2012 08a4 04       		.uleb128 0x4
 2013 08a5 D8040000 		.4byte	.LASF122
 2014 08a9 02       		.byte	0x2
 2015 08aa 38       		.byte	0x38
 2016 08ab 4F000000 		.4byte	0x4f
 2017 08af 0E       		.uleb128 0xe
 2018 08b0 A4080000 		.4byte	0x8a4
 2019 08b4 04       		.uleb128 0x4
 2020 08b5 C0030000 		.4byte	.LASF123
 2021 08b9 02       		.byte	0x2
 2022 08ba 39       		.byte	0x39
 2023 08bb 61000000 		.4byte	0x61
 2024 08bf 20       		.uleb128 0x20
 2025 08c0 B4080000 		.4byte	0x8b4
 2026 08c4 04       		.uleb128 0x4
 2027 08c5 78050000 		.4byte	.LASF124
 2028 08c9 02       		.byte	0x2
ARM GAS  /tmp/ccKLeSvd.s 			page 53


 2029 08ca 3F       		.byte	0x3f
 2030 08cb 89080000 		.4byte	0x889
 2031 08cf 0F       		.uleb128 0xf
 2032 08d0 EB000000 		.4byte	.LASF125
 2033 08d4 14       		.byte	0x14
 2034 08d5 0A       		.byte	0xa
 2035 08d6 8C       		.byte	0x8c
 2036 08d7 18090000 		.4byte	0x918
 2037 08db 0B       		.uleb128 0xb
 2038 08dc 02060000 		.4byte	.LASF126
 2039 08e0 0A       		.byte	0xa
 2040 08e1 8F       		.byte	0x8f
 2041 08e2 C4080000 		.4byte	0x8c4
 2042 08e6 00       		.byte	0
 2043 08e7 0B       		.uleb128 0xb
 2044 08e8 06050000 		.4byte	.LASF127
 2045 08ec 0A       		.byte	0xa
 2046 08ed 90       		.byte	0x90
 2047 08ee 18090000 		.4byte	0x918
 2048 08f2 04       		.byte	0x4
 2049 08f3 0B       		.uleb128 0xb
 2050 08f4 4C020000 		.4byte	.LASF128
 2051 08f8 0A       		.byte	0xa
 2052 08f9 91       		.byte	0x91
 2053 08fa 18090000 		.4byte	0x918
 2054 08fe 08       		.byte	0x8
 2055 08ff 0B       		.uleb128 0xb
 2056 0900 8B070000 		.4byte	.LASF129
 2057 0904 0A       		.byte	0xa
 2058 0905 92       		.byte	0x92
 2059 0906 10010000 		.4byte	0x110
 2060 090a 0C       		.byte	0xc
 2061 090b 0B       		.uleb128 0xb
 2062 090c C8050000 		.4byte	.LASF130
 2063 0910 0A       		.byte	0xa
 2064 0911 93       		.byte	0x93
 2065 0912 4F090000 		.4byte	0x94f
 2066 0916 10       		.byte	0x10
 2067 0917 00       		.byte	0
 2068 0918 0D       		.uleb128 0xd
 2069 0919 04       		.byte	0x4
 2070 091a CF080000 		.4byte	0x8cf
 2071 091e 0F       		.uleb128 0xf
 2072 091f E5020000 		.4byte	.LASF131
 2073 0923 14       		.byte	0x14
 2074 0924 0A       		.byte	0xa
 2075 0925 A4       		.byte	0xa4
 2076 0926 4F090000 		.4byte	0x94f
 2077 092a 0B       		.uleb128 0xb
 2078 092b 15000000 		.4byte	.LASF132
 2079 092f 0A       		.byte	0xa
 2080 0930 A7       		.byte	0xa7
 2081 0931 BF080000 		.4byte	0x8bf
 2082 0935 00       		.byte	0
 2083 0936 0B       		.uleb128 0xb
 2084 0937 C5000000 		.4byte	.LASF133
 2085 093b 0A       		.byte	0xa
ARM GAS  /tmp/ccKLeSvd.s 			page 54


 2086 093c A8       		.byte	0xa8
 2087 093d A1090000 		.4byte	0x9a1
 2088 0941 04       		.byte	0x4
 2089 0942 0B       		.uleb128 0xb
 2090 0943 CC030000 		.4byte	.LASF134
 2091 0947 0A       		.byte	0xa
 2092 0948 A9       		.byte	0xa9
 2093 0949 96090000 		.4byte	0x996
 2094 094d 08       		.byte	0x8
 2095 094e 00       		.byte	0
 2096 094f 0D       		.uleb128 0xd
 2097 0950 04       		.byte	0x4
 2098 0951 1E090000 		.4byte	0x91e
 2099 0955 04       		.uleb128 0x4
 2100 0956 86030000 		.4byte	.LASF135
 2101 095a 0A       		.byte	0xa
 2102 095b 96       		.byte	0x96
 2103 095c CF080000 		.4byte	0x8cf
 2104 0960 0E       		.uleb128 0xe
 2105 0961 55090000 		.4byte	0x955
 2106 0965 0F       		.uleb128 0xf
 2107 0966 F9020000 		.4byte	.LASF136
 2108 096a 0C       		.byte	0xc
 2109 096b 0A       		.byte	0xa
 2110 096c 98       		.byte	0x98
 2111 096d 96090000 		.4byte	0x996
 2112 0971 0B       		.uleb128 0xb
 2113 0972 02060000 		.4byte	.LASF126
 2114 0976 0A       		.byte	0xa
 2115 0977 9B       		.byte	0x9b
 2116 0978 C4080000 		.4byte	0x8c4
 2117 097c 00       		.byte	0
 2118 097d 0B       		.uleb128 0xb
 2119 097e 06050000 		.4byte	.LASF127
 2120 0982 0A       		.byte	0xa
 2121 0983 9C       		.byte	0x9c
 2122 0984 18090000 		.4byte	0x918
 2123 0988 04       		.byte	0x4
 2124 0989 0B       		.uleb128 0xb
 2125 098a 4C020000 		.4byte	.LASF128
 2126 098e 0A       		.byte	0xa
 2127 098f 9D       		.byte	0x9d
 2128 0990 18090000 		.4byte	0x918
 2129 0994 08       		.byte	0x8
 2130 0995 00       		.byte	0
 2131 0996 04       		.uleb128 0x4
 2132 0997 DE030000 		.4byte	.LASF137
 2133 099b 0A       		.byte	0xa
 2134 099c 9F       		.byte	0x9f
 2135 099d 65090000 		.4byte	0x965
 2136 09a1 0D       		.uleb128 0xd
 2137 09a2 04       		.byte	0x4
 2138 09a3 55090000 		.4byte	0x955
 2139 09a7 04       		.uleb128 0x4
 2140 09a8 71050000 		.4byte	.LASF138
 2141 09ac 0A       		.byte	0xa
 2142 09ad AB       		.byte	0xab
ARM GAS  /tmp/ccKLeSvd.s 			page 55


 2143 09ae 1E090000 		.4byte	0x91e
 2144 09b2 0E       		.uleb128 0xe
 2145 09b3 A7090000 		.4byte	0x9a7
 2146 09b7 04       		.uleb128 0x4
 2147 09b8 90080000 		.4byte	.LASF139
 2148 09bc 0B       		.byte	0xb
 2149 09bd 52       		.byte	0x52
 2150 09be C2090000 		.4byte	0x9c2
 2151 09c2 0D       		.uleb128 0xd
 2152 09c3 04       		.byte	0x4
 2153 09c4 C8090000 		.4byte	0x9c8
 2154 09c8 0F       		.uleb128 0xf
 2155 09c9 F9030000 		.4byte	.LASF140
 2156 09cd 18       		.byte	0x18
 2157 09ce 01       		.byte	0x1
 2158 09cf 3F       		.byte	0x3f
 2159 09d0 ED090000 		.4byte	0x9ed
 2160 09d4 0B       		.uleb128 0xb
 2161 09d5 22050000 		.4byte	.LASF141
 2162 09d9 01       		.byte	0x1
 2163 09da 41       		.byte	0x41
 2164 09db ED090000 		.4byte	0x9ed
 2165 09df 00       		.byte	0
 2166 09e0 0B       		.uleb128 0xb
 2167 09e1 00000000 		.4byte	.LASF142
 2168 09e5 01       		.byte	0x1
 2169 09e6 42       		.byte	0x42
 2170 09e7 A7090000 		.4byte	0x9a7
 2171 09eb 04       		.byte	0x4
 2172 09ec 00       		.byte	0
 2173 09ed 04       		.uleb128 0x4
 2174 09ee CE060000 		.4byte	.LASF143
 2175 09f2 0B       		.byte	0xb
 2176 09f3 5C       		.byte	0x5c
 2177 09f4 C4080000 		.4byte	0x8c4
 2178 09f8 0E       		.uleb128 0xe
 2179 09f9 ED090000 		.4byte	0x9ed
 2180 09fd 04       		.uleb128 0x4
 2181 09fe 9F000000 		.4byte	.LASF144
 2182 0a02 01       		.byte	0x1
 2183 0a03 4B       		.byte	0x4b
 2184 0a04 C8090000 		.4byte	0x9c8
 2185 0a08 0E       		.uleb128 0xe
 2186 0a09 FD090000 		.4byte	0x9fd
 2187 0a0d 21       		.uleb128 0x21
 2188 0a0e 93050000 		.4byte	.LASF186
 2189 0a12 01       		.byte	0x1
 2190 0a13 9F02     		.2byte	0x29f
 2191 0a15 A4080000 		.4byte	0x8a4
 2192 0a19 FA030000 		.4byte	.LFB14
 2193 0a1d 42000000 		.4byte	.LFE14-.LFB14
 2194 0a21 01       		.uleb128 0x1
 2195 0a22 9C       		.byte	0x9c
 2196 0a23 640A0000 		.4byte	0xa64
 2197 0a27 22       		.uleb128 0x22
 2198 0a28 E5050000 		.4byte	.LASF145
 2199 0a2c 01       		.byte	0x1
ARM GAS  /tmp/ccKLeSvd.s 			page 56


 2200 0a2d 9F02     		.2byte	0x29f
 2201 0a2f F8090000 		.4byte	0x9f8
 2202 0a33 02       		.uleb128 0x2
 2203 0a34 91       		.byte	0x91
 2204 0a35 6C       		.sleb128 -20
 2205 0a36 22       		.uleb128 0x22
 2206 0a37 15070000 		.4byte	.LASF146
 2207 0a3b 01       		.byte	0x1
 2208 0a3c 9F02     		.2byte	0x29f
 2209 0a3e F8090000 		.4byte	0x9f8
 2210 0a42 02       		.uleb128 0x2
 2211 0a43 91       		.byte	0x91
 2212 0a44 68       		.sleb128 -24
 2213 0a45 22       		.uleb128 0x22
 2214 0a46 A7020000 		.4byte	.LASF147
 2215 0a4a 01       		.byte	0x1
 2216 0a4b 9F02     		.2byte	0x29f
 2217 0a4d AF080000 		.4byte	0x8af
 2218 0a51 02       		.uleb128 0x2
 2219 0a52 91       		.byte	0x91
 2220 0a53 64       		.sleb128 -28
 2221 0a54 23       		.uleb128 0x23
 2222 0a55 5F050000 		.4byte	.LASF155
 2223 0a59 01       		.byte	0x1
 2224 0a5a A102     		.2byte	0x2a1
 2225 0a5c A4080000 		.4byte	0x8a4
 2226 0a60 02       		.uleb128 0x2
 2227 0a61 91       		.byte	0x91
 2228 0a62 74       		.sleb128 -12
 2229 0a63 00       		.byte	0
 2230 0a64 24       		.uleb128 0x24
 2231 0a65 E3040000 		.4byte	.LASF150
 2232 0a69 01       		.byte	0x1
 2233 0a6a 9902     		.2byte	0x299
 2234 0a6c E0030000 		.4byte	.LFB13
 2235 0a70 1A000000 		.4byte	.LFE13-.LFB13
 2236 0a74 01       		.uleb128 0x1
 2237 0a75 9C       		.byte	0x9c
 2238 0a76 990A0000 		.4byte	0xa99
 2239 0a7a 22       		.uleb128 0x22
 2240 0a7b 4C030000 		.4byte	.LASF148
 2241 0a7f 01       		.byte	0x1
 2242 0a80 9902     		.2byte	0x299
 2243 0a82 10010000 		.4byte	0x110
 2244 0a86 02       		.uleb128 0x2
 2245 0a87 91       		.byte	0x91
 2246 0a88 74       		.sleb128 -12
 2247 0a89 22       		.uleb128 0x22
 2248 0a8a CD000000 		.4byte	.LASF149
 2249 0a8e 01       		.byte	0x1
 2250 0a8f 9902     		.2byte	0x299
 2251 0a91 94080000 		.4byte	0x894
 2252 0a95 02       		.uleb128 0x2
 2253 0a96 91       		.byte	0x91
 2254 0a97 70       		.sleb128 -16
 2255 0a98 00       		.byte	0
 2256 0a99 24       		.uleb128 0x24
ARM GAS  /tmp/ccKLeSvd.s 			page 57


 2257 0a9a AE040000 		.4byte	.LASF151
 2258 0a9e 01       		.byte	0x1
 2259 0a9f 9102     		.2byte	0x291
 2260 0aa1 C6030000 		.4byte	.LFB12
 2261 0aa5 1A000000 		.4byte	.LFE12-.LFB12
 2262 0aa9 01       		.uleb128 0x1
 2263 0aaa 9C       		.byte	0x9c
 2264 0aab CE0A0000 		.4byte	0xace
 2265 0aaf 22       		.uleb128 0x22
 2266 0ab0 4C030000 		.4byte	.LASF148
 2267 0ab4 01       		.byte	0x1
 2268 0ab5 9102     		.2byte	0x291
 2269 0ab7 10010000 		.4byte	0x110
 2270 0abb 02       		.uleb128 0x2
 2271 0abc 91       		.byte	0x91
 2272 0abd 74       		.sleb128 -12
 2273 0abe 22       		.uleb128 0x22
 2274 0abf 2F080000 		.4byte	.LASF152
 2275 0ac3 01       		.byte	0x1
 2276 0ac4 9102     		.2byte	0x291
 2277 0ac6 94080000 		.4byte	0x894
 2278 0aca 02       		.uleb128 0x2
 2279 0acb 91       		.byte	0x91
 2280 0acc 70       		.sleb128 -16
 2281 0acd 00       		.byte	0
 2282 0ace 24       		.uleb128 0x24
 2283 0acf 7A000000 		.4byte	.LASF153
 2284 0ad3 01       		.byte	0x1
 2285 0ad4 6502     		.2byte	0x265
 2286 0ad6 86030000 		.4byte	.LFB11
 2287 0ada 40000000 		.4byte	.LFE11-.LFB11
 2288 0ade 01       		.uleb128 0x1
 2289 0adf 9C       		.byte	0x9c
 2290 0ae0 120B0000 		.4byte	0xb12
 2291 0ae4 22       		.uleb128 0x22
 2292 0ae5 9B020000 		.4byte	.LASF154
 2293 0ae9 01       		.byte	0x1
 2294 0aea 6502     		.2byte	0x265
 2295 0aec B7090000 		.4byte	0x9b7
 2296 0af0 02       		.uleb128 0x2
 2297 0af1 91       		.byte	0x91
 2298 0af2 6C       		.sleb128 -20
 2299 0af3 23       		.uleb128 0x23
 2300 0af4 33030000 		.4byte	.LASF156
 2301 0af8 01       		.byte	0x1
 2302 0af9 6702     		.2byte	0x267
 2303 0afb 120B0000 		.4byte	0xb12
 2304 0aff 02       		.uleb128 0x2
 2305 0b00 91       		.byte	0x91
 2306 0b01 74       		.sleb128 -12
 2307 0b02 23       		.uleb128 0x23
 2308 0b03 16060000 		.4byte	.LASF157
 2309 0b07 01       		.byte	0x1
 2310 0b08 6802     		.2byte	0x268
 2311 0b0a 180B0000 		.4byte	0xb18
 2312 0b0e 02       		.uleb128 0x2
 2313 0b0f 91       		.byte	0x91
ARM GAS  /tmp/ccKLeSvd.s 			page 58


 2314 0b10 70       		.sleb128 -16
 2315 0b11 00       		.byte	0
 2316 0b12 0D       		.uleb128 0xd
 2317 0b13 04       		.byte	0x4
 2318 0b14 FD090000 		.4byte	0x9fd
 2319 0b18 0D       		.uleb128 0xd
 2320 0b19 04       		.byte	0x4
 2321 0b1a B2090000 		.4byte	0x9b2
 2322 0b1e 25       		.uleb128 0x25
 2323 0b1f 20030000 		.4byte	.LASF166
 2324 0b23 01       		.byte	0x1
 2325 0b24 0702     		.2byte	0x207
 2326 0b26 ED090000 		.4byte	0x9ed
 2327 0b2a AC020000 		.4byte	.LFB10
 2328 0b2e DA000000 		.4byte	.LFE10-.LFB10
 2329 0b32 01       		.uleb128 0x1
 2330 0b33 9C       		.byte	0x9c
 2331 0b34 DE0B0000 		.4byte	0xbde
 2332 0b38 22       		.uleb128 0x22
 2333 0b39 9B020000 		.4byte	.LASF154
 2334 0b3d 01       		.byte	0x1
 2335 0b3e 0702     		.2byte	0x207
 2336 0b40 B7090000 		.4byte	0x9b7
 2337 0b44 02       		.uleb128 0x2
 2338 0b45 91       		.byte	0x91
 2339 0b46 4C       		.sleb128 -52
 2340 0b47 22       		.uleb128 0x22
 2341 0b48 EE060000 		.4byte	.LASF158
 2342 0b4c 01       		.byte	0x1
 2343 0b4d 0702     		.2byte	0x207
 2344 0b4f F8090000 		.4byte	0x9f8
 2345 0b53 02       		.uleb128 0x2
 2346 0b54 91       		.byte	0x91
 2347 0b55 48       		.sleb128 -56
 2348 0b56 23       		.uleb128 0x23
 2349 0b57 1B040000 		.4byte	.LASF159
 2350 0b5b 01       		.byte	0x1
 2351 0b5c 0902     		.2byte	0x209
 2352 0b5e A1090000 		.4byte	0x9a1
 2353 0b62 02       		.uleb128 0x2
 2354 0b63 91       		.byte	0x91
 2355 0b64 74       		.sleb128 -12
 2356 0b65 23       		.uleb128 0x23
 2357 0b66 06050000 		.4byte	.LASF127
 2358 0b6a 01       		.byte	0x1
 2359 0b6b 0902     		.2byte	0x209
 2360 0b6d A1090000 		.4byte	0x9a1
 2361 0b71 02       		.uleb128 0x2
 2362 0b72 91       		.byte	0x91
 2363 0b73 5C       		.sleb128 -36
 2364 0b74 23       		.uleb128 0x23
 2365 0b75 33010000 		.4byte	.LASF160
 2366 0b79 01       		.byte	0x1
 2367 0b7a 0A02     		.2byte	0x20a
 2368 0b7c DE0B0000 		.4byte	0xbde
 2369 0b80 02       		.uleb128 0x2
 2370 0b81 91       		.byte	0x91
ARM GAS  /tmp/ccKLeSvd.s 			page 59


 2371 0b82 60       		.sleb128 -32
 2372 0b83 23       		.uleb128 0x23
 2373 0b84 72080000 		.4byte	.LASF161
 2374 0b88 01       		.byte	0x1
 2375 0b89 0B02     		.2byte	0x20b
 2376 0b8b 180B0000 		.4byte	0xb18
 2377 0b8f 02       		.uleb128 0x2
 2378 0b90 91       		.byte	0x91
 2379 0b91 64       		.sleb128 -28
 2380 0b92 23       		.uleb128 0x23
 2381 0b93 EB020000 		.4byte	.LASF162
 2382 0b97 01       		.byte	0x1
 2383 0b98 0C02     		.2byte	0x20c
 2384 0b9a ED090000 		.4byte	0x9ed
 2385 0b9e 02       		.uleb128 0x2
 2386 0b9f 91       		.byte	0x91
 2387 0ba0 70       		.sleb128 -16
 2388 0ba1 23       		.uleb128 0x23
 2389 0ba2 71020000 		.4byte	.LASF163
 2390 0ba6 01       		.byte	0x1
 2391 0ba7 0C02     		.2byte	0x20c
 2392 0ba9 ED090000 		.4byte	0x9ed
 2393 0bad 02       		.uleb128 0x2
 2394 0bae 91       		.byte	0x91
 2395 0baf 58       		.sleb128 -40
 2396 0bb0 23       		.uleb128 0x23
 2397 0bb1 48050000 		.4byte	.LASF164
 2398 0bb5 01       		.byte	0x1
 2399 0bb6 0C02     		.2byte	0x20c
 2400 0bb8 ED090000 		.4byte	0x9ed
 2401 0bbc 02       		.uleb128 0x2
 2402 0bbd 91       		.byte	0x91
 2403 0bbe 54       		.sleb128 -44
 2404 0bbf 23       		.uleb128 0x23
 2405 0bc0 33030000 		.4byte	.LASF156
 2406 0bc4 01       		.byte	0x1
 2407 0bc5 0D02     		.2byte	0x20d
 2408 0bc7 120B0000 		.4byte	0xb12
 2409 0bcb 02       		.uleb128 0x2
 2410 0bcc 91       		.byte	0x91
 2411 0bcd 68       		.sleb128 -24
 2412 0bce 23       		.uleb128 0x23
 2413 0bcf 55070000 		.4byte	.LASF165
 2414 0bd3 01       		.byte	0x1
 2415 0bd4 0E02     		.2byte	0x20e
 2416 0bd6 A4080000 		.4byte	0x8a4
 2417 0bda 02       		.uleb128 0x2
 2418 0bdb 91       		.byte	0x91
 2419 0bdc 6C       		.sleb128 -20
 2420 0bdd 00       		.byte	0
 2421 0bde 0D       		.uleb128 0xd
 2422 0bdf 04       		.byte	0x4
 2423 0be0 60090000 		.4byte	0x960
 2424 0be4 26       		.uleb128 0x26
 2425 0be5 CB020000 		.4byte	.LASF167
 2426 0be9 01       		.byte	0x1
 2427 0bea F701     		.2byte	0x1f7
ARM GAS  /tmp/ccKLeSvd.s 			page 60


 2428 0bec ED090000 		.4byte	0x9ed
 2429 0bf0 68020000 		.4byte	.LFB9
 2430 0bf4 44000000 		.4byte	.LFE9-.LFB9
 2431 0bf8 01       		.uleb128 0x1
 2432 0bf9 9C       		.byte	0x9c
 2433 0bfa 830C0000 		.4byte	0xc83
 2434 0bfe 22       		.uleb128 0x22
 2435 0bff 9B020000 		.4byte	.LASF154
 2436 0c03 01       		.byte	0x1
 2437 0c04 F701     		.2byte	0x1f7
 2438 0c06 B7090000 		.4byte	0x9b7
 2439 0c0a 02       		.uleb128 0x2
 2440 0c0b 91       		.byte	0x91
 2441 0c0c 5C       		.sleb128 -36
 2442 0c0d 23       		.uleb128 0x23
 2443 0c0e 90010000 		.4byte	.LASF168
 2444 0c12 01       		.byte	0x1
 2445 0c13 F901     		.2byte	0x1f9
 2446 0c15 B4080000 		.4byte	0x8b4
 2447 0c19 02       		.uleb128 0x2
 2448 0c1a 91       		.byte	0x91
 2449 0c1b 70       		.sleb128 -16
 2450 0c1c 23       		.uleb128 0x23
 2451 0c1d 33030000 		.4byte	.LASF156
 2452 0c21 01       		.byte	0x1
 2453 0c22 FA01     		.2byte	0x1fa
 2454 0c24 890C0000 		.4byte	0xc89
 2455 0c28 02       		.uleb128 0x2
 2456 0c29 91       		.byte	0x91
 2457 0c2a 74       		.sleb128 -12
 2458 0c2b 23       		.uleb128 0x23
 2459 0c2c 5A010000 		.4byte	.LASF169
 2460 0c30 01       		.byte	0x1
 2461 0c31 FB01     		.2byte	0x1fb
 2462 0c33 ED090000 		.4byte	0x9ed
 2463 0c37 02       		.uleb128 0x2
 2464 0c38 91       		.byte	0x91
 2465 0c39 6C       		.sleb128 -20
 2466 0c3a 27       		.uleb128 0x27
 2467 0c3b 960E0000 		.4byte	0xe96
 2468 0c3f 74020000 		.4byte	.LBB7
 2469 0c43 1A000000 		.4byte	.LBE7-.LBB7
 2470 0c47 01       		.byte	0x1
 2471 0c48 FD01     		.2byte	0x1fd
 2472 0c4a 690C0000 		.4byte	0xc69
 2473 0c4e 28       		.uleb128 0x28
 2474 0c4f 74020000 		.4byte	.LBB8
 2475 0c53 1A000000 		.4byte	.LBE8-.LBB8
 2476 0c57 29       		.uleb128 0x29
 2477 0c58 A20E0000 		.4byte	0xea2
 2478 0c5c 02       		.uleb128 0x2
 2479 0c5d 91       		.byte	0x91
 2480 0c5e 64       		.sleb128 -28
 2481 0c5f 29       		.uleb128 0x29
 2482 0c60 AD0E0000 		.4byte	0xead
 2483 0c64 02       		.uleb128 0x2
 2484 0c65 91       		.byte	0x91
ARM GAS  /tmp/ccKLeSvd.s 			page 61


 2485 0c66 60       		.sleb128 -32
 2486 0c67 00       		.byte	0
 2487 0c68 00       		.byte	0
 2488 0c69 2A       		.uleb128 0x2a
 2489 0c6a 7E0E0000 		.4byte	0xe7e
 2490 0c6e 9A020000 		.4byte	.LBB9
 2491 0c72 06000000 		.4byte	.LBE9-.LBB9
 2492 0c76 01       		.byte	0x1
 2493 0c77 0102     		.2byte	0x201
 2494 0c79 2B       		.uleb128 0x2b
 2495 0c7a 8A0E0000 		.4byte	0xe8a
 2496 0c7e 02       		.uleb128 0x2
 2497 0c7f 91       		.byte	0x91
 2498 0c80 68       		.sleb128 -24
 2499 0c81 00       		.byte	0
 2500 0c82 00       		.byte	0
 2501 0c83 0D       		.uleb128 0xd
 2502 0c84 04       		.byte	0x4
 2503 0c85 080A0000 		.4byte	0xa08
 2504 0c89 0E       		.uleb128 0xe
 2505 0c8a 830C0000 		.4byte	0xc83
 2506 0c8e 25       		.uleb128 0x25
 2507 0c8f 2C060000 		.4byte	.LASF170
 2508 0c93 01       		.byte	0x1
 2509 0c94 CD01     		.2byte	0x1cd
 2510 0c96 ED090000 		.4byte	0x9ed
 2511 0c9a 34020000 		.4byte	.LFB8
 2512 0c9e 34000000 		.4byte	.LFE8-.LFB8
 2513 0ca2 01       		.uleb128 0x1
 2514 0ca3 9C       		.byte	0x9c
 2515 0ca4 E50C0000 		.4byte	0xce5
 2516 0ca8 22       		.uleb128 0x22
 2517 0ca9 9B020000 		.4byte	.LASF154
 2518 0cad 01       		.byte	0x1
 2519 0cae CD01     		.2byte	0x1cd
 2520 0cb0 B7090000 		.4byte	0x9b7
 2521 0cb4 02       		.uleb128 0x2
 2522 0cb5 91       		.byte	0x91
 2523 0cb6 6C       		.sleb128 -20
 2524 0cb7 22       		.uleb128 0x22
 2525 0cb8 EB020000 		.4byte	.LASF162
 2526 0cbc 01       		.byte	0x1
 2527 0cbd CD01     		.2byte	0x1cd
 2528 0cbf F8090000 		.4byte	0x9f8
 2529 0cc3 02       		.uleb128 0x2
 2530 0cc4 91       		.byte	0x91
 2531 0cc5 68       		.sleb128 -24
 2532 0cc6 23       		.uleb128 0x23
 2533 0cc7 33030000 		.4byte	.LASF156
 2534 0ccb 01       		.byte	0x1
 2535 0ccc CF01     		.2byte	0x1cf
 2536 0cce 120B0000 		.4byte	0xb12
 2537 0cd2 02       		.uleb128 0x2
 2538 0cd3 91       		.byte	0x91
 2539 0cd4 74       		.sleb128 -12
 2540 0cd5 23       		.uleb128 0x23
 2541 0cd6 5A010000 		.4byte	.LASF169
ARM GAS  /tmp/ccKLeSvd.s 			page 62


 2542 0cda 01       		.byte	0x1
 2543 0cdb D001     		.2byte	0x1d0
 2544 0cdd ED090000 		.4byte	0x9ed
 2545 0ce1 02       		.uleb128 0x2
 2546 0ce2 91       		.byte	0x91
 2547 0ce3 70       		.sleb128 -16
 2548 0ce4 00       		.byte	0
 2549 0ce5 25       		.uleb128 0x25
 2550 0ce6 9A040000 		.4byte	.LASF171
 2551 0cea 01       		.byte	0x1
 2552 0ceb 3701     		.2byte	0x137
 2553 0ced ED090000 		.4byte	0x9ed
 2554 0cf1 20010000 		.4byte	.LFB7
 2555 0cf5 14010000 		.4byte	.LFE7-.LFB7
 2556 0cf9 01       		.uleb128 0x1
 2557 0cfa 9C       		.byte	0x9c
 2558 0cfb BE0D0000 		.4byte	0xdbe
 2559 0cff 22       		.uleb128 0x22
 2560 0d00 9B020000 		.4byte	.LASF154
 2561 0d04 01       		.byte	0x1
 2562 0d05 3701     		.2byte	0x137
 2563 0d07 B7090000 		.4byte	0x9b7
 2564 0d0b 02       		.uleb128 0x2
 2565 0d0c 91       		.byte	0x91
 2566 0d0d 54       		.sleb128 -44
 2567 0d0e 22       		.uleb128 0x22
 2568 0d0f 15070000 		.4byte	.LASF146
 2569 0d13 01       		.byte	0x1
 2570 0d14 3701     		.2byte	0x137
 2571 0d16 F8090000 		.4byte	0x9f8
 2572 0d1a 02       		.uleb128 0x2
 2573 0d1b 91       		.byte	0x91
 2574 0d1c 50       		.sleb128 -48
 2575 0d1d 22       		.uleb128 0x22
 2576 0d1e 42080000 		.4byte	.LASF172
 2577 0d22 01       		.byte	0x1
 2578 0d23 3701     		.2byte	0x137
 2579 0d25 AF080000 		.4byte	0x8af
 2580 0d29 02       		.uleb128 0x2
 2581 0d2a 91       		.byte	0x91
 2582 0d2b 4C       		.sleb128 -52
 2583 0d2c 22       		.uleb128 0x22
 2584 0d2d A7020000 		.4byte	.LASF147
 2585 0d31 01       		.byte	0x1
 2586 0d32 3701     		.2byte	0x137
 2587 0d34 AF080000 		.4byte	0x8af
 2588 0d38 02       		.uleb128 0x2
 2589 0d39 91       		.byte	0x91
 2590 0d3a 48       		.sleb128 -56
 2591 0d3b 22       		.uleb128 0x22
 2592 0d3c 7E070000 		.4byte	.LASF173
 2593 0d40 01       		.byte	0x1
 2594 0d41 3701     		.2byte	0x137
 2595 0d43 C4080000 		.4byte	0x8c4
 2596 0d47 02       		.uleb128 0x2
 2597 0d48 91       		.byte	0x91
 2598 0d49 00       		.sleb128 0
ARM GAS  /tmp/ccKLeSvd.s 			page 63


 2599 0d4a 23       		.uleb128 0x23
 2600 0d4b 33030000 		.4byte	.LASF156
 2601 0d4f 01       		.byte	0x1
 2602 0d50 3901     		.2byte	0x139
 2603 0d52 120B0000 		.4byte	0xb12
 2604 0d56 02       		.uleb128 0x2
 2605 0d57 91       		.byte	0x91
 2606 0d58 6C       		.sleb128 -20
 2607 0d59 23       		.uleb128 0x23
 2608 0d5a 5A010000 		.4byte	.LASF169
 2609 0d5e 01       		.byte	0x1
 2610 0d5f 3A01     		.2byte	0x13a
 2611 0d61 ED090000 		.4byte	0x9ed
 2612 0d65 02       		.uleb128 0x2
 2613 0d66 91       		.byte	0x91
 2614 0d67 74       		.sleb128 -12
 2615 0d68 23       		.uleb128 0x23
 2616 0d69 48050000 		.4byte	.LASF164
 2617 0d6d 01       		.byte	0x1
 2618 0d6e 3A01     		.2byte	0x13a
 2619 0d70 ED090000 		.4byte	0x9ed
 2620 0d74 02       		.uleb128 0x2
 2621 0d75 91       		.byte	0x91
 2622 0d76 70       		.sleb128 -16
 2623 0d77 23       		.uleb128 0x23
 2624 0d78 5F050000 		.4byte	.LASF155
 2625 0d7c 01       		.byte	0x1
 2626 0d7d 3B01     		.2byte	0x13b
 2627 0d7f A4080000 		.4byte	0x8a4
 2628 0d83 02       		.uleb128 0x2
 2629 0d84 91       		.byte	0x91
 2630 0d85 60       		.sleb128 -32
 2631 0d86 23       		.uleb128 0x23
 2632 0d87 93070000 		.4byte	.LASF174
 2633 0d8b 01       		.byte	0x1
 2634 0d8c 3B01     		.2byte	0x13b
 2635 0d8e A4080000 		.4byte	0x8a4
 2636 0d92 02       		.uleb128 0x2
 2637 0d93 91       		.byte	0x91
 2638 0d94 5C       		.sleb128 -36
 2639 0d95 23       		.uleb128 0x23
 2640 0d96 81020000 		.4byte	.LASF175
 2641 0d9a 01       		.byte	0x1
 2642 0d9b 3C01     		.2byte	0x13c
 2643 0d9d A4080000 		.4byte	0x8a4
 2644 0da1 02       		.uleb128 0x2
 2645 0da2 91       		.byte	0x91
 2646 0da3 68       		.sleb128 -24
 2647 0da4 28       		.uleb128 0x28
 2648 0da5 3E010000 		.4byte	.LBB6
 2649 0da9 78000000 		.4byte	.LBE6-.LBB6
 2650 0dad 23       		.uleb128 0x23
 2651 0dae E5050000 		.4byte	.LASF145
 2652 0db2 01       		.byte	0x1
 2653 0db3 4B01     		.2byte	0x14b
 2654 0db5 F8090000 		.4byte	0x9f8
 2655 0db9 02       		.uleb128 0x2
ARM GAS  /tmp/ccKLeSvd.s 			page 64


 2656 0dba 91       		.byte	0x91
 2657 0dbb 64       		.sleb128 -28
 2658 0dbc 00       		.byte	0
 2659 0dbd 00       		.byte	0
 2660 0dbe 2C       		.uleb128 0x2c
 2661 0dbf 83050000 		.4byte	.LASF176
 2662 0dc3 01       		.byte	0x1
 2663 0dc4 BF       		.byte	0xbf
 2664 0dc5 ED090000 		.4byte	0x9ed
 2665 0dc9 2E000000 		.4byte	.LFB6
 2666 0dcd F2000000 		.4byte	.LFE6-.LFB6
 2667 0dd1 01       		.uleb128 0x1
 2668 0dd2 9C       		.byte	0x9c
 2669 0dd3 560E0000 		.4byte	0xe56
 2670 0dd7 2D       		.uleb128 0x2d
 2671 0dd8 9B020000 		.4byte	.LASF154
 2672 0ddc 01       		.byte	0x1
 2673 0ddd BF       		.byte	0xbf
 2674 0dde B7090000 		.4byte	0x9b7
 2675 0de2 02       		.uleb128 0x2
 2676 0de3 91       		.byte	0x91
 2677 0de4 5C       		.sleb128 -36
 2678 0de5 2D       		.uleb128 0x2d
 2679 0de6 EE060000 		.4byte	.LASF158
 2680 0dea 01       		.byte	0x1
 2681 0deb BF       		.byte	0xbf
 2682 0dec F8090000 		.4byte	0x9f8
 2683 0df0 02       		.uleb128 0x2
 2684 0df1 91       		.byte	0x91
 2685 0df2 58       		.sleb128 -40
 2686 0df3 2D       		.uleb128 0x2d
 2687 0df4 15070000 		.4byte	.LASF146
 2688 0df8 01       		.byte	0x1
 2689 0df9 BF       		.byte	0xbf
 2690 0dfa F8090000 		.4byte	0x9f8
 2691 0dfe 02       		.uleb128 0x2
 2692 0dff 91       		.byte	0x91
 2693 0e00 54       		.sleb128 -44
 2694 0e01 2D       		.uleb128 0x2d
 2695 0e02 7E070000 		.4byte	.LASF173
 2696 0e06 01       		.byte	0x1
 2697 0e07 BF       		.byte	0xbf
 2698 0e08 C4080000 		.4byte	0x8c4
 2699 0e0c 02       		.uleb128 0x2
 2700 0e0d 91       		.byte	0x91
 2701 0e0e 50       		.sleb128 -48
 2702 0e0f 2E       		.uleb128 0x2e
 2703 0e10 63010000 		.4byte	.LASF177
 2704 0e14 01       		.byte	0x1
 2705 0e15 C1       		.byte	0xc1
 2706 0e16 ED090000 		.4byte	0x9ed
 2707 0e1a 02       		.uleb128 0x2
 2708 0e1b 91       		.byte	0x91
 2709 0e1c 68       		.sleb128 -24
 2710 0e1d 2E       		.uleb128 0x2e
 2711 0e1e 5A010000 		.4byte	.LASF169
 2712 0e22 01       		.byte	0x1
ARM GAS  /tmp/ccKLeSvd.s 			page 65


 2713 0e23 C1       		.byte	0xc1
 2714 0e24 ED090000 		.4byte	0x9ed
 2715 0e28 02       		.uleb128 0x2
 2716 0e29 91       		.byte	0x91
 2717 0e2a 74       		.sleb128 -12
 2718 0e2b 2E       		.uleb128 0x2e
 2719 0e2c 33030000 		.4byte	.LASF156
 2720 0e30 01       		.byte	0x1
 2721 0e31 C2       		.byte	0xc2
 2722 0e32 120B0000 		.4byte	0xb12
 2723 0e36 02       		.uleb128 0x2
 2724 0e37 91       		.byte	0x91
 2725 0e38 70       		.sleb128 -16
 2726 0e39 2E       		.uleb128 0x2e
 2727 0e3a 93070000 		.4byte	.LASF174
 2728 0e3e 01       		.byte	0x1
 2729 0e3f C3       		.byte	0xc3
 2730 0e40 A4080000 		.4byte	0x8a4
 2731 0e44 02       		.uleb128 0x2
 2732 0e45 91       		.byte	0x91
 2733 0e46 64       		.sleb128 -28
 2734 0e47 2E       		.uleb128 0x2e
 2735 0e48 81020000 		.4byte	.LASF175
 2736 0e4c 01       		.byte	0x1
 2737 0e4d C4       		.byte	0xc4
 2738 0e4e A4080000 		.4byte	0x8a4
 2739 0e52 02       		.uleb128 0x2
 2740 0e53 91       		.byte	0x91
 2741 0e54 6C       		.sleb128 -20
 2742 0e55 00       		.byte	0
 2743 0e56 2C       		.uleb128 0x2c
 2744 0e57 FF010000 		.4byte	.LASF178
 2745 0e5b 01       		.byte	0x1
 2746 0e5c 91       		.byte	0x91
 2747 0e5d B7090000 		.4byte	0x9b7
 2748 0e61 00000000 		.4byte	.LFB5
 2749 0e65 2E000000 		.4byte	.LFE5-.LFB5
 2750 0e69 01       		.uleb128 0x1
 2751 0e6a 9C       		.byte	0x9c
 2752 0e6b 7E0E0000 		.4byte	0xe7e
 2753 0e6f 2E       		.uleb128 0x2e
 2754 0e70 33030000 		.4byte	.LASF156
 2755 0e74 01       		.byte	0x1
 2756 0e75 93       		.byte	0x93
 2757 0e76 120B0000 		.4byte	0xb12
 2758 0e7a 02       		.uleb128 0x2
 2759 0e7b 91       		.byte	0x91
 2760 0e7c 74       		.sleb128 -12
 2761 0e7d 00       		.byte	0
 2762 0e7e 2F       		.uleb128 0x2f
 2763 0e7f 23010000 		.4byte	.LASF179
 2764 0e83 02       		.byte	0x2
 2765 0e84 E5       		.byte	0xe5
 2766 0e85 03       		.byte	0x3
 2767 0e86 960E0000 		.4byte	0xe96
 2768 0e8a 30       		.uleb128 0x30
 2769 0e8b 39050000 		.4byte	.LASF187
ARM GAS  /tmp/ccKLeSvd.s 			page 66


 2770 0e8f 02       		.byte	0x2
 2771 0e90 E5       		.byte	0xe5
 2772 0e91 89080000 		.4byte	0x889
 2773 0e95 00       		.byte	0
 2774 0e96 31       		.uleb128 0x31
 2775 0e97 26040000 		.4byte	.LASF180
 2776 0e9b 02       		.byte	0x2
 2777 0e9c D1       		.byte	0xd1
 2778 0e9d 89080000 		.4byte	0x889
 2779 0ea1 03       		.byte	0x3
 2780 0ea2 32       		.uleb128 0x32
 2781 0ea3 C1010000 		.4byte	.LASF181
 2782 0ea7 02       		.byte	0x2
 2783 0ea8 D3       		.byte	0xd3
 2784 0ea9 89080000 		.4byte	0x889
 2785 0ead 32       		.uleb128 0x32
 2786 0eae B3030000 		.4byte	.LASF182
 2787 0eb2 02       		.byte	0x2
 2788 0eb3 D3       		.byte	0xd3
 2789 0eb4 89080000 		.4byte	0x889
 2790 0eb8 00       		.byte	0
 2791 0eb9 00       		.byte	0
 2792              		.section	.debug_abbrev,"",%progbits
 2793              	.Ldebug_abbrev0:
 2794 0000 01       		.uleb128 0x1
 2795 0001 11       		.uleb128 0x11
 2796 0002 01       		.byte	0x1
 2797 0003 25       		.uleb128 0x25
 2798 0004 0E       		.uleb128 0xe
 2799 0005 13       		.uleb128 0x13
 2800 0006 0B       		.uleb128 0xb
 2801 0007 03       		.uleb128 0x3
 2802 0008 0E       		.uleb128 0xe
 2803 0009 1B       		.uleb128 0x1b
 2804 000a 0E       		.uleb128 0xe
 2805 000b 11       		.uleb128 0x11
 2806 000c 01       		.uleb128 0x1
 2807 000d 12       		.uleb128 0x12
 2808 000e 06       		.uleb128 0x6
 2809 000f 10       		.uleb128 0x10
 2810 0010 17       		.uleb128 0x17
 2811 0011 00       		.byte	0
 2812 0012 00       		.byte	0
 2813 0013 02       		.uleb128 0x2
 2814 0014 24       		.uleb128 0x24
 2815 0015 00       		.byte	0
 2816 0016 0B       		.uleb128 0xb
 2817 0017 0B       		.uleb128 0xb
 2818 0018 3E       		.uleb128 0x3e
 2819 0019 0B       		.uleb128 0xb
 2820 001a 03       		.uleb128 0x3
 2821 001b 0E       		.uleb128 0xe
 2822 001c 00       		.byte	0
 2823 001d 00       		.byte	0
 2824 001e 03       		.uleb128 0x3
 2825 001f 24       		.uleb128 0x24
 2826 0020 00       		.byte	0
ARM GAS  /tmp/ccKLeSvd.s 			page 67


 2827 0021 0B       		.uleb128 0xb
 2828 0022 0B       		.uleb128 0xb
 2829 0023 3E       		.uleb128 0x3e
 2830 0024 0B       		.uleb128 0xb
 2831 0025 03       		.uleb128 0x3
 2832 0026 08       		.uleb128 0x8
 2833 0027 00       		.byte	0
 2834 0028 00       		.byte	0
 2835 0029 04       		.uleb128 0x4
 2836 002a 16       		.uleb128 0x16
 2837 002b 00       		.byte	0
 2838 002c 03       		.uleb128 0x3
 2839 002d 0E       		.uleb128 0xe
 2840 002e 3A       		.uleb128 0x3a
 2841 002f 0B       		.uleb128 0xb
 2842 0030 3B       		.uleb128 0x3b
 2843 0031 0B       		.uleb128 0xb
 2844 0032 49       		.uleb128 0x49
 2845 0033 13       		.uleb128 0x13
 2846 0034 00       		.byte	0
 2847 0035 00       		.byte	0
 2848 0036 05       		.uleb128 0x5
 2849 0037 16       		.uleb128 0x16
 2850 0038 00       		.byte	0
 2851 0039 03       		.uleb128 0x3
 2852 003a 0E       		.uleb128 0xe
 2853 003b 3A       		.uleb128 0x3a
 2854 003c 0B       		.uleb128 0xb
 2855 003d 3B       		.uleb128 0x3b
 2856 003e 05       		.uleb128 0x5
 2857 003f 49       		.uleb128 0x49
 2858 0040 13       		.uleb128 0x13
 2859 0041 00       		.byte	0
 2860 0042 00       		.byte	0
 2861 0043 06       		.uleb128 0x6
 2862 0044 17       		.uleb128 0x17
 2863 0045 01       		.byte	0x1
 2864 0046 0B       		.uleb128 0xb
 2865 0047 0B       		.uleb128 0xb
 2866 0048 3A       		.uleb128 0x3a
 2867 0049 0B       		.uleb128 0xb
 2868 004a 3B       		.uleb128 0x3b
 2869 004b 0B       		.uleb128 0xb
 2870 004c 01       		.uleb128 0x1
 2871 004d 13       		.uleb128 0x13
 2872 004e 00       		.byte	0
 2873 004f 00       		.byte	0
 2874 0050 07       		.uleb128 0x7
 2875 0051 0D       		.uleb128 0xd
 2876 0052 00       		.byte	0
 2877 0053 03       		.uleb128 0x3
 2878 0054 0E       		.uleb128 0xe
 2879 0055 3A       		.uleb128 0x3a
 2880 0056 0B       		.uleb128 0xb
 2881 0057 3B       		.uleb128 0x3b
 2882 0058 0B       		.uleb128 0xb
 2883 0059 49       		.uleb128 0x49
ARM GAS  /tmp/ccKLeSvd.s 			page 68


 2884 005a 13       		.uleb128 0x13
 2885 005b 00       		.byte	0
 2886 005c 00       		.byte	0
 2887 005d 08       		.uleb128 0x8
 2888 005e 01       		.uleb128 0x1
 2889 005f 01       		.byte	0x1
 2890 0060 49       		.uleb128 0x49
 2891 0061 13       		.uleb128 0x13
 2892 0062 01       		.uleb128 0x1
 2893 0063 13       		.uleb128 0x13
 2894 0064 00       		.byte	0
 2895 0065 00       		.byte	0
 2896 0066 09       		.uleb128 0x9
 2897 0067 21       		.uleb128 0x21
 2898 0068 00       		.byte	0
 2899 0069 49       		.uleb128 0x49
 2900 006a 13       		.uleb128 0x13
 2901 006b 2F       		.uleb128 0x2f
 2902 006c 0B       		.uleb128 0xb
 2903 006d 00       		.byte	0
 2904 006e 00       		.byte	0
 2905 006f 0A       		.uleb128 0xa
 2906 0070 13       		.uleb128 0x13
 2907 0071 01       		.byte	0x1
 2908 0072 0B       		.uleb128 0xb
 2909 0073 0B       		.uleb128 0xb
 2910 0074 3A       		.uleb128 0x3a
 2911 0075 0B       		.uleb128 0xb
 2912 0076 3B       		.uleb128 0x3b
 2913 0077 0B       		.uleb128 0xb
 2914 0078 01       		.uleb128 0x1
 2915 0079 13       		.uleb128 0x13
 2916 007a 00       		.byte	0
 2917 007b 00       		.byte	0
 2918 007c 0B       		.uleb128 0xb
 2919 007d 0D       		.uleb128 0xd
 2920 007e 00       		.byte	0
 2921 007f 03       		.uleb128 0x3
 2922 0080 0E       		.uleb128 0xe
 2923 0081 3A       		.uleb128 0x3a
 2924 0082 0B       		.uleb128 0xb
 2925 0083 3B       		.uleb128 0x3b
 2926 0084 0B       		.uleb128 0xb
 2927 0085 49       		.uleb128 0x49
 2928 0086 13       		.uleb128 0x13
 2929 0087 38       		.uleb128 0x38
 2930 0088 0B       		.uleb128 0xb
 2931 0089 00       		.byte	0
 2932 008a 00       		.byte	0
 2933 008b 0C       		.uleb128 0xc
 2934 008c 0F       		.uleb128 0xf
 2935 008d 00       		.byte	0
 2936 008e 0B       		.uleb128 0xb
 2937 008f 0B       		.uleb128 0xb
 2938 0090 00       		.byte	0
 2939 0091 00       		.byte	0
 2940 0092 0D       		.uleb128 0xd
ARM GAS  /tmp/ccKLeSvd.s 			page 69


 2941 0093 0F       		.uleb128 0xf
 2942 0094 00       		.byte	0
 2943 0095 0B       		.uleb128 0xb
 2944 0096 0B       		.uleb128 0xb
 2945 0097 49       		.uleb128 0x49
 2946 0098 13       		.uleb128 0x13
 2947 0099 00       		.byte	0
 2948 009a 00       		.byte	0
 2949 009b 0E       		.uleb128 0xe
 2950 009c 26       		.uleb128 0x26
 2951 009d 00       		.byte	0
 2952 009e 49       		.uleb128 0x49
 2953 009f 13       		.uleb128 0x13
 2954 00a0 00       		.byte	0
 2955 00a1 00       		.byte	0
 2956 00a2 0F       		.uleb128 0xf
 2957 00a3 13       		.uleb128 0x13
 2958 00a4 01       		.byte	0x1
 2959 00a5 03       		.uleb128 0x3
 2960 00a6 0E       		.uleb128 0xe
 2961 00a7 0B       		.uleb128 0xb
 2962 00a8 0B       		.uleb128 0xb
 2963 00a9 3A       		.uleb128 0x3a
 2964 00aa 0B       		.uleb128 0xb
 2965 00ab 3B       		.uleb128 0x3b
 2966 00ac 0B       		.uleb128 0xb
 2967 00ad 01       		.uleb128 0x1
 2968 00ae 13       		.uleb128 0x13
 2969 00af 00       		.byte	0
 2970 00b0 00       		.byte	0
 2971 00b1 10       		.uleb128 0x10
 2972 00b2 0D       		.uleb128 0xd
 2973 00b3 00       		.byte	0
 2974 00b4 03       		.uleb128 0x3
 2975 00b5 08       		.uleb128 0x8
 2976 00b6 3A       		.uleb128 0x3a
 2977 00b7 0B       		.uleb128 0xb
 2978 00b8 3B       		.uleb128 0x3b
 2979 00b9 0B       		.uleb128 0xb
 2980 00ba 49       		.uleb128 0x49
 2981 00bb 13       		.uleb128 0x13
 2982 00bc 38       		.uleb128 0x38
 2983 00bd 0B       		.uleb128 0xb
 2984 00be 00       		.byte	0
 2985 00bf 00       		.byte	0
 2986 00c0 11       		.uleb128 0x11
 2987 00c1 13       		.uleb128 0x13
 2988 00c2 01       		.byte	0x1
 2989 00c3 03       		.uleb128 0x3
 2990 00c4 0E       		.uleb128 0xe
 2991 00c5 0B       		.uleb128 0xb
 2992 00c6 05       		.uleb128 0x5
 2993 00c7 3A       		.uleb128 0x3a
 2994 00c8 0B       		.uleb128 0xb
 2995 00c9 3B       		.uleb128 0x3b
 2996 00ca 0B       		.uleb128 0xb
 2997 00cb 01       		.uleb128 0x1
ARM GAS  /tmp/ccKLeSvd.s 			page 70


 2998 00cc 13       		.uleb128 0x13
 2999 00cd 00       		.byte	0
 3000 00ce 00       		.byte	0
 3001 00cf 12       		.uleb128 0x12
 3002 00d0 0D       		.uleb128 0xd
 3003 00d1 00       		.byte	0
 3004 00d2 03       		.uleb128 0x3
 3005 00d3 0E       		.uleb128 0xe
 3006 00d4 3A       		.uleb128 0x3a
 3007 00d5 0B       		.uleb128 0xb
 3008 00d6 3B       		.uleb128 0x3b
 3009 00d7 0B       		.uleb128 0xb
 3010 00d8 49       		.uleb128 0x49
 3011 00d9 13       		.uleb128 0x13
 3012 00da 38       		.uleb128 0x38
 3013 00db 05       		.uleb128 0x5
 3014 00dc 00       		.byte	0
 3015 00dd 00       		.byte	0
 3016 00de 13       		.uleb128 0x13
 3017 00df 15       		.uleb128 0x15
 3018 00e0 00       		.byte	0
 3019 00e1 27       		.uleb128 0x27
 3020 00e2 19       		.uleb128 0x19
 3021 00e3 00       		.byte	0
 3022 00e4 00       		.byte	0
 3023 00e5 14       		.uleb128 0x14
 3024 00e6 15       		.uleb128 0x15
 3025 00e7 01       		.byte	0x1
 3026 00e8 27       		.uleb128 0x27
 3027 00e9 19       		.uleb128 0x19
 3028 00ea 49       		.uleb128 0x49
 3029 00eb 13       		.uleb128 0x13
 3030 00ec 01       		.uleb128 0x1
 3031 00ed 13       		.uleb128 0x13
 3032 00ee 00       		.byte	0
 3033 00ef 00       		.byte	0
 3034 00f0 15       		.uleb128 0x15
 3035 00f1 05       		.uleb128 0x5
 3036 00f2 00       		.byte	0
 3037 00f3 49       		.uleb128 0x49
 3038 00f4 13       		.uleb128 0x13
 3039 00f5 00       		.byte	0
 3040 00f6 00       		.byte	0
 3041 00f7 16       		.uleb128 0x16
 3042 00f8 13       		.uleb128 0x13
 3043 00f9 01       		.byte	0x1
 3044 00fa 03       		.uleb128 0x3
 3045 00fb 0E       		.uleb128 0xe
 3046 00fc 0B       		.uleb128 0xb
 3047 00fd 05       		.uleb128 0x5
 3048 00fe 3A       		.uleb128 0x3a
 3049 00ff 0B       		.uleb128 0xb
 3050 0100 3B       		.uleb128 0x3b
 3051 0101 05       		.uleb128 0x5
 3052 0102 01       		.uleb128 0x1
 3053 0103 13       		.uleb128 0x13
 3054 0104 00       		.byte	0
ARM GAS  /tmp/ccKLeSvd.s 			page 71


 3055 0105 00       		.byte	0
 3056 0106 17       		.uleb128 0x17
 3057 0107 0D       		.uleb128 0xd
 3058 0108 00       		.byte	0
 3059 0109 03       		.uleb128 0x3
 3060 010a 0E       		.uleb128 0xe
 3061 010b 3A       		.uleb128 0x3a
 3062 010c 0B       		.uleb128 0xb
 3063 010d 3B       		.uleb128 0x3b
 3064 010e 05       		.uleb128 0x5
 3065 010f 49       		.uleb128 0x49
 3066 0110 13       		.uleb128 0x13
 3067 0111 38       		.uleb128 0x38
 3068 0112 0B       		.uleb128 0xb
 3069 0113 00       		.byte	0
 3070 0114 00       		.byte	0
 3071 0115 18       		.uleb128 0x18
 3072 0116 0D       		.uleb128 0xd
 3073 0117 00       		.byte	0
 3074 0118 03       		.uleb128 0x3
 3075 0119 0E       		.uleb128 0xe
 3076 011a 3A       		.uleb128 0x3a
 3077 011b 0B       		.uleb128 0xb
 3078 011c 3B       		.uleb128 0x3b
 3079 011d 05       		.uleb128 0x5
 3080 011e 49       		.uleb128 0x49
 3081 011f 13       		.uleb128 0x13
 3082 0120 38       		.uleb128 0x38
 3083 0121 05       		.uleb128 0x5
 3084 0122 00       		.byte	0
 3085 0123 00       		.byte	0
 3086 0124 19       		.uleb128 0x19
 3087 0125 13       		.uleb128 0x13
 3088 0126 01       		.byte	0x1
 3089 0127 03       		.uleb128 0x3
 3090 0128 0E       		.uleb128 0xe
 3091 0129 0B       		.uleb128 0xb
 3092 012a 0B       		.uleb128 0xb
 3093 012b 3A       		.uleb128 0x3a
 3094 012c 0B       		.uleb128 0xb
 3095 012d 3B       		.uleb128 0x3b
 3096 012e 05       		.uleb128 0x5
 3097 012f 01       		.uleb128 0x1
 3098 0130 13       		.uleb128 0x13
 3099 0131 00       		.byte	0
 3100 0132 00       		.byte	0
 3101 0133 1A       		.uleb128 0x1a
 3102 0134 13       		.uleb128 0x13
 3103 0135 01       		.byte	0x1
 3104 0136 0B       		.uleb128 0xb
 3105 0137 0B       		.uleb128 0xb
 3106 0138 3A       		.uleb128 0x3a
 3107 0139 0B       		.uleb128 0xb
 3108 013a 3B       		.uleb128 0x3b
 3109 013b 05       		.uleb128 0x5
 3110 013c 01       		.uleb128 0x1
 3111 013d 13       		.uleb128 0x13
ARM GAS  /tmp/ccKLeSvd.s 			page 72


 3112 013e 00       		.byte	0
 3113 013f 00       		.byte	0
 3114 0140 1B       		.uleb128 0x1b
 3115 0141 17       		.uleb128 0x17
 3116 0142 01       		.byte	0x1
 3117 0143 0B       		.uleb128 0xb
 3118 0144 0B       		.uleb128 0xb
 3119 0145 3A       		.uleb128 0x3a
 3120 0146 0B       		.uleb128 0xb
 3121 0147 3B       		.uleb128 0x3b
 3122 0148 05       		.uleb128 0x5
 3123 0149 01       		.uleb128 0x1
 3124 014a 13       		.uleb128 0x13
 3125 014b 00       		.byte	0
 3126 014c 00       		.byte	0
 3127 014d 1C       		.uleb128 0x1c
 3128 014e 0D       		.uleb128 0xd
 3129 014f 00       		.byte	0
 3130 0150 03       		.uleb128 0x3
 3131 0151 0E       		.uleb128 0xe
 3132 0152 3A       		.uleb128 0x3a
 3133 0153 0B       		.uleb128 0xb
 3134 0154 3B       		.uleb128 0x3b
 3135 0155 05       		.uleb128 0x5
 3136 0156 49       		.uleb128 0x49
 3137 0157 13       		.uleb128 0x13
 3138 0158 00       		.byte	0
 3139 0159 00       		.byte	0
 3140 015a 1D       		.uleb128 0x1d
 3141 015b 15       		.uleb128 0x15
 3142 015c 01       		.byte	0x1
 3143 015d 27       		.uleb128 0x27
 3144 015e 19       		.uleb128 0x19
 3145 015f 01       		.uleb128 0x1
 3146 0160 13       		.uleb128 0x13
 3147 0161 00       		.byte	0
 3148 0162 00       		.byte	0
 3149 0163 1E       		.uleb128 0x1e
 3150 0164 34       		.uleb128 0x34
 3151 0165 00       		.byte	0
 3152 0166 03       		.uleb128 0x3
 3153 0167 0E       		.uleb128 0xe
 3154 0168 3A       		.uleb128 0x3a
 3155 0169 0B       		.uleb128 0xb
 3156 016a 3B       		.uleb128 0x3b
 3157 016b 05       		.uleb128 0x5
 3158 016c 49       		.uleb128 0x49
 3159 016d 13       		.uleb128 0x13
 3160 016e 3F       		.uleb128 0x3f
 3161 016f 19       		.uleb128 0x19
 3162 0170 3C       		.uleb128 0x3c
 3163 0171 19       		.uleb128 0x19
 3164 0172 00       		.byte	0
 3165 0173 00       		.byte	0
 3166 0174 1F       		.uleb128 0x1f
 3167 0175 34       		.uleb128 0x34
 3168 0176 00       		.byte	0
ARM GAS  /tmp/ccKLeSvd.s 			page 73


 3169 0177 03       		.uleb128 0x3
 3170 0178 0E       		.uleb128 0xe
 3171 0179 3A       		.uleb128 0x3a
 3172 017a 0B       		.uleb128 0xb
 3173 017b 3B       		.uleb128 0x3b
 3174 017c 0B       		.uleb128 0xb
 3175 017d 49       		.uleb128 0x49
 3176 017e 13       		.uleb128 0x13
 3177 017f 3F       		.uleb128 0x3f
 3178 0180 19       		.uleb128 0x19
 3179 0181 3C       		.uleb128 0x3c
 3180 0182 19       		.uleb128 0x19
 3181 0183 00       		.byte	0
 3182 0184 00       		.byte	0
 3183 0185 20       		.uleb128 0x20
 3184 0186 35       		.uleb128 0x35
 3185 0187 00       		.byte	0
 3186 0188 49       		.uleb128 0x49
 3187 0189 13       		.uleb128 0x13
 3188 018a 00       		.byte	0
 3189 018b 00       		.byte	0
 3190 018c 21       		.uleb128 0x21
 3191 018d 2E       		.uleb128 0x2e
 3192 018e 01       		.byte	0x1
 3193 018f 03       		.uleb128 0x3
 3194 0190 0E       		.uleb128 0xe
 3195 0191 3A       		.uleb128 0x3a
 3196 0192 0B       		.uleb128 0xb
 3197 0193 3B       		.uleb128 0x3b
 3198 0194 05       		.uleb128 0x5
 3199 0195 27       		.uleb128 0x27
 3200 0196 19       		.uleb128 0x19
 3201 0197 49       		.uleb128 0x49
 3202 0198 13       		.uleb128 0x13
 3203 0199 11       		.uleb128 0x11
 3204 019a 01       		.uleb128 0x1
 3205 019b 12       		.uleb128 0x12
 3206 019c 06       		.uleb128 0x6
 3207 019d 40       		.uleb128 0x40
 3208 019e 18       		.uleb128 0x18
 3209 019f 9742     		.uleb128 0x2117
 3210 01a1 19       		.uleb128 0x19
 3211 01a2 01       		.uleb128 0x1
 3212 01a3 13       		.uleb128 0x13
 3213 01a4 00       		.byte	0
 3214 01a5 00       		.byte	0
 3215 01a6 22       		.uleb128 0x22
 3216 01a7 05       		.uleb128 0x5
 3217 01a8 00       		.byte	0
 3218 01a9 03       		.uleb128 0x3
 3219 01aa 0E       		.uleb128 0xe
 3220 01ab 3A       		.uleb128 0x3a
 3221 01ac 0B       		.uleb128 0xb
 3222 01ad 3B       		.uleb128 0x3b
 3223 01ae 05       		.uleb128 0x5
 3224 01af 49       		.uleb128 0x49
 3225 01b0 13       		.uleb128 0x13
ARM GAS  /tmp/ccKLeSvd.s 			page 74


 3226 01b1 02       		.uleb128 0x2
 3227 01b2 18       		.uleb128 0x18
 3228 01b3 00       		.byte	0
 3229 01b4 00       		.byte	0
 3230 01b5 23       		.uleb128 0x23
 3231 01b6 34       		.uleb128 0x34
 3232 01b7 00       		.byte	0
 3233 01b8 03       		.uleb128 0x3
 3234 01b9 0E       		.uleb128 0xe
 3235 01ba 3A       		.uleb128 0x3a
 3236 01bb 0B       		.uleb128 0xb
 3237 01bc 3B       		.uleb128 0x3b
 3238 01bd 05       		.uleb128 0x5
 3239 01be 49       		.uleb128 0x49
 3240 01bf 13       		.uleb128 0x13
 3241 01c0 02       		.uleb128 0x2
 3242 01c1 18       		.uleb128 0x18
 3243 01c2 00       		.byte	0
 3244 01c3 00       		.byte	0
 3245 01c4 24       		.uleb128 0x24
 3246 01c5 2E       		.uleb128 0x2e
 3247 01c6 01       		.byte	0x1
 3248 01c7 3F       		.uleb128 0x3f
 3249 01c8 19       		.uleb128 0x19
 3250 01c9 03       		.uleb128 0x3
 3251 01ca 0E       		.uleb128 0xe
 3252 01cb 3A       		.uleb128 0x3a
 3253 01cc 0B       		.uleb128 0xb
 3254 01cd 3B       		.uleb128 0x3b
 3255 01ce 05       		.uleb128 0x5
 3256 01cf 27       		.uleb128 0x27
 3257 01d0 19       		.uleb128 0x19
 3258 01d1 11       		.uleb128 0x11
 3259 01d2 01       		.uleb128 0x1
 3260 01d3 12       		.uleb128 0x12
 3261 01d4 06       		.uleb128 0x6
 3262 01d5 40       		.uleb128 0x40
 3263 01d6 18       		.uleb128 0x18
 3264 01d7 9642     		.uleb128 0x2116
 3265 01d9 19       		.uleb128 0x19
 3266 01da 01       		.uleb128 0x1
 3267 01db 13       		.uleb128 0x13
 3268 01dc 00       		.byte	0
 3269 01dd 00       		.byte	0
 3270 01de 25       		.uleb128 0x25
 3271 01df 2E       		.uleb128 0x2e
 3272 01e0 01       		.byte	0x1
 3273 01e1 3F       		.uleb128 0x3f
 3274 01e2 19       		.uleb128 0x19
 3275 01e3 03       		.uleb128 0x3
 3276 01e4 0E       		.uleb128 0xe
 3277 01e5 3A       		.uleb128 0x3a
 3278 01e6 0B       		.uleb128 0xb
 3279 01e7 3B       		.uleb128 0x3b
 3280 01e8 05       		.uleb128 0x5
 3281 01e9 27       		.uleb128 0x27
 3282 01ea 19       		.uleb128 0x19
ARM GAS  /tmp/ccKLeSvd.s 			page 75


 3283 01eb 49       		.uleb128 0x49
 3284 01ec 13       		.uleb128 0x13
 3285 01ed 11       		.uleb128 0x11
 3286 01ee 01       		.uleb128 0x1
 3287 01ef 12       		.uleb128 0x12
 3288 01f0 06       		.uleb128 0x6
 3289 01f1 40       		.uleb128 0x40
 3290 01f2 18       		.uleb128 0x18
 3291 01f3 9642     		.uleb128 0x2116
 3292 01f5 19       		.uleb128 0x19
 3293 01f6 01       		.uleb128 0x1
 3294 01f7 13       		.uleb128 0x13
 3295 01f8 00       		.byte	0
 3296 01f9 00       		.byte	0
 3297 01fa 26       		.uleb128 0x26
 3298 01fb 2E       		.uleb128 0x2e
 3299 01fc 01       		.byte	0x1
 3300 01fd 3F       		.uleb128 0x3f
 3301 01fe 19       		.uleb128 0x19
 3302 01ff 03       		.uleb128 0x3
 3303 0200 0E       		.uleb128 0xe
 3304 0201 3A       		.uleb128 0x3a
 3305 0202 0B       		.uleb128 0xb
 3306 0203 3B       		.uleb128 0x3b
 3307 0204 05       		.uleb128 0x5
 3308 0205 27       		.uleb128 0x27
 3309 0206 19       		.uleb128 0x19
 3310 0207 49       		.uleb128 0x49
 3311 0208 13       		.uleb128 0x13
 3312 0209 11       		.uleb128 0x11
 3313 020a 01       		.uleb128 0x1
 3314 020b 12       		.uleb128 0x12
 3315 020c 06       		.uleb128 0x6
 3316 020d 40       		.uleb128 0x40
 3317 020e 18       		.uleb128 0x18
 3318 020f 9742     		.uleb128 0x2117
 3319 0211 19       		.uleb128 0x19
 3320 0212 01       		.uleb128 0x1
 3321 0213 13       		.uleb128 0x13
 3322 0214 00       		.byte	0
 3323 0215 00       		.byte	0
 3324 0216 27       		.uleb128 0x27
 3325 0217 1D       		.uleb128 0x1d
 3326 0218 01       		.byte	0x1
 3327 0219 31       		.uleb128 0x31
 3328 021a 13       		.uleb128 0x13
 3329 021b 11       		.uleb128 0x11
 3330 021c 01       		.uleb128 0x1
 3331 021d 12       		.uleb128 0x12
 3332 021e 06       		.uleb128 0x6
 3333 021f 58       		.uleb128 0x58
 3334 0220 0B       		.uleb128 0xb
 3335 0221 59       		.uleb128 0x59
 3336 0222 05       		.uleb128 0x5
 3337 0223 01       		.uleb128 0x1
 3338 0224 13       		.uleb128 0x13
 3339 0225 00       		.byte	0
ARM GAS  /tmp/ccKLeSvd.s 			page 76


 3340 0226 00       		.byte	0
 3341 0227 28       		.uleb128 0x28
 3342 0228 0B       		.uleb128 0xb
 3343 0229 01       		.byte	0x1
 3344 022a 11       		.uleb128 0x11
 3345 022b 01       		.uleb128 0x1
 3346 022c 12       		.uleb128 0x12
 3347 022d 06       		.uleb128 0x6
 3348 022e 00       		.byte	0
 3349 022f 00       		.byte	0
 3350 0230 29       		.uleb128 0x29
 3351 0231 34       		.uleb128 0x34
 3352 0232 00       		.byte	0
 3353 0233 31       		.uleb128 0x31
 3354 0234 13       		.uleb128 0x13
 3355 0235 02       		.uleb128 0x2
 3356 0236 18       		.uleb128 0x18
 3357 0237 00       		.byte	0
 3358 0238 00       		.byte	0
 3359 0239 2A       		.uleb128 0x2a
 3360 023a 1D       		.uleb128 0x1d
 3361 023b 01       		.byte	0x1
 3362 023c 31       		.uleb128 0x31
 3363 023d 13       		.uleb128 0x13
 3364 023e 11       		.uleb128 0x11
 3365 023f 01       		.uleb128 0x1
 3366 0240 12       		.uleb128 0x12
 3367 0241 06       		.uleb128 0x6
 3368 0242 58       		.uleb128 0x58
 3369 0243 0B       		.uleb128 0xb
 3370 0244 59       		.uleb128 0x59
 3371 0245 05       		.uleb128 0x5
 3372 0246 00       		.byte	0
 3373 0247 00       		.byte	0
 3374 0248 2B       		.uleb128 0x2b
 3375 0249 05       		.uleb128 0x5
 3376 024a 00       		.byte	0
 3377 024b 31       		.uleb128 0x31
 3378 024c 13       		.uleb128 0x13
 3379 024d 02       		.uleb128 0x2
 3380 024e 18       		.uleb128 0x18
 3381 024f 00       		.byte	0
 3382 0250 00       		.byte	0
 3383 0251 2C       		.uleb128 0x2c
 3384 0252 2E       		.uleb128 0x2e
 3385 0253 01       		.byte	0x1
 3386 0254 3F       		.uleb128 0x3f
 3387 0255 19       		.uleb128 0x19
 3388 0256 03       		.uleb128 0x3
 3389 0257 0E       		.uleb128 0xe
 3390 0258 3A       		.uleb128 0x3a
 3391 0259 0B       		.uleb128 0xb
 3392 025a 3B       		.uleb128 0x3b
 3393 025b 0B       		.uleb128 0xb
 3394 025c 27       		.uleb128 0x27
 3395 025d 19       		.uleb128 0x19
 3396 025e 49       		.uleb128 0x49
ARM GAS  /tmp/ccKLeSvd.s 			page 77


 3397 025f 13       		.uleb128 0x13
 3398 0260 11       		.uleb128 0x11
 3399 0261 01       		.uleb128 0x1
 3400 0262 12       		.uleb128 0x12
 3401 0263 06       		.uleb128 0x6
 3402 0264 40       		.uleb128 0x40
 3403 0265 18       		.uleb128 0x18
 3404 0266 9642     		.uleb128 0x2116
 3405 0268 19       		.uleb128 0x19
 3406 0269 01       		.uleb128 0x1
 3407 026a 13       		.uleb128 0x13
 3408 026b 00       		.byte	0
 3409 026c 00       		.byte	0
 3410 026d 2D       		.uleb128 0x2d
 3411 026e 05       		.uleb128 0x5
 3412 026f 00       		.byte	0
 3413 0270 03       		.uleb128 0x3
 3414 0271 0E       		.uleb128 0xe
 3415 0272 3A       		.uleb128 0x3a
 3416 0273 0B       		.uleb128 0xb
 3417 0274 3B       		.uleb128 0x3b
 3418 0275 0B       		.uleb128 0xb
 3419 0276 49       		.uleb128 0x49
 3420 0277 13       		.uleb128 0x13
 3421 0278 02       		.uleb128 0x2
 3422 0279 18       		.uleb128 0x18
 3423 027a 00       		.byte	0
 3424 027b 00       		.byte	0
 3425 027c 2E       		.uleb128 0x2e
 3426 027d 34       		.uleb128 0x34
 3427 027e 00       		.byte	0
 3428 027f 03       		.uleb128 0x3
 3429 0280 0E       		.uleb128 0xe
 3430 0281 3A       		.uleb128 0x3a
 3431 0282 0B       		.uleb128 0xb
 3432 0283 3B       		.uleb128 0x3b
 3433 0284 0B       		.uleb128 0xb
 3434 0285 49       		.uleb128 0x49
 3435 0286 13       		.uleb128 0x13
 3436 0287 02       		.uleb128 0x2
 3437 0288 18       		.uleb128 0x18
 3438 0289 00       		.byte	0
 3439 028a 00       		.byte	0
 3440 028b 2F       		.uleb128 0x2f
 3441 028c 2E       		.uleb128 0x2e
 3442 028d 01       		.byte	0x1
 3443 028e 03       		.uleb128 0x3
 3444 028f 0E       		.uleb128 0xe
 3445 0290 3A       		.uleb128 0x3a
 3446 0291 0B       		.uleb128 0xb
 3447 0292 3B       		.uleb128 0x3b
 3448 0293 0B       		.uleb128 0xb
 3449 0294 27       		.uleb128 0x27
 3450 0295 19       		.uleb128 0x19
 3451 0296 20       		.uleb128 0x20
 3452 0297 0B       		.uleb128 0xb
 3453 0298 01       		.uleb128 0x1
ARM GAS  /tmp/ccKLeSvd.s 			page 78


 3454 0299 13       		.uleb128 0x13
 3455 029a 00       		.byte	0
 3456 029b 00       		.byte	0
 3457 029c 30       		.uleb128 0x30
 3458 029d 05       		.uleb128 0x5
 3459 029e 00       		.byte	0
 3460 029f 03       		.uleb128 0x3
 3461 02a0 0E       		.uleb128 0xe
 3462 02a1 3A       		.uleb128 0x3a
 3463 02a2 0B       		.uleb128 0xb
 3464 02a3 3B       		.uleb128 0x3b
 3465 02a4 0B       		.uleb128 0xb
 3466 02a5 49       		.uleb128 0x49
 3467 02a6 13       		.uleb128 0x13
 3468 02a7 00       		.byte	0
 3469 02a8 00       		.byte	0
 3470 02a9 31       		.uleb128 0x31
 3471 02aa 2E       		.uleb128 0x2e
 3472 02ab 01       		.byte	0x1
 3473 02ac 03       		.uleb128 0x3
 3474 02ad 0E       		.uleb128 0xe
 3475 02ae 3A       		.uleb128 0x3a
 3476 02af 0B       		.uleb128 0xb
 3477 02b0 3B       		.uleb128 0x3b
 3478 02b1 0B       		.uleb128 0xb
 3479 02b2 27       		.uleb128 0x27
 3480 02b3 19       		.uleb128 0x19
 3481 02b4 49       		.uleb128 0x49
 3482 02b5 13       		.uleb128 0x13
 3483 02b6 20       		.uleb128 0x20
 3484 02b7 0B       		.uleb128 0xb
 3485 02b8 00       		.byte	0
 3486 02b9 00       		.byte	0
 3487 02ba 32       		.uleb128 0x32
 3488 02bb 34       		.uleb128 0x34
 3489 02bc 00       		.byte	0
 3490 02bd 03       		.uleb128 0x3
 3491 02be 0E       		.uleb128 0xe
 3492 02bf 3A       		.uleb128 0x3a
 3493 02c0 0B       		.uleb128 0xb
 3494 02c1 3B       		.uleb128 0x3b
 3495 02c2 0B       		.uleb128 0xb
 3496 02c3 49       		.uleb128 0x49
 3497 02c4 13       		.uleb128 0x13
 3498 02c5 00       		.byte	0
 3499 02c6 00       		.byte	0
 3500 02c7 00       		.byte	0
 3501              		.section	.debug_aranges,"",%progbits
 3502 0000 1C000000 		.4byte	0x1c
 3503 0004 0200     		.2byte	0x2
 3504 0006 00000000 		.4byte	.Ldebug_info0
 3505 000a 04       		.byte	0x4
 3506 000b 00       		.byte	0
 3507 000c 0000     		.2byte	0
 3508 000e 0000     		.2byte	0
 3509 0010 00000000 		.4byte	.Ltext0
 3510 0014 3C040000 		.4byte	.Letext0-.Ltext0
ARM GAS  /tmp/ccKLeSvd.s 			page 79


 3511 0018 00000000 		.4byte	0
 3512 001c 00000000 		.4byte	0
 3513              		.section	.debug_line,"",%progbits
 3514              	.Ldebug_line0:
 3515 0000 41020000 		.section	.debug_str,"MS",%progbits,1
 3515      02006401 
 3515      00000201 
 3515      FB0E0D00 
 3515      01010101 
 3516              	.LASF142:
 3517 0000 78546173 		.ascii	"xTasksWaitingForBits\000"
 3517      6B735761 
 3517      6974696E 
 3517      67466F72 
 3517      42697473 
 3518              	.LASF132:
 3519 0015 75784E75 		.ascii	"uxNumberOfItems\000"
 3519      6D626572 
 3519      4F664974 
 3519      656D7300 
 3520              	.LASF183:
 3521 0025 474E5520 		.ascii	"GNU C99 6.3.1 20170620 -mthumb -mcpu=cortex-m3 -g -"
 3521      43393920 
 3521      362E332E 
 3521      31203230 
 3521      31373036 
 3522 0058 7374643D 		.ascii	"std=c99 -fno-common\000"
 3522      63393920 
 3522      2D666E6F 
 3522      2D636F6D 
 3522      6D6F6E00 
 3523              	.LASF38:
 3524 006c 5F6F6E5F 		.ascii	"_on_exit_args\000"
 3524      65786974 
 3524      5F617267 
 3524      7300
 3525              	.LASF153:
 3526 007a 76457665 		.ascii	"vEventGroupDelete\000"
 3526      6E744772 
 3526      6F757044 
 3526      656C6574 
 3526      6500
 3527              	.LASF105:
 3528 008c 5F776374 		.ascii	"_wctomb_state\000"
 3528      6F6D625F 
 3528      73746174 
 3528      6500
 3529              	.LASF102:
 3530 009a 5F723438 		.ascii	"_r48\000"
 3530      00
 3531              	.LASF144:
 3532 009f 4576656E 		.ascii	"EventGroup_t\000"
 3532      7447726F 
 3532      75705F74 
 3532      00
 3533              	.LASF107:
 3534 00ac 5F736967 		.ascii	"_signal_buf\000"
ARM GAS  /tmp/ccKLeSvd.s 			page 80


 3534      6E616C5F 
 3534      62756600 
 3535              	.LASF0:
 3536 00b8 756E7369 		.ascii	"unsigned int\000"
 3536      676E6564 
 3536      20696E74 
 3536      00
 3537              	.LASF133:
 3538 00c5 7078496E 		.ascii	"pxIndex\000"
 3538      64657800 
 3539              	.LASF149:
 3540 00cd 756C4269 		.ascii	"ulBitsToClear\000"
 3540      7473546F 
 3540      436C6561 
 3540      7200
 3541              	.LASF52:
 3542 00db 5F6C6266 		.ascii	"_lbfsize\000"
 3542      73697A65 
 3542      00
 3543              	.LASF50:
 3544 00e4 5F666C61 		.ascii	"_flags\000"
 3544      677300
 3545              	.LASF125:
 3546 00eb 784C4953 		.ascii	"xLIST_ITEM\000"
 3546      545F4954 
 3546      454D00
 3547              	.LASF67:
 3548 00f6 5F657272 		.ascii	"_errno\000"
 3548      6E6F00
 3549              	.LASF10:
 3550 00fd 5F4C4F43 		.ascii	"_LOCK_RECURSIVE_T\000"
 3550      4B5F5245 
 3550      43555253 
 3550      4956455F 
 3550      5400
 3551              	.LASF54:
 3552 010f 5F726561 		.ascii	"_read\000"
 3552      6400
 3553              	.LASF109:
 3554 0115 5F6D6272 		.ascii	"_mbrlen_state\000"
 3554      6C656E5F 
 3554      73746174 
 3554      6500
 3555              	.LASF179:
 3556 0123 76506F72 		.ascii	"vPortSetBASEPRI\000"
 3556      74536574 
 3556      42415345 
 3556      50524900 
 3557              	.LASF160:
 3558 0133 70784C69 		.ascii	"pxListEnd\000"
 3558      7374456E 
 3558      6400
 3559              	.LASF69:
 3560 013d 5F737464 		.ascii	"_stdout\000"
 3560      6F757400 
 3561              	.LASF12:
 3562 0145 5F66706F 		.ascii	"_fpos_t\000"
ARM GAS  /tmp/ccKLeSvd.s 			page 81


 3562      735F7400 
 3563              	.LASF45:
 3564 014d 5F666E73 		.ascii	"_fns\000"
 3564      00
 3565              	.LASF53:
 3566 0152 5F636F6F 		.ascii	"_cookie\000"
 3566      6B696500 
 3567              	.LASF169:
 3568 015a 75785265 		.ascii	"uxReturn\000"
 3568      7475726E 
 3568      00
 3569              	.LASF177:
 3570 0163 75784F72 		.ascii	"uxOriginalBitValue\000"
 3570      6967696E 
 3570      616C4269 
 3570      7456616C 
 3570      756500
 3571              	.LASF27:
 3572 0176 5F426967 		.ascii	"_Bigint\000"
 3572      696E7400 
 3573              	.LASF35:
 3574 017e 5F5F746D 		.ascii	"__tm_wday\000"
 3574      5F776461 
 3574      7900
 3575              	.LASF77:
 3576 0188 5F726573 		.ascii	"_result\000"
 3576      756C7400 
 3577              	.LASF168:
 3578 0190 75785361 		.ascii	"uxSavedInterruptStatus\000"
 3578      76656449 
 3578      6E746572 
 3578      72757074 
 3578      53746174 
 3579              	.LASF120:
 3580 01a7 75696E74 		.ascii	"uint32_t\000"
 3580      33325F74 
 3580      00
 3581              	.LASF31:
 3582 01b0 5F5F746D 		.ascii	"__tm_hour\000"
 3582      5F686F75 
 3582      7200
 3583              	.LASF68:
 3584 01ba 5F737464 		.ascii	"_stdin\000"
 3584      696E00
 3585              	.LASF181:
 3586 01c1 756C4F72 		.ascii	"ulOriginalBASEPRI\000"
 3586      6967696E 
 3586      616C4241 
 3586      53455052 
 3586      4900
 3587              	.LASF17:
 3588 01d3 5F5F636F 		.ascii	"__count\000"
 3588      756E7400 
 3589              	.LASF30:
 3590 01db 5F5F746D 		.ascii	"__tm_min\000"
 3590      5F6D696E 
 3590      00
ARM GAS  /tmp/ccKLeSvd.s 			page 82


 3591              	.LASF118:
 3592 01e4 5F696D70 		.ascii	"_impure_ptr\000"
 3592      7572655F 
 3592      70747200 
 3593              	.LASF115:
 3594 01f0 5F6E6578 		.ascii	"_nextf\000"
 3594      746600
 3595              	.LASF92:
 3596 01f7 5F72616E 		.ascii	"_rand48\000"
 3596      64343800 
 3597              	.LASF178:
 3598 01ff 78457665 		.ascii	"xEventGroupCreate\000"
 3598      6E744772 
 3598      6F757043 
 3598      72656174 
 3598      6500
 3599              	.LASF78:
 3600 0211 5F726573 		.ascii	"_result_k\000"
 3600      756C745F 
 3600      6B00
 3601              	.LASF8:
 3602 021b 6C6F6E67 		.ascii	"long long unsigned int\000"
 3602      206C6F6E 
 3602      6720756E 
 3602      7369676E 
 3602      65642069 
 3603              	.LASF98:
 3604 0232 5F617363 		.ascii	"_asctime_buf\000"
 3604      74696D65 
 3604      5F627566 
 3604      00
 3605              	.LASF49:
 3606 023f 5F5F7346 		.ascii	"__sFILE\000"
 3606      494C4500 
 3607              	.LASF26:
 3608 0247 5F776473 		.ascii	"_wds\000"
 3608      00
 3609              	.LASF128:
 3610 024c 70785072 		.ascii	"pxPrevious\000"
 3610      6576696F 
 3610      757300
 3611              	.LASF88:
 3612 0257 5F5F4649 		.ascii	"__FILE\000"
 3612      4C4500
 3613              	.LASF61:
 3614 025e 5F6F6666 		.ascii	"_offset\000"
 3614      73657400 
 3615              	.LASF72:
 3616 0266 5F656D65 		.ascii	"_emergency\000"
 3616      7267656E 
 3616      637900
 3617              	.LASF163:
 3618 0271 75784269 		.ascii	"uxBitsWaitedFor\000"
 3618      74735761 
 3618      69746564 
 3618      466F7200 
 3619              	.LASF175:
ARM GAS  /tmp/ccKLeSvd.s 			page 83


 3620 0281 7854696D 		.ascii	"xTimeoutOccurred\000"
 3620      656F7574 
 3620      4F636375 
 3620      72726564 
 3620      00
 3621              	.LASF29:
 3622 0292 5F5F746D 		.ascii	"__tm_sec\000"
 3622      5F736563 
 3622      00
 3623              	.LASF154:
 3624 029b 78457665 		.ascii	"xEventGroup\000"
 3624      6E744772 
 3624      6F757000 
 3625              	.LASF147:
 3626 02a7 78576169 		.ascii	"xWaitForAllBits\000"
 3626      74466F72 
 3626      416C6C42 
 3626      69747300 
 3627              	.LASF36:
 3628 02b7 5F5F746D 		.ascii	"__tm_yday\000"
 3628      5F796461 
 3628      7900
 3629              	.LASF71:
 3630 02c1 5F696E63 		.ascii	"_inc\000"
 3630      00
 3631              	.LASF44:
 3632 02c6 5F696E64 		.ascii	"_ind\000"
 3632      00
 3633              	.LASF167:
 3634 02cb 78457665 		.ascii	"xEventGroupGetBitsFromISR\000"
 3634      6E744772 
 3634      6F757047 
 3634      65744269 
 3634      74734672 
 3635              	.LASF131:
 3636 02e5 784C4953 		.ascii	"xLIST\000"
 3636      5400
 3637              	.LASF162:
 3638 02eb 75784269 		.ascii	"uxBitsToClear\000"
 3638      7473546F 
 3638      436C6561 
 3638      7200
 3639              	.LASF136:
 3640 02f9 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 3640      495F4C49 
 3640      53545F49 
 3640      54454D00 
 3641              	.LASF23:
 3642 0309 5F6E6578 		.ascii	"_next\000"
 3642      7400
 3643              	.LASF111:
 3644 030f 5F6D6273 		.ascii	"_mbsrtowcs_state\000"
 3644      72746F77 
 3644      63735F73 
 3644      74617465 
 3644      00
 3645              	.LASF166:
ARM GAS  /tmp/ccKLeSvd.s 			page 84


 3646 0320 78457665 		.ascii	"xEventGroupSetBits\000"
 3646      6E744772 
 3646      6F757053 
 3646      65744269 
 3646      747300
 3647              	.LASF156:
 3648 0333 70784576 		.ascii	"pxEventBits\000"
 3648      656E7442 
 3648      69747300 
 3649              	.LASF18:
 3650 033f 5F5F7661 		.ascii	"__value\000"
 3650      6C756500 
 3651              	.LASF79:
 3652 0347 5F703573 		.ascii	"_p5s\000"
 3652      00
 3653              	.LASF148:
 3654 034c 70764576 		.ascii	"pvEventGroup\000"
 3654      656E7447 
 3654      726F7570 
 3654      00
 3655              	.LASF113:
 3656 0359 5F776373 		.ascii	"_wcsrtombs_state\000"
 3656      72746F6D 
 3656      62735F73 
 3656      74617465 
 3656      00
 3657              	.LASF103:
 3658 036a 5F6D626C 		.ascii	"_mblen_state\000"
 3658      656E5F73 
 3658      74617465 
 3658      00
 3659              	.LASF21:
 3660 0377 63686172 		.ascii	"char\000"
 3660      00
 3661              	.LASF32:
 3662 037c 5F5F746D 		.ascii	"__tm_mday\000"
 3662      5F6D6461 
 3662      7900
 3663              	.LASF135:
 3664 0386 4C697374 		.ascii	"ListItem_t\000"
 3664      4974656D 
 3664      5F7400
 3665              	.LASF85:
 3666 0391 5F736967 		.ascii	"_sig_func\000"
 3666      5F66756E 
 3666      6300
 3667              	.LASF110:
 3668 039b 5F6D6272 		.ascii	"_mbrtowc_state\000"
 3668      746F7763 
 3668      5F737461 
 3668      746500
 3669              	.LASF84:
 3670 03aa 5F617465 		.ascii	"_atexit0\000"
 3670      78697430 
 3670      00
 3671              	.LASF182:
 3672 03b3 756C4E65 		.ascii	"ulNewBASEPRI\000"
ARM GAS  /tmp/ccKLeSvd.s 			page 85


 3672      77424153 
 3672      45505249 
 3672      00
 3673              	.LASF123:
 3674 03c0 55426173 		.ascii	"UBaseType_t\000"
 3674      65547970 
 3674      655F7400 
 3675              	.LASF134:
 3676 03cc 784C6973 		.ascii	"xListEnd\000"
 3676      74456E64 
 3676      00
 3677              	.LASF20:
 3678 03d5 5F666C6F 		.ascii	"_flock_t\000"
 3678      636B5F74 
 3678      00
 3679              	.LASF137:
 3680 03de 4D696E69 		.ascii	"MiniListItem_t\000"
 3680      4C697374 
 3680      4974656D 
 3680      5F7400
 3681              	.LASF14:
 3682 03ed 5F5F7763 		.ascii	"__wch\000"
 3682      6800
 3683              	.LASF91:
 3684 03f3 5F696F62 		.ascii	"_iobs\000"
 3684      7300
 3685              	.LASF140:
 3686 03f9 4576656E 		.ascii	"EventGroupDef_t\000"
 3686      7447726F 
 3686      75704465 
 3686      665F7400 
 3687              	.LASF57:
 3688 0409 5F636C6F 		.ascii	"_close\000"
 3688      736500
 3689              	.LASF75:
 3690 0410 5F5F7364 		.ascii	"__sdidinit\000"
 3690      6964696E 
 3690      697400
 3691              	.LASF159:
 3692 041b 70784C69 		.ascii	"pxListItem\000"
 3692      73744974 
 3692      656D00
 3693              	.LASF180:
 3694 0426 756C506F 		.ascii	"ulPortRaiseBASEPRI\000"
 3694      72745261 
 3694      69736542 
 3694      41534550 
 3694      524900
 3695              	.LASF185:
 3696 0439 2F686F6D 		.ascii	"/home/sls/workspace/stm32f103c8-blink\000"
 3696      652F736C 
 3696      732F776F 
 3696      726B7370 
 3696      6163652F 
 3697              	.LASF100:
 3698 045f 5F67616D 		.ascii	"_gamma_signgam\000"
 3698      6D615F73 
ARM GAS  /tmp/ccKLeSvd.s 			page 86


 3698      69676E67 
 3698      616D00
 3699              	.LASF7:
 3700 046e 6C6F6E67 		.ascii	"long long int\000"
 3700      206C6F6E 
 3700      6720696E 
 3700      7400
 3701              	.LASF47:
 3702 047c 5F626173 		.ascii	"_base\000"
 3702      6500
 3703              	.LASF80:
 3704 0482 5F667265 		.ascii	"_freelist\000"
 3704      656C6973 
 3704      7400
 3705              	.LASF94:
 3706 048c 5F6D756C 		.ascii	"_mult\000"
 3706      7400
 3707              	.LASF22:
 3708 0492 5F5F554C 		.ascii	"__ULong\000"
 3708      6F6E6700 
 3709              	.LASF171:
 3710 049a 78457665 		.ascii	"xEventGroupWaitBits\000"
 3710      6E744772 
 3710      6F757057 
 3710      61697442 
 3710      69747300 
 3711              	.LASF151:
 3712 04ae 76457665 		.ascii	"vEventGroupSetBitsCallback\000"
 3712      6E744772 
 3712      6F757053 
 3712      65744269 
 3712      74734361 
 3713              	.LASF112:
 3714 04c9 5F776372 		.ascii	"_wcrtomb_state\000"
 3714      746F6D62 
 3714      5F737461 
 3714      746500
 3715              	.LASF122:
 3716 04d8 42617365 		.ascii	"BaseType_t\000"
 3716      54797065 
 3716      5F7400
 3717              	.LASF150:
 3718 04e3 76457665 		.ascii	"vEventGroupClearBitsCallback\000"
 3718      6E744772 
 3718      6F757043 
 3718      6C656172 
 3718      42697473 
 3719              	.LASF51:
 3720 0500 5F66696C 		.ascii	"_file\000"
 3720      6500
 3721              	.LASF127:
 3722 0506 70784E65 		.ascii	"pxNext\000"
 3722      787400
 3723              	.LASF76:
 3724 050d 5F5F636C 		.ascii	"__cleanup\000"
 3724      65616E75 
 3724      7000
ARM GAS  /tmp/ccKLeSvd.s 			page 87


 3725              	.LASF19:
 3726 0517 5F6D6273 		.ascii	"_mbstate_t\000"
 3726      74617465 
 3726      5F7400
 3727              	.LASF141:
 3728 0522 75784576 		.ascii	"uxEventBits\000"
 3728      656E7442 
 3728      69747300 
 3729              	.LASF37:
 3730 052e 5F5F746D 		.ascii	"__tm_isdst\000"
 3730      5F697364 
 3730      737400
 3731              	.LASF187:
 3732 0539 756C4E65 		.ascii	"ulNewMaskValue\000"
 3732      774D6173 
 3732      6B56616C 
 3732      756500
 3733              	.LASF164:
 3734 0548 7578436F 		.ascii	"uxControlBits\000"
 3734      6E74726F 
 3734      6C426974 
 3734      7300
 3735              	.LASF114:
 3736 0556 5F685F65 		.ascii	"_h_errno\000"
 3736      72726E6F 
 3736      00
 3737              	.LASF155:
 3738 055f 78576169 		.ascii	"xWaitConditionMet\000"
 3738      74436F6E 
 3738      64697469 
 3738      6F6E4D65 
 3738      7400
 3739              	.LASF138:
 3740 0571 4C697374 		.ascii	"List_t\000"
 3740      5F7400
 3741              	.LASF124:
 3742 0578 5469636B 		.ascii	"TickType_t\000"
 3742      54797065 
 3742      5F7400
 3743              	.LASF176:
 3744 0583 78457665 		.ascii	"xEventGroupSync\000"
 3744      6E744772 
 3744      6F757053 
 3744      796E6300 
 3745              	.LASF186:
 3746 0593 70727654 		.ascii	"prvTestWaitCondition\000"
 3746      65737457 
 3746      61697443 
 3746      6F6E6469 
 3746      74696F6E 
 3747              	.LASF33:
 3748 05a8 5F5F746D 		.ascii	"__tm_mon\000"
 3748      5F6D6F6E 
 3748      00
 3749              	.LASF121:
 3750 05b1 53797374 		.ascii	"SystemCoreClock\000"
 3750      656D436F 
ARM GAS  /tmp/ccKLeSvd.s 			page 88


 3750      7265436C 
 3750      6F636B00 
 3751              	.LASF55:
 3752 05c1 5F777269 		.ascii	"_write\000"
 3752      746500
 3753              	.LASF130:
 3754 05c8 7076436F 		.ascii	"pvContainer\000"
 3754      6E746169 
 3754      6E657200 
 3755              	.LASF43:
 3756 05d4 5F617465 		.ascii	"_atexit\000"
 3756      78697400 
 3757              	.LASF64:
 3758 05dc 5F6D6273 		.ascii	"_mbstate\000"
 3758      74617465 
 3758      00
 3759              	.LASF145:
 3760 05e5 75784375 		.ascii	"uxCurrentEventBits\000"
 3760      7272656E 
 3760      74457665 
 3760      6E744269 
 3760      747300
 3761              	.LASF3:
 3762 05f8 73686F72 		.ascii	"short int\000"
 3762      7420696E 
 3762      7400
 3763              	.LASF126:
 3764 0602 78497465 		.ascii	"xItemValue\000"
 3764      6D56616C 
 3764      756500
 3765              	.LASF5:
 3766 060d 6C6F6E67 		.ascii	"long int\000"
 3766      20696E74 
 3766      00
 3767              	.LASF157:
 3768 0616 70785461 		.ascii	"pxTasksWaitingForBits\000"
 3768      736B7357 
 3768      61697469 
 3768      6E67466F 
 3768      72426974 
 3769              	.LASF170:
 3770 062c 78457665 		.ascii	"xEventGroupClearBits\000"
 3770      6E744772 
 3770      6F757043 
 3770      6C656172 
 3770      42697473 
 3771              	.LASF87:
 3772 0641 5F5F7366 		.ascii	"__sf\000"
 3772      00
 3773              	.LASF25:
 3774 0646 5F736967 		.ascii	"_sign\000"
 3774      6E00
 3775              	.LASF74:
 3776 064c 5F637572 		.ascii	"_current_locale\000"
 3776      72656E74 
 3776      5F6C6F63 
 3776      616C6500 
ARM GAS  /tmp/ccKLeSvd.s 			page 89


 3777              	.LASF62:
 3778 065c 5F646174 		.ascii	"_data\000"
 3778      6100
 3779              	.LASF15:
 3780 0662 5F5F7763 		.ascii	"__wchb\000"
 3780      686200
 3781              	.LASF119:
 3782 0669 5F676C6F 		.ascii	"_global_impure_ptr\000"
 3782      62616C5F 
 3782      696D7075 
 3782      72655F70 
 3782      747200
 3783              	.LASF34:
 3784 067c 5F5F746D 		.ascii	"__tm_year\000"
 3784      5F796561 
 3784      7200
 3785              	.LASF99:
 3786 0686 5F6C6F63 		.ascii	"_localtime_buf\000"
 3786      616C7469 
 3786      6D655F62 
 3786      756600
 3787              	.LASF117:
 3788 0695 5F756E75 		.ascii	"_unused\000"
 3788      73656400 
 3789              	.LASF83:
 3790 069d 5F6E6577 		.ascii	"_new\000"
 3790      00
 3791              	.LASF81:
 3792 06a2 5F637674 		.ascii	"_cvtlen\000"
 3792      6C656E00 
 3793              	.LASF24:
 3794 06aa 5F6D6178 		.ascii	"_maxwds\000"
 3794      77647300 
 3795              	.LASF106:
 3796 06b2 5F6C3634 		.ascii	"_l64a_buf\000"
 3796      615F6275 
 3796      6600
 3797              	.LASF73:
 3798 06bc 5F637572 		.ascii	"_current_category\000"
 3798      72656E74 
 3798      5F636174 
 3798      65676F72 
 3798      7900
 3799              	.LASF143:
 3800 06ce 4576656E 		.ascii	"EventBits_t\000"
 3800      74426974 
 3800      735F7400 
 3801              	.LASF60:
 3802 06da 5F626C6B 		.ascii	"_blksize\000"
 3802      73697A65 
 3802      00
 3803              	.LASF28:
 3804 06e3 5F5F746D 		.ascii	"__tm\000"
 3804      00
 3805              	.LASF63:
 3806 06e8 5F6C6F63 		.ascii	"_lock\000"
 3806      6B00
ARM GAS  /tmp/ccKLeSvd.s 			page 90


 3807              	.LASF158:
 3808 06ee 75784269 		.ascii	"uxBitsToSet\000"
 3808      7473546F 
 3808      53657400 
 3809              	.LASF16:
 3810 06fa 73697A65 		.ascii	"sizetype\000"
 3810      74797065 
 3810      00
 3811              	.LASF6:
 3812 0703 6C6F6E67 		.ascii	"long unsigned int\000"
 3812      20756E73 
 3812      69676E65 
 3812      6420696E 
 3812      7400
 3813              	.LASF146:
 3814 0715 75784269 		.ascii	"uxBitsToWaitFor\000"
 3814      7473546F 
 3814      57616974 
 3814      466F7200 
 3815              	.LASF90:
 3816 0725 5F6E696F 		.ascii	"_niobs\000"
 3816      627300
 3817              	.LASF13:
 3818 072c 77696E74 		.ascii	"wint_t\000"
 3818      5F7400
 3819              	.LASF40:
 3820 0733 5F64736F 		.ascii	"_dso_handle\000"
 3820      5F68616E 
 3820      646C6500 
 3821              	.LASF82:
 3822 073f 5F637674 		.ascii	"_cvtbuf\000"
 3822      62756600 
 3823              	.LASF2:
 3824 0747 756E7369 		.ascii	"unsigned char\000"
 3824      676E6564 
 3824      20636861 
 3824      7200
 3825              	.LASF165:
 3826 0755 784D6174 		.ascii	"xMatchFound\000"
 3826      6368466F 
 3826      756E6400 
 3827              	.LASF9:
 3828 0761 5F5F7569 		.ascii	"__uint32_t\000"
 3828      6E743332 
 3828      5F7400
 3829              	.LASF108:
 3830 076c 5F676574 		.ascii	"_getdate_err\000"
 3830      64617465 
 3830      5F657272 
 3830      00
 3831              	.LASF95:
 3832 0779 5F616464 		.ascii	"_add\000"
 3832      00
 3833              	.LASF173:
 3834 077e 78546963 		.ascii	"xTicksToWait\000"
 3834      6B73546F 
 3834      57616974 
ARM GAS  /tmp/ccKLeSvd.s 			page 91


 3834      00
 3835              	.LASF129:
 3836 078b 70764F77 		.ascii	"pvOwner\000"
 3836      6E657200 
 3837              	.LASF174:
 3838 0793 78416C72 		.ascii	"xAlreadyYielded\000"
 3838      65616479 
 3838      5969656C 
 3838      64656400 
 3839              	.LASF46:
 3840 07a3 5F5F7362 		.ascii	"__sbuf\000"
 3840      756600
 3841              	.LASF184:
 3842 07aa 46726565 		.ascii	"FreeRTOS/Source/event_groups.c\000"
 3842      52544F53 
 3842      2F536F75 
 3842      7263652F 
 3842      6576656E 
 3843              	.LASF89:
 3844 07c9 5F676C75 		.ascii	"_glue\000"
 3844      6500
 3845              	.LASF86:
 3846 07cf 5F5F7367 		.ascii	"__sglue\000"
 3846      6C756500 
 3847              	.LASF97:
 3848 07d7 5F737472 		.ascii	"_strtok_last\000"
 3848      746F6B5F 
 3848      6C617374 
 3848      00
 3849              	.LASF104:
 3850 07e4 5F6D6274 		.ascii	"_mbtowc_state\000"
 3850      6F77635F 
 3850      73746174 
 3850      6500
 3851              	.LASF39:
 3852 07f2 5F666E61 		.ascii	"_fnargs\000"
 3852      72677300 
 3853              	.LASF1:
 3854 07fa 7369676E 		.ascii	"signed char\000"
 3854      65642063 
 3854      68617200 
 3855              	.LASF66:
 3856 0806 5F726565 		.ascii	"_reent\000"
 3856      6E7400
 3857              	.LASF4:
 3858 080d 73686F72 		.ascii	"short unsigned int\000"
 3858      7420756E 
 3858      7369676E 
 3858      65642069 
 3858      6E7400
 3859              	.LASF41:
 3860 0820 5F666E74 		.ascii	"_fntypes\000"
 3860      79706573 
 3860      00
 3861              	.LASF48:
 3862 0829 5F73697A 		.ascii	"_size\000"
 3862      6500
ARM GAS  /tmp/ccKLeSvd.s 			page 92


 3863              	.LASF152:
 3864 082f 756C4269 		.ascii	"ulBitsToSet\000"
 3864      7473546F 
 3864      53657400 
 3865              	.LASF11:
 3866 083b 5F6F6666 		.ascii	"_off_t\000"
 3866      5F7400
 3867              	.LASF172:
 3868 0842 78436C65 		.ascii	"xClearOnExit\000"
 3868      61724F6E 
 3868      45786974 
 3868      00
 3869              	.LASF59:
 3870 084f 5F6E6275 		.ascii	"_nbuf\000"
 3870      6600
 3871              	.LASF96:
 3872 0855 5F756E75 		.ascii	"_unused_rand\000"
 3872      7365645F 
 3872      72616E64 
 3872      00
 3873              	.LASF65:
 3874 0862 5F666C61 		.ascii	"_flags2\000"
 3874      67733200 
 3875              	.LASF42:
 3876 086a 5F69735F 		.ascii	"_is_cxa\000"
 3876      63786100 
 3877              	.LASF161:
 3878 0872 70784C69 		.ascii	"pxList\000"
 3878      737400
 3879              	.LASF93:
 3880 0879 5F736565 		.ascii	"_seed\000"
 3880      6400
 3881              	.LASF101:
 3882 087f 5F72616E 		.ascii	"_rand_next\000"
 3882      645F6E65 
 3882      787400
 3883              	.LASF56:
 3884 088a 5F736565 		.ascii	"_seek\000"
 3884      6B00
 3885              	.LASF139:
 3886 0890 4576656E 		.ascii	"EventGroupHandle_t\000"
 3886      7447726F 
 3886      75704861 
 3886      6E646C65 
 3886      5F7400
 3887              	.LASF70:
 3888 08a3 5F737464 		.ascii	"_stderr\000"
 3888      65727200 
 3889              	.LASF116:
 3890 08ab 5F6E6D61 		.ascii	"_nmalloc\000"
 3890      6C6C6F63 
 3890      00
 3891              	.LASF58:
 3892 08b4 5F756275 		.ascii	"_ubuf\000"
 3892      6600
 3893              		.ident	"GCC: (15:6.3.1+svn253039-1build1) 6.3.1 20170620"
ARM GAS  /tmp/ccKLeSvd.s 			page 93


DEFINED SYMBOLS
                            *ABS*:0000000000000000 event_groups.c
     /tmp/ccKLeSvd.s:15     .text:0000000000000000 $t
     /tmp/ccKLeSvd.s:22     .text:0000000000000000 xEventGroupCreate
     /tmp/ccKLeSvd.s:75     .text:000000000000002e xEventGroupSync
     /tmp/ccKLeSvd.s:591    .text:00000000000002ac xEventGroupSetBits
     /tmp/ccKLeSvd.s:240    .text:000000000000011c $d
     /tmp/ccKLeSvd.s:244    .text:0000000000000120 $t
     /tmp/ccKLeSvd.s:251    .text:0000000000000120 xEventGroupWaitBits
     /tmp/ccKLeSvd.s:888    .text:00000000000003fa prvTestWaitCondition
     /tmp/ccKLeSvd.s:443    .text:0000000000000230 $d
     /tmp/ccKLeSvd.s:447    .text:0000000000000234 $t
     /tmp/ccKLeSvd.s:454    .text:0000000000000234 xEventGroupClearBits
     /tmp/ccKLeSvd.s:509    .text:0000000000000268 xEventGroupGetBitsFromISR
     /tmp/ccKLeSvd.s:751    .text:0000000000000386 vEventGroupDelete
     /tmp/ccKLeSvd.s:813    .text:00000000000003c6 vEventGroupSetBitsCallback
     /tmp/ccKLeSvd.s:851    .text:00000000000003e0 vEventGroupClearBitsCallback
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
pvPortMalloc
vListInitialise
vTaskSuspendAll
vTaskPlaceOnUnorderedEventList
xTaskResumeAll
uxTaskResetEventItemValue
vPortEnterCritical
vPortExitCritical
vTaskRemoveFromUnorderedEventList
vPortFree
