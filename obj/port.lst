ARM GAS  /tmp/ccYrce8v.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"port.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.data
  16              		.align	2
  17              		.type	uxCriticalNesting, %object
  18              		.size	uxCriticalNesting, 4
  19              	uxCriticalNesting:
  20 0000 AAAAAAAA 		.word	-1431655766
  21              		.text
  22              		.align	1
  23              		.global	pxPortInitialiseStack
  24              		.syntax unified
  25              		.thumb
  26              		.thumb_func
  27              		.fpu softvfp
  28              		.type	pxPortInitialiseStack, %function
  29              	pxPortInitialiseStack:
  30              	.LFB5:
  31              		.file 1 "FreeRTOS/Source/portable/GCC/ARM_CM3/port.c"
   1:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*
   2:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * FreeRTOS Kernel V10.3.1
   3:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  *
   5:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * the Software without restriction, including without limitation the rights to
   8:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * subject to the following conditions:
  11:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  *
  12:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * The above copyright notice and this permission notice shall be included in all
  13:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * copies or substantial portions of the Software.
  14:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  *
  15:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  *
  22:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * http://www.FreeRTOS.org
  23:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * http://aws.amazon.com/freertos
  24:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  *
  25:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * 1 tab == 4 spaces!
  26:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  */
ARM GAS  /tmp/ccYrce8v.s 			page 2


  27:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  28:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------
  29:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * Implementation of functions defined in portable.h for the ARM CM3 port.
  30:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  *----------------------------------------------------------*/
  31:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  32:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /* Scheduler includes. */
  33:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #include "FreeRTOS.h"
  34:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #include "task.h"
  35:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  36:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /* For backward compatibility, ensure configKERNEL_INTERRUPT_PRIORITY is
  37:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** defined.  The value should also ensure backward compatibility.
  38:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** FreeRTOS.org versions prior to V4.4.0 did not include this definition. */
  39:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #ifndef configKERNEL_INTERRUPT_PRIORITY
  40:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	#define configKERNEL_INTERRUPT_PRIORITY 255
  41:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #endif
  42:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  43:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #ifndef configSYSTICK_CLOCK_HZ
  44:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	#define configSYSTICK_CLOCK_HZ configCPU_CLOCK_HZ
  45:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* Ensure the SysTick is clocked at the same frequency as the core. */
  46:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 1UL << 2UL )
  47:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #else
  48:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* The way the SysTick is clocked is not modified in case it is not the same
  49:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	as the core. */
  50:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 0 )
  51:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #endif
  52:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  53:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /* Constants required to manipulate the core.  Registers first... */
  54:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_CTRL_REG			( * ( ( volatile uint32_t * ) 0xe000e010 ) )
  55:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_LOAD_REG			( * ( ( volatile uint32_t * ) 0xe000e014 ) )
  56:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_CURRENT_VALUE_REG	( * ( ( volatile uint32_t * ) 0xe000e018 ) )
  57:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSPRI2_REG				( * ( ( volatile uint32_t * ) 0xe000ed20 ) )
  58:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /* ...then bits in the registers. */
  59:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_INT_BIT			( 1UL << 1UL )
  60:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_ENABLE_BIT			( 1UL << 0UL )
  61:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_COUNT_FLAG_BIT		( 1UL << 16UL )
  62:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_PENDSVCLEAR_BIT 			( 1UL << 27UL )
  63:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_PEND_SYSTICK_CLEAR_BIT		( 1UL << 25UL )
  64:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  65:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_PENDSV_PRI					( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 16UL )
  66:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_PRI				( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 24UL )
  67:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  68:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /* Constants required to check the validity of an interrupt priority. */
  69:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portFIRST_USER_INTERRUPT_NUMBER		( 16 )
  70:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_IP_REGISTERS_OFFSET_16 	( 0xE000E3F0 )
  71:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portAIRCR_REG						( * ( ( volatile uint32_t * ) 0xE000ED0C ) )
  72:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portMAX_8_BIT_VALUE					( ( uint8_t ) 0xff )
  73:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portTOP_BIT_OF_BYTE					( ( uint8_t ) 0x80 )
  74:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portMAX_PRIGROUP_BITS				( ( uint8_t ) 7 )
  75:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portPRIORITY_GROUP_MASK				( 0x07UL << 8UL )
  76:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portPRIGROUP_SHIFT					( 8UL )
  77:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  78:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /* Masks off all bits but the VECTACTIVE bits in the ICSR register. */
  79:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portVECTACTIVE_MASK					( 0xFFUL )
  80:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  81:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /* Constants required to set up the initial stack. */
  82:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portINITIAL_XPSR					( 0x01000000UL )
  83:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
ARM GAS  /tmp/ccYrce8v.s 			page 3


  84:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /* The systick is a 24-bit counter. */
  85:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portMAX_24_BIT_NUMBER				( 0xffffffUL )
  86:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  87:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /* A fiddle factor to estimate the number of SysTick counts that would have
  88:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** occurred while the SysTick counter is stopped during tickless idle
  89:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** calculations. */
  90:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portMISSED_COUNTS_FACTOR			( 45UL )
  91:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  92:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /* For strict compliance with the Cortex-M spec the task start address should
  93:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** have bit-0 clear, as it is loaded into the PC on exit from an ISR. */
  94:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portSTART_ADDRESS_MASK				( ( StackType_t ) 0xfffffffeUL )
  95:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  96:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /* Let the user override the pre-loading of the initial LR with the address of
  97:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** prvTaskExitError() in case it messes up unwinding of the stack in the
  98:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** debugger. */
  99:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #ifdef configTASK_RETURN_ADDRESS
 100:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	#define portTASK_RETURN_ADDRESS	configTASK_RETURN_ADDRESS
 101:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #else
 102:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	#define portTASK_RETURN_ADDRESS	prvTaskExitError
 103:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #endif
 104:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 105:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*
 106:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * Setup the timer to generate the tick interrupts.  The implementation in this
 107:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * file is weak to allow application writers to change the timer used to
 108:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * generate the tick interrupt.
 109:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  */
 110:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** void vPortSetupTimerInterrupt( void );
 111:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 112:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*
 113:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * Exception handlers.
 114:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  */
 115:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** void xPortPendSVHandler( void ) __attribute__ (( naked ));
 116:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** void xPortSysTickHandler( void );
 117:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** void vPortSVCHandler( void ) __attribute__ (( naked ));
 118:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 119:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*
 120:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 121:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  */
 122:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** static void prvPortStartFirstTask( void ) __attribute__ (( naked ));
 123:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 124:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*
 125:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * Used to catch tasks that attempt to return from their implementing function.
 126:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  */
 127:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** static void prvTaskExitError( void );
 128:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 129:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 130:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 131:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /* Each task maintains its own interrupt status in the critical nesting
 132:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** variable. */
 133:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** static UBaseType_t uxCriticalNesting = 0xaaaaaaaa;
 134:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 135:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*
 136:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * The number of SysTick increments that make up one tick period.
 137:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  */
 138:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 139:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	static uint32_t ulTimerCountsForOneTick = 0;
 140:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
ARM GAS  /tmp/ccYrce8v.s 			page 4


 141:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 142:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*
 143:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * The maximum number of tick periods that can be suppressed is limited by the
 144:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * 24 bit resolution of the SysTick timer.
 145:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  */
 146:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 147:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	static uint32_t xMaximumPossibleSuppressedTicks = 0;
 148:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 149:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 150:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*
 151:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * Compensate for the CPU cycles that pass while the SysTick is stopped (low
 152:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * power functionality only.
 153:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  */
 154:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 155:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	static uint32_t ulStoppedTimerCompensation = 0;
 156:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 157:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 158:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*
 159:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * Used by the portASSERT_IF_INTERRUPT_PRIORITY_INVALID() macro to ensure
 160:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * FreeRTOS API functions are not called from interrupts that have been assigned
 161:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * a priority above configMAX_SYSCALL_INTERRUPT_PRIORITY.
 162:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  */
 163:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #if( configASSERT_DEFINED == 1 )
 164:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	 static uint8_t ucMaxSysCallPriority = 0;
 165:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	 static uint32_t ulMaxPRIGROUPValue = 0;
 166:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	 static const volatile uint8_t * const pcInterruptPriorityRegisters = ( const volatile uint8_t * c
 167:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #endif /* configASSERT_DEFINED */
 168:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 169:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 170:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 171:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*
 172:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * See header file for description.
 173:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  */
 174:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParam
 175:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** {
  32              		.loc 1 175 0
  33              		.cfi_startproc
  34              		@ args = 0, pretend = 0, frame = 16
  35              		@ frame_needed = 1, uses_anonymous_args = 0
  36              		@ link register save eliminated.
  37 0000 80B4     		push	{r7}
  38              		.cfi_def_cfa_offset 4
  39              		.cfi_offset 7, -4
  40 0002 85B0     		sub	sp, sp, #20
  41              		.cfi_def_cfa_offset 24
  42 0004 00AF     		add	r7, sp, #0
  43              		.cfi_def_cfa_register 7
  44 0006 F860     		str	r0, [r7, #12]
  45 0008 B960     		str	r1, [r7, #8]
  46 000a 7A60     		str	r2, [r7, #4]
 176:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 177:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	interrupt. */
 178:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of int
  47              		.loc 1 178 0
  48 000c FB68     		ldr	r3, [r7, #12]
  49 000e 043B     		subs	r3, r3, #4
  50 0010 FB60     		str	r3, [r7, #12]
ARM GAS  /tmp/ccYrce8v.s 			page 5


 179:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  51              		.loc 1 179 0
  52 0012 FB68     		ldr	r3, [r7, #12]
  53 0014 4FF08072 		mov	r2, #16777216
  54 0018 1A60     		str	r2, [r3]
 180:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	pxTopOfStack--;
  55              		.loc 1 180 0
  56 001a FB68     		ldr	r3, [r7, #12]
  57 001c 043B     		subs	r3, r3, #4
  58 001e FB60     		str	r3, [r7, #12]
 181:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
  59              		.loc 1 181 0
  60 0020 BB68     		ldr	r3, [r7, #8]
  61 0022 23F00102 		bic	r2, r3, #1
  62 0026 FB68     		ldr	r3, [r7, #12]
  63 0028 1A60     		str	r2, [r3]
 182:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	pxTopOfStack--;
  64              		.loc 1 182 0
  65 002a FB68     		ldr	r3, [r7, #12]
  66 002c 043B     		subs	r3, r3, #4
  67 002e FB60     		str	r3, [r7, #12]
 183:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  68              		.loc 1 183 0
  69 0030 084A     		ldr	r2, .L3
  70 0032 FB68     		ldr	r3, [r7, #12]
  71 0034 1A60     		str	r2, [r3]
 184:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
  72              		.loc 1 184 0
  73 0036 FB68     		ldr	r3, [r7, #12]
  74 0038 143B     		subs	r3, r3, #20
  75 003a FB60     		str	r3, [r7, #12]
 185:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  76              		.loc 1 185 0
  77 003c 7A68     		ldr	r2, [r7, #4]
  78 003e FB68     		ldr	r3, [r7, #12]
  79 0040 1A60     		str	r2, [r3]
 186:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
  80              		.loc 1 186 0
  81 0042 FB68     		ldr	r3, [r7, #12]
  82 0044 203B     		subs	r3, r3, #32
  83 0046 FB60     		str	r3, [r7, #12]
 187:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 188:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	return pxTopOfStack;
  84              		.loc 1 188 0
  85 0048 FB68     		ldr	r3, [r7, #12]
 189:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** }
  86              		.loc 1 189 0
  87 004a 1846     		mov	r0, r3
  88 004c 1437     		adds	r7, r7, #20
  89              		.cfi_def_cfa_offset 4
  90 004e BD46     		mov	sp, r7
  91              		.cfi_def_cfa_register 13
  92              		@ sp needed
  93 0050 80BC     		pop	{r7}
  94              		.cfi_restore 7
  95              		.cfi_def_cfa_offset 0
  96 0052 7047     		bx	lr
ARM GAS  /tmp/ccYrce8v.s 			page 6


  97              	.L4:
  98              		.align	2
  99              	.L3:
 100 0054 00000000 		.word	prvTaskExitError
 101              		.cfi_endproc
 102              	.LFE5:
 103              		.size	pxPortInitialiseStack, .-pxPortInitialiseStack
 104              		.align	1
 105              		.syntax unified
 106              		.thumb
 107              		.thumb_func
 108              		.fpu softvfp
 109              		.type	prvTaskExitError, %function
 110              	prvTaskExitError:
 111              	.LFB6:
 190:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 191:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 192:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** static void prvTaskExitError( void )
 193:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** {
 112              		.loc 1 193 0
 113              		.cfi_startproc
 114              		@ args = 0, pretend = 0, frame = 8
 115              		@ frame_needed = 1, uses_anonymous_args = 0
 116              		@ link register save eliminated.
 117 0058 80B4     		push	{r7}
 118              		.cfi_def_cfa_offset 4
 119              		.cfi_offset 7, -4
 120 005a 83B0     		sub	sp, sp, #12
 121              		.cfi_def_cfa_offset 16
 122 005c 00AF     		add	r7, sp, #0
 123              		.cfi_def_cfa_register 7
 194:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** volatile uint32_t ulDummy = 0UL;
 124              		.loc 1 194 0
 125 005e 0023     		movs	r3, #0
 126 0060 3B60     		str	r3, [r7]
 127              	.LBB12:
 128              	.LBB13:
 129              		.file 2 "FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h"
   1:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*
   2:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
   5:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * subject to the following conditions:
  11:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  12:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  14:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  15:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
ARM GAS  /tmp/ccYrce8v.s 			page 7


  20:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  22:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * http://www.FreeRTOS.org
  23:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * http://aws.amazon.com/freertos
  24:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  25:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * 1 tab == 4 spaces!
  26:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  */
  27:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  28:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  29:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  30:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define PORTMACRO_H
  31:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  32:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef __cplusplus
  33:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern "C" {
  34:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
  35:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  36:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  37:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Port specific definitions.
  38:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  39:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  41:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  42:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  43:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  44:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  */
  45:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  46:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Type definitions. */
  47:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCHAR		char
  48:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portFLOAT		float
  49:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDOUBLE		double
  50:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portLONG		long
  51:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSHORT		short
  52:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  54:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  55:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef long BaseType_t;
  57:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  58:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  59:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
  61:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #else
  63:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
  64:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  66:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
  68:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
  70:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  71:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  72:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specifics. */
  73:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccYrce8v.s 			page 8


  77:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  78:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  79:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD() 															\
  80:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {																				\
  81:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 																				\
  84:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
  88:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
  89:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  90:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  95:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  96:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Critical section management. */
  97:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
  98:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
  99:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 106:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 107:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 108:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 111:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 114:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 115:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 116:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 120:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 121:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 122:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 123:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 126:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 127:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 129:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 130:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 132:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 133:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
ARM GAS  /tmp/ccYrce8v.s 			page 9


 134:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 136:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 137:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 138:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 139:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#endif
 142:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 143:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 147:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 149:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 151:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 153:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 154:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 155:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef configASSERT
 156:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 159:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 160:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 161:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNOP()
 162:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 163:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portINLINE	__inline
 164:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 165:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 166:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 168:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 169:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 170:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 171:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 172:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 173:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 174:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** BaseType_t xReturn;
 175:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 176:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 177:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 178:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 179:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 180:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 181:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 182:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 183:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	else
 184:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 185:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 186:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 187:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 188:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	return xReturn;
 189:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 190:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
ARM GAS  /tmp/ccYrce8v.s 			page 10


 191:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 192:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 193:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 194:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 195:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 196:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 197:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 130              		.loc 2 197 0
 131              		.syntax unified
 132              	@ 197 "FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 133 0062 4FF0BF03 			mov r3, #191												
 134 0066 83F31188 		msr basepri, r3											
 135 006a BFF36F8F 		isb														
 136 006e BFF34F8F 		dsb														
 137              	
 138              	@ 0 "" 2
 139              		.thumb
 140              		.syntax unified
 141 0072 7B60     		str	r3, [r7, #4]
 142              	.LBE13:
 143              	.LBE12:
 195:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 196:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* A function that implements a task must not exit or attempt to return to
 197:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	its caller as there is nothing to return to.  If a task wants to exit it
 198:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	should instead call vTaskDelete( NULL ).
 199:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 200:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	Artificially force an assert() to be triggered if configASSERT() is
 201:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	defined, then stop here so application writers can catch the error. */
 202:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	configASSERT( uxCriticalNesting == ~0UL );
 203:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	portDISABLE_INTERRUPTS();
 204:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	while( ulDummy == 0 )
 144              		.loc 1 204 0
 145 0074 00BF     		nop
 146              	.L6:
 147              		.loc 1 204 0 is_stmt 0 discriminator 1
 148 0076 3B68     		ldr	r3, [r7]
 149 0078 002B     		cmp	r3, #0
 150 007a FCD0     		beq	.L6
 205:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	{
 206:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		/* This file calls prvTaskExitError() after the scheduler has been
 207:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		started to remove a compiler warning about the function being defined
 208:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		but never called.  ulDummy is used purely to quieten other warnings
 209:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		about code appearing after this function is called - making ulDummy
 210:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		volatile makes the compiler think the function could return and
 211:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		therefore not output an 'unreachable code' warning for code that appears
 212:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		after it. */
 213:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	}
 214:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** }
 151              		.loc 1 214 0 is_stmt 1
 152 007c 00BF     		nop
 153 007e 0C37     		adds	r7, r7, #12
 154              		.cfi_def_cfa_offset 4
 155 0080 BD46     		mov	sp, r7
 156              		.cfi_def_cfa_register 13
 157              		@ sp needed
 158 0082 80BC     		pop	{r7}
 159              		.cfi_restore 7
ARM GAS  /tmp/ccYrce8v.s 			page 11


 160              		.cfi_def_cfa_offset 0
 161 0084 7047     		bx	lr
 162              		.cfi_endproc
 163              	.LFE6:
 164              		.size	prvTaskExitError, .-prvTaskExitError
 165              		.align	1
 166              		.global	SVC_Handler
 167              		.syntax unified
 168              		.thumb
 169              		.thumb_func
 170              		.fpu softvfp
 171              		.type	SVC_Handler, %function
 172              	SVC_Handler:
 173              	.LFB7:
 215:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 216:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 217:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** void vPortSVCHandler( void )
 218:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** {
 174              		.loc 1 218 0
 175              		.cfi_startproc
 176              		@ Naked Function: prologue and epilogue provided by programmer.
 177              		@ args = 0, pretend = 0, frame = 0
 178              		@ frame_needed = 1, uses_anonymous_args = 0
 219:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	__asm volatile (
 179              		.loc 1 219 0
 180              		.syntax unified
 181              	@ 219 "FreeRTOS/Source/portable/GCC/ARM_CM3/port.c" 1
 182 0086 0A4B     			ldr	r3, pxCurrentTCBConst2		
 183 0088 1968     		ldr r1, [r3]					
 184 008a 0868     		ldr r0, [r1]					
 185 008c B0E8F00F 		ldmia r0!, {r4-r11}				
 186 0090 80F30988 		msr psp, r0						
 187 0094 BFF36F8F 		isb								
 188 0098 4FF00000 		mov r0, #0 						
 189 009c 80F31188 		msr	basepri, r0					
 190 00a0 4EF00D0E 		orr r14, #0xd					
 191 00a4 7047     		bx r14							
 192              										
 193 00a6 00BFAFF3 		.align 4						
 193      0080AFF3 
 193      0080
 194 00b0 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 195              	
 196              	@ 0 "" 2
 220:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 221:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					"	ldr r1, [r3]					\n" /* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 222:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					"	ldr r0, [r1]					\n" /* The first item in pxCurrentTCB is the task top of stack. */
 223:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					"	ldmia r0!, {r4-r11}				\n" /* Pop the registers that are not automatically saved on exceptio
 224:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					"	msr psp, r0						\n" /* Restore the task stack pointer. */
 225:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					"	isb								\n"
 226:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					"	mov r0, #0 						\n"
 227:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					"	msr	basepri, r0					\n"
 228:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					"	orr r14, #0xd					\n"
 229:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					"	bx r14							\n"
 230:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					"									\n"
 231:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					"	.align 4						\n"
 232:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
ARM GAS  /tmp/ccYrce8v.s 			page 12


 233:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				);
 234:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** }
 197              		.loc 1 234 0
 198              		.thumb
 199              		.syntax unified
 200 00b4 00BF     		nop
 201              		.cfi_endproc
 202              	.LFE7:
 203              		.size	SVC_Handler, .-SVC_Handler
 204              		.align	1
 205              		.syntax unified
 206              		.thumb
 207              		.thumb_func
 208              		.fpu softvfp
 209              		.type	prvPortStartFirstTask, %function
 210              	prvPortStartFirstTask:
 211              	.LFB8:
 235:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 236:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 237:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** static void prvPortStartFirstTask( void )
 238:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** {
 212              		.loc 1 238 0
 213              		.cfi_startproc
 214              		@ Naked Function: prologue and epilogue provided by programmer.
 215              		@ args = 0, pretend = 0, frame = 0
 216              		@ frame_needed = 1, uses_anonymous_args = 0
 239:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	__asm volatile(
 217              		.loc 1 239 0
 218              		.syntax unified
 219              	@ 239 "FreeRTOS/Source/portable/GCC/ARM_CM3/port.c" 1
 220 00b6 6548     		 ldr r0, =0xE000ED08 	
 221 00b8 0068     	 ldr r0, [r0] 			
 222 00ba 0068     	 ldr r0, [r0] 			
 223 00bc 80F30888 	 msr msp, r0			
 224 00c0 62B6     	 cpsie i				
 225 00c2 61B6     	 cpsie f				
 226 00c4 BFF34F8F 	 dsb					
 227 00c8 BFF36F8F 	 isb					
 228 00cc 00DF     	 svc 0					
 229 00ce 00BF     	 nop					
 230              	
 231              	@ 0 "" 2
 240:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 241:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					" ldr r0, [r0] 			\n"
 242:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					" ldr r0, [r0] 			\n"
 243:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
 244:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					" cpsie i				\n" /* Globally enable interrupts. */
 245:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					" cpsie f				\n"
 246:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					" dsb					\n"
 247:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					" isb					\n"
 248:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					" svc 0					\n" /* System call to start first task. */
 249:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					" nop					\n"
 250:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				);
 251:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** }
 232              		.loc 1 251 0
 233              		.thumb
 234              		.syntax unified
ARM GAS  /tmp/ccYrce8v.s 			page 13


 235 00d0 00BF     		nop
 236              		.cfi_endproc
 237              	.LFE8:
 238              		.size	prvPortStartFirstTask, .-prvPortStartFirstTask
 239              		.align	1
 240              		.global	xPortStartScheduler
 241              		.syntax unified
 242              		.thumb
 243              		.thumb_func
 244              		.fpu softvfp
 245              		.type	xPortStartScheduler, %function
 246              	xPortStartScheduler:
 247              	.LFB9:
 252:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 253:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 254:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*
 255:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * See header file for description.
 256:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  */
 257:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** BaseType_t xPortStartScheduler( void )
 258:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** {
 248              		.loc 1 258 0
 249              		.cfi_startproc
 250              		@ args = 0, pretend = 0, frame = 0
 251              		@ frame_needed = 1, uses_anonymous_args = 0
 252 00d2 80B5     		push	{r7, lr}
 253              		.cfi_def_cfa_offset 8
 254              		.cfi_offset 7, -8
 255              		.cfi_offset 14, -4
 256 00d4 00AF     		add	r7, sp, #0
 257              		.cfi_def_cfa_register 7
 259:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 260:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
 261:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );
 262:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 263:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	#if( configASSERT_DEFINED == 1 )
 264:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	{
 265:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		volatile uint32_t ulOriginalPriority;
 266:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_I
 267:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		volatile uint8_t ucMaxPriorityValue;
 268:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 269:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		/* Determine the maximum priority from which ISR safe FreeRTOS API
 270:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		functions can be called.  ISR safe functions are those that end in
 271:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
 272:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		ensure interrupt entry is as fast and simple as possible.
 273:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 274:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		Save the interrupt priority value that is about to be clobbered. */
 275:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		ulOriginalPriority = *pucFirstUserPriorityRegister;
 276:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 277:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		/* Determine the number of priority bits available.  First write to all
 278:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		possible bits. */
 279:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 280:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 281:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		/* Read the value back to see how many bits stuck. */
 282:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 283:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 284:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		/* Use the same mask on the maximum system call priority. */
 285:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
ARM GAS  /tmp/ccYrce8v.s 			page 14


 286:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 287:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		/* Calculate the maximum acceptable priority group value for the number
 288:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		of bits read back. */
 289:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 290:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 291:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		{
 292:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			ulMaxPRIGROUPValue--;
 293:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 294:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		}
 295:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 296:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		#ifdef __NVIC_PRIO_BITS
 297:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		{
 298:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			/* Check the CMSIS configuration that defines the number of
 299:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			priority bits matches the number of priority bits actually queried
 300:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			from the hardware. */
 301:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 302:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		}
 303:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		#endif
 304:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 305:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		#ifdef configPRIO_BITS
 306:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		{
 307:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			/* Check the FreeRTOS configuration that defines the number of
 308:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			priority bits matches the number of priority bits actually queried
 309:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			from the hardware. */
 310:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 311:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		}
 312:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		#endif
 313:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 314:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		/* Shift the priority group value back to its position within the AIRCR
 315:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		register. */
 316:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 317:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 318:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 319:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		/* Restore the clobbered interrupt priority register to its original
 320:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		value. */
 321:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		*pucFirstUserPriorityRegister = ulOriginalPriority;
 322:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	}
 323:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	#endif /* conifgASSERT_DEFINED */
 324:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 325:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* Make PendSV and SysTick the lowest priority interrupts. */
 326:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 258              		.loc 1 326 0
 259 00d6 0D4A     		ldr	r2, .L11
 260 00d8 0C4B     		ldr	r3, .L11
 261 00da 1B68     		ldr	r3, [r3]
 262 00dc 43F47F03 		orr	r3, r3, #16711680
 263 00e0 1360     		str	r3, [r2]
 327:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 264              		.loc 1 327 0
 265 00e2 0A4A     		ldr	r2, .L11
 266 00e4 094B     		ldr	r3, .L11
 267 00e6 1B68     		ldr	r3, [r3]
 268 00e8 43F07F43 		orr	r3, r3, #-16777216
 269 00ec 1360     		str	r3, [r2]
 328:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 329:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* Start the timer that generates the tick ISR.  Interrupts are disabled
 330:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	here already. */
ARM GAS  /tmp/ccYrce8v.s 			page 15


 331:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	vPortSetupTimerInterrupt();
 270              		.loc 1 331 0
 271 00ee FFF7FEFF 		bl	vPortSetupTimerInterrupt
 332:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 333:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* Initialise the critical nesting count ready for the first task. */
 334:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	uxCriticalNesting = 0;
 272              		.loc 1 334 0
 273 00f2 074B     		ldr	r3, .L11+4
 274 00f4 0022     		movs	r2, #0
 275 00f6 1A60     		str	r2, [r3]
 335:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 336:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* Start the first task. */
 337:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	prvPortStartFirstTask();
 276              		.loc 1 337 0
 277 00f8 FFF7DDFF 		bl	prvPortStartFirstTask
 338:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 339:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* Should never get here as the tasks will now be executing!  Call the task
 340:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	exit error function to prevent compiler warnings about a static function
 341:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	not being called in the case that the application writer overrides this
 342:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	functionality by defining configTASK_RETURN_ADDRESS.  Call
 343:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	vTaskSwitchContext() so link time optimisation does not remove the
 344:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	symbol. */
 345:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	vTaskSwitchContext();
 278              		.loc 1 345 0
 279 00fc FFF7FEFF 		bl	vTaskSwitchContext
 346:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	prvTaskExitError();
 280              		.loc 1 346 0
 281 0100 FFF7AAFF 		bl	prvTaskExitError
 347:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 348:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* Should not get here! */
 349:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	return 0;
 282              		.loc 1 349 0
 283 0104 0023     		movs	r3, #0
 350:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** }
 284              		.loc 1 350 0
 285 0106 1846     		mov	r0, r3
 286 0108 80BD     		pop	{r7, pc}
 287              	.L12:
 288 010a 00BF     		.align	2
 289              	.L11:
 290 010c 20ED00E0 		.word	-536810208
 291 0110 00000000 		.word	uxCriticalNesting
 292              		.cfi_endproc
 293              	.LFE9:
 294              		.size	xPortStartScheduler, .-xPortStartScheduler
 295              		.align	1
 296              		.global	vPortEndScheduler
 297              		.syntax unified
 298              		.thumb
 299              		.thumb_func
 300              		.fpu softvfp
 301              		.type	vPortEndScheduler, %function
 302              	vPortEndScheduler:
 303              	.LFB10:
 351:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 352:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 353:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** void vPortEndScheduler( void )
ARM GAS  /tmp/ccYrce8v.s 			page 16


 354:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** {
 304              		.loc 1 354 0
 305              		.cfi_startproc
 306              		@ args = 0, pretend = 0, frame = 0
 307              		@ frame_needed = 1, uses_anonymous_args = 0
 308              		@ link register save eliminated.
 309 0114 80B4     		push	{r7}
 310              		.cfi_def_cfa_offset 4
 311              		.cfi_offset 7, -4
 312 0116 00AF     		add	r7, sp, #0
 313              		.cfi_def_cfa_register 7
 355:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* Not implemented in ports where there is nothing to return to.
 356:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	Artificially force an assert. */
 357:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	configASSERT( uxCriticalNesting == 1000UL );
 358:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** }
 314              		.loc 1 358 0
 315 0118 00BF     		nop
 316 011a BD46     		mov	sp, r7
 317              		.cfi_def_cfa_register 13
 318              		@ sp needed
 319 011c 80BC     		pop	{r7}
 320              		.cfi_restore 7
 321              		.cfi_def_cfa_offset 0
 322 011e 7047     		bx	lr
 323              		.cfi_endproc
 324              	.LFE10:
 325              		.size	vPortEndScheduler, .-vPortEndScheduler
 326              		.align	1
 327              		.global	vPortEnterCritical
 328              		.syntax unified
 329              		.thumb
 330              		.thumb_func
 331              		.fpu softvfp
 332              		.type	vPortEnterCritical, %function
 333              	vPortEnterCritical:
 334              	.LFB11:
 359:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 360:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 361:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** void vPortEnterCritical( void )
 362:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** {
 335              		.loc 1 362 0
 336              		.cfi_startproc
 337              		@ args = 0, pretend = 0, frame = 8
 338              		@ frame_needed = 1, uses_anonymous_args = 0
 339              		@ link register save eliminated.
 340 0120 80B4     		push	{r7}
 341              		.cfi_def_cfa_offset 4
 342              		.cfi_offset 7, -4
 343 0122 83B0     		sub	sp, sp, #12
 344              		.cfi_def_cfa_offset 16
 345 0124 00AF     		add	r7, sp, #0
 346              		.cfi_def_cfa_register 7
 347              	.LBB14:
 348              	.LBB15:
 349              		.loc 2 197 0
 350              		.syntax unified
 351              	@ 197 "FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
ARM GAS  /tmp/ccYrce8v.s 			page 17


 352 0126 4FF0BF03 			mov r3, #191												
 353 012a 83F31188 		msr basepri, r3											
 354 012e BFF36F8F 		isb														
 355 0132 BFF34F8F 		dsb														
 356              	
 357              	@ 0 "" 2
 358              		.thumb
 359              		.syntax unified
 360 0136 7B60     		str	r3, [r7, #4]
 361              	.LBE15:
 362              	.LBE14:
 363:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	portDISABLE_INTERRUPTS();
 364:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	uxCriticalNesting++;
 363              		.loc 1 364 0
 364 0138 044B     		ldr	r3, .L15
 365 013a 1B68     		ldr	r3, [r3]
 366 013c 0133     		adds	r3, r3, #1
 367 013e 034A     		ldr	r2, .L15
 368 0140 1360     		str	r3, [r2]
 365:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 366:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* This is not the interrupt safe version of the enter critical function so
 367:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	assert() if it is being called from an interrupt context.  Only API
 368:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	functions that end in "FromISR" can be used in an interrupt.  Only assert if
 369:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	the critical nesting count is 1 to protect against recursive calls if the
 370:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	assert function also uses a critical section. */
 371:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	if( uxCriticalNesting == 1 )
 372:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	{
 373:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 374:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	}
 375:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** }
 369              		.loc 1 375 0
 370 0142 00BF     		nop
 371 0144 0C37     		adds	r7, r7, #12
 372              		.cfi_def_cfa_offset 4
 373 0146 BD46     		mov	sp, r7
 374              		.cfi_def_cfa_register 13
 375              		@ sp needed
 376 0148 80BC     		pop	{r7}
 377              		.cfi_restore 7
 378              		.cfi_def_cfa_offset 0
 379 014a 7047     		bx	lr
 380              	.L16:
 381              		.align	2
 382              	.L15:
 383 014c 00000000 		.word	uxCriticalNesting
 384              		.cfi_endproc
 385              	.LFE11:
 386              		.size	vPortEnterCritical, .-vPortEnterCritical
 387              		.align	1
 388              		.global	vPortExitCritical
 389              		.syntax unified
 390              		.thumb
 391              		.thumb_func
 392              		.fpu softvfp
 393              		.type	vPortExitCritical, %function
 394              	vPortExitCritical:
 395              	.LFB12:
ARM GAS  /tmp/ccYrce8v.s 			page 18


 376:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 377:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 378:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** void vPortExitCritical( void )
 379:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** {
 396              		.loc 1 379 0
 397              		.cfi_startproc
 398              		@ args = 0, pretend = 0, frame = 8
 399              		@ frame_needed = 1, uses_anonymous_args = 0
 400              		@ link register save eliminated.
 401 0150 80B4     		push	{r7}
 402              		.cfi_def_cfa_offset 4
 403              		.cfi_offset 7, -4
 404 0152 83B0     		sub	sp, sp, #12
 405              		.cfi_def_cfa_offset 16
 406 0154 00AF     		add	r7, sp, #0
 407              		.cfi_def_cfa_register 7
 380:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	configASSERT( uxCriticalNesting );
 381:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	uxCriticalNesting--;
 408              		.loc 1 381 0
 409 0156 094B     		ldr	r3, .L20
 410 0158 1B68     		ldr	r3, [r3]
 411 015a 013B     		subs	r3, r3, #1
 412 015c 074A     		ldr	r2, .L20
 413 015e 1360     		str	r3, [r2]
 382:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	if( uxCriticalNesting == 0 )
 414              		.loc 1 382 0
 415 0160 064B     		ldr	r3, .L20
 416 0162 1B68     		ldr	r3, [r3]
 417 0164 002B     		cmp	r3, #0
 418 0166 04D1     		bne	.L19
 419 0168 0023     		movs	r3, #0
 420 016a 7B60     		str	r3, [r7, #4]
 421              	.LBB16:
 422              	.LBB17:
 198:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 199:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n" \
 200:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 201:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 202:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 203:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 204:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	);
 205:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 206:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 207:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 208:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 209:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 210:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 211:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 212:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 213:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 214:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 215:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 216:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n" \
 217:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 218:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 219:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 220:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
ARM GAS  /tmp/ccYrce8v.s 			page 19


 221:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	);
 222:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 223:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 224:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	warnings. */
 225:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 226:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 227:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 228:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 229:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 230:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 231:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 423              		.loc 2 231 0
 424 016c 7B68     		ldr	r3, [r7, #4]
 425              		.syntax unified
 426              	@ 231 "FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 427 016e 83F31188 			msr basepri, r3	
 428              	@ 0 "" 2
 429              		.thumb
 430              		.syntax unified
 431              	.L19:
 432              	.LBE17:
 433              	.LBE16:
 383:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	{
 384:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		portENABLE_INTERRUPTS();
 385:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	}
 386:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** }
 434              		.loc 1 386 0
 435 0172 00BF     		nop
 436 0174 0C37     		adds	r7, r7, #12
 437              		.cfi_def_cfa_offset 4
 438 0176 BD46     		mov	sp, r7
 439              		.cfi_def_cfa_register 13
 440              		@ sp needed
 441 0178 80BC     		pop	{r7}
 442              		.cfi_restore 7
 443              		.cfi_def_cfa_offset 0
 444 017a 7047     		bx	lr
 445              	.L21:
 446              		.align	2
 447              	.L20:
 448 017c 00000000 		.word	uxCriticalNesting
 449              		.cfi_endproc
 450              	.LFE12:
 451              		.size	vPortExitCritical, .-vPortExitCritical
 452              		.align	1
 453              		.global	PendSV_Handler
 454              		.syntax unified
 455              		.thumb
 456              		.thumb_func
 457              		.fpu softvfp
 458              		.type	PendSV_Handler, %function
 459              	PendSV_Handler:
 460              	.LFB13:
 387:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 388:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 389:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** void xPortPendSVHandler( void )
 390:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** {
ARM GAS  /tmp/ccYrce8v.s 			page 20


 461              		.loc 1 390 0
 462              		.cfi_startproc
 463              		@ Naked Function: prologue and epilogue provided by programmer.
 464              		@ args = 0, pretend = 0, frame = 0
 465              		@ frame_needed = 1, uses_anonymous_args = 0
 391:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* This is a naked function. */
 392:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 393:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	__asm volatile
 466              		.loc 1 393 0
 467              		.syntax unified
 468              	@ 393 "FreeRTOS/Source/portable/GCC/ARM_CM3/port.c" 1
 469 0180 EFF30980 			mrs r0, psp							
 470 0184 BFF36F8F 		isb									
 471              											
 472 0188 0D4B     		ldr	r3, pxCurrentTCBConst			
 473 018a 1A68     		ldr	r2, [r3]						
 474              											
 475 018c 20E9F00F 		stmdb r0!, {r4-r11}					
 476 0190 1060     		str r0, [r2]						
 477              											
 478 0192 2DE90840 		stmdb sp!, {r3, r14}				
 479 0196 4FF0BF00 		mov r0, #191							
 480 019a 80F31188 		msr basepri, r0						
 481 019e FFF7FEFF 		bl vTaskSwitchContext				
 482 01a2 4FF00000 		mov r0, #0							
 483 01a6 80F31188 		msr basepri, r0						
 484 01aa BDE80840 		ldmia sp!, {r3, r14}				
 485              											
 486 01ae 1968     		ldr r1, [r3]						
 487 01b0 0868     		ldr r0, [r1]						
 488 01b2 B0E8F00F 		ldmia r0!, {r4-r11}					
 489 01b6 80F30988 		msr psp, r0							
 490 01ba BFF36F8F 		isb									
 491 01be 7047     		bx r14								
 492              											
 493              		.align 4							
 494 01c0 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 495              	
 496              	@ 0 "" 2
 394:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	(
 395:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	mrs r0, psp							\n"
 396:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	isb									\n"
 397:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"										\n"
 398:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	ldr	r3, pxCurrentTCBConst			\n" /* Get the location of the current TCB. */
 399:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	ldr	r2, [r3]						\n"
 400:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"										\n"
 401:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	stmdb r0!, {r4-r11}					\n" /* Save the remaining registers. */
 402:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	str r0, [r2]						\n" /* Save the new top of stack into the first member of the TCB. */
 403:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"										\n"
 404:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	stmdb sp!, {r3, r14}				\n"
 405:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	mov r0, %0							\n"
 406:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	msr basepri, r0						\n"
 407:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	bl vTaskSwitchContext				\n"
 408:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	mov r0, #0							\n"
 409:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	msr basepri, r0						\n"
 410:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	ldmia sp!, {r3, r14}				\n"
 411:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"										\n" /* Restore the context, including the critical nesting count. */
ARM GAS  /tmp/ccYrce8v.s 			page 21


 412:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	ldr r1, [r3]						\n"
 413:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	ldr r0, [r1]						\n" /* The first item in pxCurrentTCB is the task top of stack. */
 414:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	ldmia r0!, {r4-r11}					\n" /* Pop the registers. */
 415:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	msr psp, r0							\n"
 416:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	isb									\n"
 417:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	bx r14								\n"
 418:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"										\n"
 419:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	.align 4							\n"
 420:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
 421:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
 422:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	);
 423:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** }
 497              		.loc 1 423 0
 498              		.thumb
 499              		.syntax unified
 500 01c4 00BF     		nop
 501              		.cfi_endproc
 502              	.LFE13:
 503              		.size	PendSV_Handler, .-PendSV_Handler
 504              		.align	1
 505              		.global	SysTick_Handler
 506              		.syntax unified
 507              		.thumb
 508              		.thumb_func
 509              		.fpu softvfp
 510              		.type	SysTick_Handler, %function
 511              	SysTick_Handler:
 512              	.LFB14:
 424:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 425:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 426:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** void xPortSysTickHandler( void )
 427:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** {
 513              		.loc 1 427 0
 514              		.cfi_startproc
 515              		@ args = 0, pretend = 0, frame = 8
 516              		@ frame_needed = 1, uses_anonymous_args = 0
 517 01c6 80B5     		push	{r7, lr}
 518              		.cfi_def_cfa_offset 8
 519              		.cfi_offset 7, -8
 520              		.cfi_offset 14, -4
 521 01c8 82B0     		sub	sp, sp, #8
 522              		.cfi_def_cfa_offset 16
 523 01ca 00AF     		add	r7, sp, #0
 524              		.cfi_def_cfa_register 7
 525              	.LBB18:
 526              	.LBB19:
 197:FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 527              		.loc 2 197 0
 528              		.syntax unified
 529              	@ 197 "FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 530 01cc 4FF0BF03 			mov r3, #191												
 531 01d0 83F31188 		msr basepri, r3											
 532 01d4 BFF36F8F 		isb														
 533 01d8 BFF34F8F 		dsb														
 534              	
 535              	@ 0 "" 2
 536              		.thumb
ARM GAS  /tmp/ccYrce8v.s 			page 22


 537              		.syntax unified
 538 01dc 7B60     		str	r3, [r7, #4]
 539              	.LBE19:
 540              	.LBE18:
 428:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
 429:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	executes all interrupts must be unmasked.  There is therefore no need to
 430:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	save and then restore the interrupt mask value as its value is already
 431:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	known. */
 432:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	portDISABLE_INTERRUPTS();
 433:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	{
 434:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		/* Increment the RTOS tick. */
 435:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		if( xTaskIncrementTick() != pdFALSE )
 541              		.loc 1 435 0
 542 01de FFF7FEFF 		bl	xTaskIncrementTick
 543 01e2 0346     		mov	r3, r0
 544 01e4 002B     		cmp	r3, #0
 545 01e6 03D0     		beq	.L24
 436:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		{
 437:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			/* A context switch is required.  Context switching is performed in
 438:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			the PendSV interrupt.  Pend the PendSV interrupt. */
 439:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 546              		.loc 1 439 0
 547 01e8 064B     		ldr	r3, .L25
 548 01ea 4FF08052 		mov	r2, #268435456
 549 01ee 1A60     		str	r2, [r3]
 550              	.L24:
 551 01f0 0023     		movs	r3, #0
 552 01f2 3B60     		str	r3, [r7]
 553              	.LBB20:
 554              	.LBB21:
 555              		.loc 2 231 0
 556 01f4 3B68     		ldr	r3, [r7]
 557              		.syntax unified
 558              	@ 231 "FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 559 01f6 83F31188 			msr basepri, r3	
 560              	@ 0 "" 2
 561              		.thumb
 562              		.syntax unified
 563              	.LBE21:
 564              	.LBE20:
 440:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		}
 441:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	}
 442:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	portENABLE_INTERRUPTS();
 443:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** }
 565              		.loc 1 443 0
 566 01fa 00BF     		nop
 567 01fc 0837     		adds	r7, r7, #8
 568              		.cfi_def_cfa_offset 8
 569 01fe BD46     		mov	sp, r7
 570              		.cfi_def_cfa_register 13
 571              		@ sp needed
 572 0200 80BD     		pop	{r7, pc}
 573              	.L26:
 574 0202 00BF     		.align	2
 575              	.L25:
 576 0204 04ED00E0 		.word	-536810236
 577              		.cfi_endproc
ARM GAS  /tmp/ccYrce8v.s 			page 23


 578              	.LFE14:
 579              		.size	SysTick_Handler, .-SysTick_Handler
 580              		.align	1
 581              		.weak	vPortSetupTimerInterrupt
 582              		.syntax unified
 583              		.thumb
 584              		.thumb_func
 585              		.fpu softvfp
 586              		.type	vPortSetupTimerInterrupt, %function
 587              	vPortSetupTimerInterrupt:
 588              	.LFB15:
 444:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 445:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 446:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 447:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 448:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
 449:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	{
 450:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
 451:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	TickType_t xModifiableIdleTime;
 452:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 453:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		/* Make sure the SysTick reload value does not overflow the counter. */
 454:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 455:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		{
 456:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 457:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		}
 458:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 459:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
 460:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		is accounted for as best it can be, but using the tickless mode will
 461:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		inevitably result in some tiny drift of the time maintained by the
 462:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		kernel with respect to calendar time. */
 463:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 464:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 465:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		/* Calculate the reload value required to wait xExpectedIdleTime
 466:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		tick periods.  -1 is used because this code will execute part way
 467:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		through one of the tick periods. */
 468:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleT
 469:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		if( ulReloadValue > ulStoppedTimerCompensation )
 470:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		{
 471:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			ulReloadValue -= ulStoppedTimerCompensation;
 472:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		}
 473:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 474:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		/* Enter a critical section but don't use the taskENTER_CRITICAL()
 475:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		method as that will mask interrupts that should exit sleep mode. */
 476:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		__asm volatile( "cpsid i" ::: "memory" );
 477:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		__asm volatile( "dsb" );
 478:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		__asm volatile( "isb" );
 479:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 480:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		/* If a context switch is pending or a task is waiting for the scheduler
 481:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		to be unsuspended then abandon the low power entry. */
 482:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 483:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		{
 484:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			/* Restart from whatever is left in the count register to complete
 485:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			this tick period. */
 486:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 487:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 488:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			/* Restart SysTick. */
 489:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
ARM GAS  /tmp/ccYrce8v.s 			page 24


 490:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 491:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			/* Reset the reload register to the value required for normal tick
 492:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			periods. */
 493:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 494:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 495:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 496:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			above. */
 497:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			__asm volatile( "cpsie i" ::: "memory" );
 498:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		}
 499:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		else
 500:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		{
 501:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			/* Set the new reload value. */
 502:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 503:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 504:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			/* Clear the SysTick count flag and set the count value back to
 505:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			zero. */
 506:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 507:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 508:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			/* Restart SysTick. */
 509:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 510:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 511:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			/* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
 512:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			set its parameter to 0 to indicate that its implementation contains
 513:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			its own wait for interrupt or wait for event instruction, and so wfi
 514:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			should not be executed again.  However, the original expected idle
 515:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			time variable must remain unmodified, so a copy is taken. */
 516:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			xModifiableIdleTime = xExpectedIdleTime;
 517:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 518:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			if( xModifiableIdleTime > 0 )
 519:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			{
 520:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				__asm volatile( "dsb" ::: "memory" );
 521:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				__asm volatile( "wfi" );
 522:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				__asm volatile( "isb" );
 523:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			}
 524:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 525:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 526:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			/* Re-enable interrupts to allow the interrupt that brought the MCU
 527:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			out of sleep mode to execute immediately.  see comments above
 528:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			__disable_interrupt() call above. */
 529:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			__asm volatile( "cpsie i" ::: "memory" );
 530:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			__asm volatile( "dsb" );
 531:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			__asm volatile( "isb" );
 532:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 533:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			/* Disable interrupts again because the clock is about to be stopped
 534:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			and interrupts that execute while the clock is stopped will increase
 535:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			any slippage between the time maintained by the RTOS and calendar
 536:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			time. */
 537:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			__asm volatile( "cpsid i" ::: "memory" );
 538:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			__asm volatile( "dsb" );
 539:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			__asm volatile( "isb" );
 540:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 541:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			/* Disable the SysTick clock without reading the
 542:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG register to ensure the
 543:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			portNVIC_SYSTICK_COUNT_FLAG_BIT is not cleared if it is set.  Again,
 544:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			the time the SysTick is stopped for is accounted for as best it can
 545:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			be, but using the tickless mode will inevitably result in some tiny
 546:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			drift of the time maintained by the kernel with respect to calendar
ARM GAS  /tmp/ccYrce8v.s 			page 25


 547:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			time*/
 548:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 549:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 550:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			/* Determine if the SysTick clock has already counted to zero and
 551:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			been set back to the current reload value (the reload back being
 552:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			correct for the entire expected idle time) or if the SysTick is yet
 553:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			to count to zero (in which case an interrupt other than the SysTick
 554:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			must have brought the system out of sleep mode). */
 555:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 556:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			{
 557:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				uint32_t ulCalculatedLoadValue;
 558:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 559:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				/* The tick interrupt is already pending, and the SysTick count
 560:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				reloaded with ulReloadValue.  Reset the
 561:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				portNVIC_SYSTICK_LOAD_REG with whatever remains of this tick
 562:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				period. */
 563:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_
 564:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 565:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				/* Don't allow a tiny value, or values that have somehow
 566:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				underflowed because the post sleep hook did something
 567:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				that took too long. */
 568:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimer
 569:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				{
 570:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 571:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				}
 572:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 573:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 574:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 575:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				/* As the pending tick will be processed as soon as this
 576:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				function exits, the tick value maintained by the tick is stepped
 577:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				forward by one less than the time spent waiting. */
 578:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 579:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			}
 580:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			else
 581:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			{
 582:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				/* Something other than the tick interrupt ended the sleep.
 583:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				Work out how long the sleep lasted rounded to complete tick
 584:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				periods (not the ulReload value which accounted for part
 585:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				ticks). */
 586:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTI
 587:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 588:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				/* How many complete tick periods passed while the processor
 589:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				was waiting? */
 590:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 591:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 592:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				/* The reload value is set to whatever fraction of a single tick
 593:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				period remains. */
 594:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulC
 595:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			}
 596:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 597:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			/* Restart SysTick so it runs from portNVIC_SYSTICK_LOAD_REG
 598:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			again, then set portNVIC_SYSTICK_LOAD_REG back to its standard
 599:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			value. */
 600:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 601:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 602:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			vTaskStepTick( ulCompleteTickPeriods );
 603:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
ARM GAS  /tmp/ccYrce8v.s 			page 26


 604:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 605:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			/* Exit with interrupts enabled. */
 606:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			__asm volatile( "cpsie i" ::: "memory" );
 607:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		}
 608:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	}
 609:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 610:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 611:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 612:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 613:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*
 614:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 615:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * frequency.
 616:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  */
 617:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** __attribute__(( weak )) void vPortSetupTimerInterrupt( void )
 618:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** {
 589              		.loc 1 618 0
 590              		.cfi_startproc
 591              		@ args = 0, pretend = 0, frame = 0
 592              		@ frame_needed = 1, uses_anonymous_args = 0
 593              		@ link register save eliminated.
 594 0208 80B4     		push	{r7}
 595              		.cfi_def_cfa_offset 4
 596              		.cfi_offset 7, -4
 597 020a 00AF     		add	r7, sp, #0
 598              		.cfi_def_cfa_register 7
 619:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* Calculate the constants required to configure the tick interrupt. */
 620:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	#if( configUSE_TICKLESS_IDLE == 1 )
 621:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	{
 622:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 623:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 624:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOC
 625:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	}
 626:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	#endif /* configUSE_TICKLESS_IDLE */
 627:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 628:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* Stop and clear the SysTick. */
 629:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	portNVIC_SYSTICK_CTRL_REG = 0UL;
 599              		.loc 1 629 0
 600 020c 0A4B     		ldr	r3, .L28
 601 020e 0022     		movs	r2, #0
 602 0210 1A60     		str	r2, [r3]
 630:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 603              		.loc 1 630 0
 604 0212 0A4B     		ldr	r3, .L28+4
 605 0214 0022     		movs	r2, #0
 606 0216 1A60     		str	r2, [r3]
 631:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 632:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* Configure SysTick to interrupt at the requested rate. */
 633:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 607              		.loc 1 633 0
 608 0218 094A     		ldr	r2, .L28+8
 609 021a 0A4B     		ldr	r3, .L28+12
 610 021c 1B68     		ldr	r3, [r3]
 611 021e 0A49     		ldr	r1, .L28+16
 612 0220 A1FB0313 		umull	r1, r3, r1, r3
 613 0224 9B09     		lsrs	r3, r3, #6
 614 0226 013B     		subs	r3, r3, #1
 615 0228 1360     		str	r3, [r2]
ARM GAS  /tmp/ccYrce8v.s 			page 27


 634:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTI
 616              		.loc 1 634 0
 617 022a 034B     		ldr	r3, .L28
 618 022c 0722     		movs	r2, #7
 619 022e 1A60     		str	r2, [r3]
 635:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** }
 620              		.loc 1 635 0
 621 0230 00BF     		nop
 622 0232 BD46     		mov	sp, r7
 623              		.cfi_def_cfa_register 13
 624              		@ sp needed
 625 0234 80BC     		pop	{r7}
 626              		.cfi_restore 7
 627              		.cfi_def_cfa_offset 0
 628 0236 7047     		bx	lr
 629              	.L29:
 630              		.align	2
 631              	.L28:
 632 0238 10E000E0 		.word	-536813552
 633 023c 18E000E0 		.word	-536813544
 634 0240 14E000E0 		.word	-536813548
 635 0244 00000000 		.word	SystemCoreClock
 636 0248 D34D6210 		.word	274877907
 637              		.cfi_endproc
 638              	.LFE15:
 639              		.size	vPortSetupTimerInterrupt, .-vPortSetupTimerInterrupt
 640              	.Letext0:
 641              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 642              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 643              		.file 5 "FreeRTOS/Source/include/projdefs.h"
 644              		.file 6 "include/FreeRTOSConfig.h"
 645              		.section	.debug_info,"",%progbits
 646              	.Ldebug_info0:
 647 0000 E2020000 		.4byte	0x2e2
 648 0004 0400     		.2byte	0x4
 649 0006 00000000 		.4byte	.Ldebug_abbrev0
 650 000a 04       		.byte	0x4
 651 000b 01       		.uleb128 0x1
 652 000c 6B010000 		.4byte	.LASF30
 653 0010 0C       		.byte	0xc
 654 0011 F4010000 		.4byte	.LASF31
 655 0015 D0000000 		.4byte	.LASF32
 656 0019 00000000 		.4byte	.Ltext0
 657 001d 4C020000 		.4byte	.Letext0-.Ltext0
 658 0021 00000000 		.4byte	.Ldebug_line0
 659 0025 02       		.uleb128 0x2
 660 0026 04       		.byte	0x4
 661 0027 05       		.byte	0x5
 662 0028 696E7400 		.ascii	"int\000"
 663 002c 03       		.uleb128 0x3
 664 002d 04       		.byte	0x4
 665 002e 07       		.byte	0x7
 666 002f 35010000 		.4byte	.LASF0
 667 0033 03       		.uleb128 0x3
 668 0034 01       		.byte	0x1
 669 0035 06       		.byte	0x6
 670 0036 9A020000 		.4byte	.LASF1
ARM GAS  /tmp/ccYrce8v.s 			page 28


 671 003a 03       		.uleb128 0x3
 672 003b 01       		.byte	0x1
 673 003c 08       		.byte	0x8
 674 003d 82000000 		.4byte	.LASF2
 675 0041 03       		.uleb128 0x3
 676 0042 02       		.byte	0x2
 677 0043 05       		.byte	0x5
 678 0044 50000000 		.4byte	.LASF3
 679 0048 03       		.uleb128 0x3
 680 0049 02       		.byte	0x2
 681 004a 07       		.byte	0x7
 682 004b A2000000 		.4byte	.LASF4
 683 004f 03       		.uleb128 0x3
 684 0050 04       		.byte	0x4
 685 0051 05       		.byte	0x5
 686 0052 47000000 		.4byte	.LASF5
 687 0056 04       		.uleb128 0x4
 688 0057 C5000000 		.4byte	.LASF9
 689 005b 03       		.byte	0x3
 690 005c 41       		.byte	0x41
 691 005d 61000000 		.4byte	0x61
 692 0061 03       		.uleb128 0x3
 693 0062 04       		.byte	0x4
 694 0063 07       		.byte	0x7
 695 0064 90000000 		.4byte	.LASF6
 696 0068 03       		.uleb128 0x3
 697 0069 08       		.byte	0x8
 698 006a 05       		.byte	0x5
 699 006b E6010000 		.4byte	.LASF7
 700 006f 03       		.uleb128 0x3
 701 0070 08       		.byte	0x8
 702 0071 07       		.byte	0x7
 703 0072 42010000 		.4byte	.LASF8
 704 0076 04       		.uleb128 0x4
 705 0077 67020000 		.4byte	.LASF10
 706 007b 04       		.byte	0x4
 707 007c 30       		.byte	0x30
 708 007d 56000000 		.4byte	0x56
 709 0081 05       		.uleb128 0x5
 710 0082 76000000 		.4byte	0x76
 711 0086 06       		.uleb128 0x6
 712 0087 B5000000 		.4byte	.LASF33
 713 008b 06       		.byte	0x6
 714 008c 2B       		.byte	0x2b
 715 008d 76000000 		.4byte	0x76
 716 0091 04       		.uleb128 0x4
 717 0092 6B000000 		.4byte	.LASF11
 718 0096 05       		.byte	0x5
 719 0097 23       		.byte	0x23
 720 0098 9C000000 		.4byte	0x9c
 721 009c 07       		.uleb128 0x7
 722 009d 04       		.byte	0x4
 723 009e A2000000 		.4byte	0xa2
 724 00a2 08       		.uleb128 0x8
 725 00a3 AD000000 		.4byte	0xad
 726 00a7 09       		.uleb128 0x9
 727 00a8 AD000000 		.4byte	0xad
ARM GAS  /tmp/ccYrce8v.s 			page 29


 728 00ac 00       		.byte	0
 729 00ad 0A       		.uleb128 0xa
 730 00ae 04       		.byte	0x4
 731 00af 04       		.uleb128 0x4
 732 00b0 29010000 		.4byte	.LASF12
 733 00b4 02       		.byte	0x2
 734 00b5 37       		.byte	0x37
 735 00b6 76000000 		.4byte	0x76
 736 00ba 04       		.uleb128 0x4
 737 00bb C6020000 		.4byte	.LASF13
 738 00bf 02       		.byte	0x2
 739 00c0 38       		.byte	0x38
 740 00c1 4F000000 		.4byte	0x4f
 741 00c5 04       		.uleb128 0x4
 742 00c6 BA020000 		.4byte	.LASF14
 743 00ca 02       		.byte	0x2
 744 00cb 39       		.byte	0x39
 745 00cc 61000000 		.4byte	0x61
 746 00d0 04       		.uleb128 0x4
 747 00d1 2C000000 		.4byte	.LASF15
 748 00d5 02       		.byte	0x2
 749 00d6 3F       		.byte	0x3f
 750 00d7 76000000 		.4byte	0x76
 751 00db 03       		.uleb128 0x3
 752 00dc 04       		.byte	0x4
 753 00dd 07       		.byte	0x7
 754 00de DD010000 		.4byte	.LASF16
 755 00e2 03       		.uleb128 0x3
 756 00e3 01       		.byte	0x1
 757 00e4 08       		.byte	0x8
 758 00e5 7F020000 		.4byte	.LASF17
 759 00e9 07       		.uleb128 0x7
 760 00ea 04       		.byte	0x4
 761 00eb AF000000 		.4byte	0xaf
 762 00ef 0B       		.uleb128 0xb
 763 00f0 B2010000 		.4byte	.LASF25
 764 00f4 01       		.byte	0x1
 765 00f5 85       		.byte	0x85
 766 00f6 C5000000 		.4byte	0xc5
 767 00fa 05       		.uleb128 0x5
 768 00fb 03       		.byte	0x3
 769 00fc 00000000 		.4byte	uxCriticalNesting
 770 0100 0C       		.uleb128 0xc
 771 0101 C4010000 		.4byte	.LASF18
 772 0105 01       		.byte	0x1
 773 0106 6902     		.2byte	0x269
 774 0108 08020000 		.4byte	.LFB15
 775 010c 44000000 		.4byte	.LFE15-.LFB15
 776 0110 01       		.uleb128 0x1
 777 0111 9C       		.byte	0x9c
 778 0112 0D       		.uleb128 0xd
 779 0113 37000000 		.4byte	.LASF20
 780 0117 01       		.byte	0x1
 781 0118 AA01     		.2byte	0x1aa
 782 011a C6010000 		.4byte	.LFB14
 783 011e 42000000 		.4byte	.LFE14-.LFB14
 784 0122 01       		.uleb128 0x1
ARM GAS  /tmp/ccYrce8v.s 			page 30


 785 0123 9C       		.byte	0x9c
 786 0124 69010000 		.4byte	0x169
 787 0128 0E       		.uleb128 0xe
 788 0129 D1020000 		.4byte	0x2d1
 789 012d CC010000 		.4byte	.LBB18
 790 0131 12000000 		.4byte	.LBE18-.LBB18
 791 0135 01       		.byte	0x1
 792 0136 B001     		.2byte	0x1b0
 793 0138 4F010000 		.4byte	0x14f
 794 013c 0F       		.uleb128 0xf
 795 013d CC010000 		.4byte	.LBB19
 796 0141 12000000 		.4byte	.LBE19-.LBB19
 797 0145 10       		.uleb128 0x10
 798 0146 D9020000 		.4byte	0x2d9
 799 014a 02       		.uleb128 0x2
 800 014b 91       		.byte	0x91
 801 014c 74       		.sleb128 -12
 802 014d 00       		.byte	0
 803 014e 00       		.byte	0
 804 014f 11       		.uleb128 0x11
 805 0150 B9020000 		.4byte	0x2b9
 806 0154 F4010000 		.4byte	.LBB20
 807 0158 06000000 		.4byte	.LBE20-.LBB20
 808 015c 01       		.byte	0x1
 809 015d BA01     		.2byte	0x1ba
 810 015f 12       		.uleb128 0x12
 811 0160 C5020000 		.4byte	0x2c5
 812 0164 02       		.uleb128 0x2
 813 0165 91       		.byte	0x91
 814 0166 70       		.sleb128 -16
 815 0167 00       		.byte	0
 816 0168 00       		.byte	0
 817 0169 0C       		.uleb128 0xc
 818 016a 46020000 		.4byte	.LASF19
 819 016e 01       		.byte	0x1
 820 016f 8501     		.2byte	0x185
 821 0171 80010000 		.4byte	.LFB13
 822 0175 46000000 		.4byte	.LFE13-.LFB13
 823 0179 01       		.uleb128 0x1
 824 017a 9C       		.byte	0x9c
 825 017b 13       		.uleb128 0x13
 826 017c 55020000 		.4byte	.LASF21
 827 0180 01       		.byte	0x1
 828 0181 7A01     		.2byte	0x17a
 829 0183 50010000 		.4byte	.LFB12
 830 0187 30000000 		.4byte	.LFE12-.LFB12
 831 018b 01       		.uleb128 0x1
 832 018c 9C       		.byte	0x9c
 833 018d AB010000 		.4byte	0x1ab
 834 0191 11       		.uleb128 0x11
 835 0192 B9020000 		.4byte	0x2b9
 836 0196 6C010000 		.4byte	.LBB16
 837 019a 06000000 		.4byte	.LBE16-.LBB16
 838 019e 01       		.byte	0x1
 839 019f 8001     		.2byte	0x180
 840 01a1 12       		.uleb128 0x12
 841 01a2 C5020000 		.4byte	0x2c5
ARM GAS  /tmp/ccYrce8v.s 			page 31


 842 01a6 02       		.uleb128 0x2
 843 01a7 91       		.byte	0x91
 844 01a8 74       		.sleb128 -12
 845 01a9 00       		.byte	0
 846 01aa 00       		.byte	0
 847 01ab 13       		.uleb128 0x13
 848 01ac 00000000 		.4byte	.LASF22
 849 01b0 01       		.byte	0x1
 850 01b1 6901     		.2byte	0x169
 851 01b3 20010000 		.4byte	.LFB11
 852 01b7 30000000 		.4byte	.LFE11-.LFB11
 853 01bb 01       		.uleb128 0x1
 854 01bc 9C       		.byte	0x9c
 855 01bd E5010000 		.4byte	0x1e5
 856 01c1 11       		.uleb128 0x11
 857 01c2 D1020000 		.4byte	0x2d1
 858 01c6 26010000 		.4byte	.LBB14
 859 01ca 12000000 		.4byte	.LBE14-.LBB14
 860 01ce 01       		.byte	0x1
 861 01cf 6B01     		.2byte	0x16b
 862 01d1 0F       		.uleb128 0xf
 863 01d2 26010000 		.4byte	.LBB15
 864 01d6 12000000 		.4byte	.LBE15-.LBB15
 865 01da 10       		.uleb128 0x10
 866 01db D9020000 		.4byte	0x2d9
 867 01df 02       		.uleb128 0x2
 868 01e0 91       		.byte	0x91
 869 01e1 74       		.sleb128 -12
 870 01e2 00       		.byte	0
 871 01e3 00       		.byte	0
 872 01e4 00       		.byte	0
 873 01e5 0C       		.uleb128 0xc
 874 01e6 1A000000 		.4byte	.LASF23
 875 01ea 01       		.byte	0x1
 876 01eb 6101     		.2byte	0x161
 877 01ed 14010000 		.4byte	.LFB10
 878 01f1 0C000000 		.4byte	.LFE10-.LFB10
 879 01f5 01       		.uleb128 0x1
 880 01f6 9C       		.byte	0x9c
 881 01f7 14       		.uleb128 0x14
 882 01f8 A6020000 		.4byte	.LASF34
 883 01fc 01       		.byte	0x1
 884 01fd 0101     		.2byte	0x101
 885 01ff BA000000 		.4byte	0xba
 886 0203 D2000000 		.4byte	.LFB9
 887 0207 42000000 		.4byte	.LFE9-.LFB9
 888 020b 01       		.uleb128 0x1
 889 020c 9C       		.byte	0x9c
 890 020d 15       		.uleb128 0x15
 891 020e 84020000 		.4byte	.LASF35
 892 0212 01       		.byte	0x1
 893 0213 ED       		.byte	0xed
 894 0214 B6000000 		.4byte	.LFB8
 895 0218 1C000000 		.4byte	.LFE8-.LFB8
 896 021c 01       		.uleb128 0x1
 897 021d 9C       		.byte	0x9c
 898 021e 16       		.uleb128 0x16
ARM GAS  /tmp/ccYrce8v.s 			page 32


 899 021f 20020000 		.4byte	.LASF24
 900 0223 01       		.byte	0x1
 901 0224 D9       		.byte	0xd9
 902 0225 86000000 		.4byte	.LFB7
 903 0229 30000000 		.4byte	.LFE7-.LFB7
 904 022d 01       		.uleb128 0x1
 905 022e 9C       		.byte	0x9c
 906 022f 17       		.uleb128 0x17
 907 0230 5A000000 		.4byte	.LASF36
 908 0234 01       		.byte	0x1
 909 0235 C0       		.byte	0xc0
 910 0236 58000000 		.4byte	.LFB6
 911 023a 2E000000 		.4byte	.LFE6-.LFB6
 912 023e 01       		.uleb128 0x1
 913 023f 9C       		.byte	0x9c
 914 0240 75020000 		.4byte	0x275
 915 0244 0B       		.uleb128 0xb
 916 0245 7A000000 		.4byte	.LASF26
 917 0249 01       		.byte	0x1
 918 024a C2       		.byte	0xc2
 919 024b 81000000 		.4byte	0x81
 920 024f 02       		.uleb128 0x2
 921 0250 91       		.byte	0x91
 922 0251 70       		.sleb128 -16
 923 0252 18       		.uleb128 0x18
 924 0253 D1020000 		.4byte	0x2d1
 925 0257 62000000 		.4byte	.LBB12
 926 025b 12000000 		.4byte	.LBE12-.LBB12
 927 025f 01       		.byte	0x1
 928 0260 CB       		.byte	0xcb
 929 0261 0F       		.uleb128 0xf
 930 0262 62000000 		.4byte	.LBB13
 931 0266 12000000 		.4byte	.LBE13-.LBB13
 932 026a 10       		.uleb128 0x10
 933 026b D9020000 		.4byte	0x2d9
 934 026f 02       		.uleb128 0x2
 935 0270 91       		.byte	0x91
 936 0271 74       		.sleb128 -12
 937 0272 00       		.byte	0
 938 0273 00       		.byte	0
 939 0274 00       		.byte	0
 940 0275 19       		.uleb128 0x19
 941 0276 03010000 		.4byte	.LASF37
 942 027a 01       		.byte	0x1
 943 027b AE       		.byte	0xae
 944 027c E9000000 		.4byte	0xe9
 945 0280 00000000 		.4byte	.LFB5
 946 0284 58000000 		.4byte	.LFE5-.LFB5
 947 0288 01       		.uleb128 0x1
 948 0289 9C       		.byte	0x9c
 949 028a B9020000 		.4byte	0x2b9
 950 028e 1A       		.uleb128 0x1a
 951 028f 39020000 		.4byte	.LASF27
 952 0293 01       		.byte	0x1
 953 0294 AE       		.byte	0xae
 954 0295 E9000000 		.4byte	0xe9
 955 0299 02       		.uleb128 0x2
ARM GAS  /tmp/ccYrce8v.s 			page 33


 956 029a 91       		.byte	0x91
 957 029b 74       		.sleb128 -12
 958 029c 1A       		.uleb128 0x1a
 959 029d 13000000 		.4byte	.LASF28
 960 02a1 01       		.byte	0x1
 961 02a2 AE       		.byte	0xae
 962 02a3 91000000 		.4byte	0x91
 963 02a7 02       		.uleb128 0x2
 964 02a8 91       		.byte	0x91
 965 02a9 70       		.sleb128 -16
 966 02aa 1A       		.uleb128 0x1a
 967 02ab 2C020000 		.4byte	.LASF29
 968 02af 01       		.byte	0x1
 969 02b0 AE       		.byte	0xae
 970 02b1 AD000000 		.4byte	0xad
 971 02b5 02       		.uleb128 0x2
 972 02b6 91       		.byte	0x91
 973 02b7 6C       		.sleb128 -20
 974 02b8 00       		.byte	0
 975 02b9 1B       		.uleb128 0x1b
 976 02ba 19010000 		.4byte	.LASF38
 977 02be 02       		.byte	0x2
 978 02bf E5       		.byte	0xe5
 979 02c0 03       		.byte	0x3
 980 02c1 D1020000 		.4byte	0x2d1
 981 02c5 1C       		.uleb128 0x1c
 982 02c6 70020000 		.4byte	.LASF39
 983 02ca 02       		.byte	0x2
 984 02cb E5       		.byte	0xe5
 985 02cc 76000000 		.4byte	0x76
 986 02d0 00       		.byte	0
 987 02d1 1D       		.uleb128 0x1d
 988 02d2 59010000 		.4byte	.LASF40
 989 02d6 02       		.byte	0x2
 990 02d7 C1       		.byte	0xc1
 991 02d8 03       		.byte	0x3
 992 02d9 1E       		.uleb128 0x1e
 993 02da F6000000 		.4byte	.LASF41
 994 02de 02       		.byte	0x2
 995 02df C3       		.byte	0xc3
 996 02e0 76000000 		.4byte	0x76
 997 02e4 00       		.byte	0
 998 02e5 00       		.byte	0
 999              		.section	.debug_abbrev,"",%progbits
 1000              	.Ldebug_abbrev0:
 1001 0000 01       		.uleb128 0x1
 1002 0001 11       		.uleb128 0x11
 1003 0002 01       		.byte	0x1
 1004 0003 25       		.uleb128 0x25
 1005 0004 0E       		.uleb128 0xe
 1006 0005 13       		.uleb128 0x13
 1007 0006 0B       		.uleb128 0xb
 1008 0007 03       		.uleb128 0x3
 1009 0008 0E       		.uleb128 0xe
 1010 0009 1B       		.uleb128 0x1b
 1011 000a 0E       		.uleb128 0xe
 1012 000b 11       		.uleb128 0x11
ARM GAS  /tmp/ccYrce8v.s 			page 34


 1013 000c 01       		.uleb128 0x1
 1014 000d 12       		.uleb128 0x12
 1015 000e 06       		.uleb128 0x6
 1016 000f 10       		.uleb128 0x10
 1017 0010 17       		.uleb128 0x17
 1018 0011 00       		.byte	0
 1019 0012 00       		.byte	0
 1020 0013 02       		.uleb128 0x2
 1021 0014 24       		.uleb128 0x24
 1022 0015 00       		.byte	0
 1023 0016 0B       		.uleb128 0xb
 1024 0017 0B       		.uleb128 0xb
 1025 0018 3E       		.uleb128 0x3e
 1026 0019 0B       		.uleb128 0xb
 1027 001a 03       		.uleb128 0x3
 1028 001b 08       		.uleb128 0x8
 1029 001c 00       		.byte	0
 1030 001d 00       		.byte	0
 1031 001e 03       		.uleb128 0x3
 1032 001f 24       		.uleb128 0x24
 1033 0020 00       		.byte	0
 1034 0021 0B       		.uleb128 0xb
 1035 0022 0B       		.uleb128 0xb
 1036 0023 3E       		.uleb128 0x3e
 1037 0024 0B       		.uleb128 0xb
 1038 0025 03       		.uleb128 0x3
 1039 0026 0E       		.uleb128 0xe
 1040 0027 00       		.byte	0
 1041 0028 00       		.byte	0
 1042 0029 04       		.uleb128 0x4
 1043 002a 16       		.uleb128 0x16
 1044 002b 00       		.byte	0
 1045 002c 03       		.uleb128 0x3
 1046 002d 0E       		.uleb128 0xe
 1047 002e 3A       		.uleb128 0x3a
 1048 002f 0B       		.uleb128 0xb
 1049 0030 3B       		.uleb128 0x3b
 1050 0031 0B       		.uleb128 0xb
 1051 0032 49       		.uleb128 0x49
 1052 0033 13       		.uleb128 0x13
 1053 0034 00       		.byte	0
 1054 0035 00       		.byte	0
 1055 0036 05       		.uleb128 0x5
 1056 0037 35       		.uleb128 0x35
 1057 0038 00       		.byte	0
 1058 0039 49       		.uleb128 0x49
 1059 003a 13       		.uleb128 0x13
 1060 003b 00       		.byte	0
 1061 003c 00       		.byte	0
 1062 003d 06       		.uleb128 0x6
 1063 003e 34       		.uleb128 0x34
 1064 003f 00       		.byte	0
 1065 0040 03       		.uleb128 0x3
 1066 0041 0E       		.uleb128 0xe
 1067 0042 3A       		.uleb128 0x3a
 1068 0043 0B       		.uleb128 0xb
 1069 0044 3B       		.uleb128 0x3b
ARM GAS  /tmp/ccYrce8v.s 			page 35


 1070 0045 0B       		.uleb128 0xb
 1071 0046 49       		.uleb128 0x49
 1072 0047 13       		.uleb128 0x13
 1073 0048 3F       		.uleb128 0x3f
 1074 0049 19       		.uleb128 0x19
 1075 004a 3C       		.uleb128 0x3c
 1076 004b 19       		.uleb128 0x19
 1077 004c 00       		.byte	0
 1078 004d 00       		.byte	0
 1079 004e 07       		.uleb128 0x7
 1080 004f 0F       		.uleb128 0xf
 1081 0050 00       		.byte	0
 1082 0051 0B       		.uleb128 0xb
 1083 0052 0B       		.uleb128 0xb
 1084 0053 49       		.uleb128 0x49
 1085 0054 13       		.uleb128 0x13
 1086 0055 00       		.byte	0
 1087 0056 00       		.byte	0
 1088 0057 08       		.uleb128 0x8
 1089 0058 15       		.uleb128 0x15
 1090 0059 01       		.byte	0x1
 1091 005a 27       		.uleb128 0x27
 1092 005b 19       		.uleb128 0x19
 1093 005c 01       		.uleb128 0x1
 1094 005d 13       		.uleb128 0x13
 1095 005e 00       		.byte	0
 1096 005f 00       		.byte	0
 1097 0060 09       		.uleb128 0x9
 1098 0061 05       		.uleb128 0x5
 1099 0062 00       		.byte	0
 1100 0063 49       		.uleb128 0x49
 1101 0064 13       		.uleb128 0x13
 1102 0065 00       		.byte	0
 1103 0066 00       		.byte	0
 1104 0067 0A       		.uleb128 0xa
 1105 0068 0F       		.uleb128 0xf
 1106 0069 00       		.byte	0
 1107 006a 0B       		.uleb128 0xb
 1108 006b 0B       		.uleb128 0xb
 1109 006c 00       		.byte	0
 1110 006d 00       		.byte	0
 1111 006e 0B       		.uleb128 0xb
 1112 006f 34       		.uleb128 0x34
 1113 0070 00       		.byte	0
 1114 0071 03       		.uleb128 0x3
 1115 0072 0E       		.uleb128 0xe
 1116 0073 3A       		.uleb128 0x3a
 1117 0074 0B       		.uleb128 0xb
 1118 0075 3B       		.uleb128 0x3b
 1119 0076 0B       		.uleb128 0xb
 1120 0077 49       		.uleb128 0x49
 1121 0078 13       		.uleb128 0x13
 1122 0079 02       		.uleb128 0x2
 1123 007a 18       		.uleb128 0x18
 1124 007b 00       		.byte	0
 1125 007c 00       		.byte	0
 1126 007d 0C       		.uleb128 0xc
ARM GAS  /tmp/ccYrce8v.s 			page 36


 1127 007e 2E       		.uleb128 0x2e
 1128 007f 00       		.byte	0
 1129 0080 3F       		.uleb128 0x3f
 1130 0081 19       		.uleb128 0x19
 1131 0082 03       		.uleb128 0x3
 1132 0083 0E       		.uleb128 0xe
 1133 0084 3A       		.uleb128 0x3a
 1134 0085 0B       		.uleb128 0xb
 1135 0086 3B       		.uleb128 0x3b
 1136 0087 05       		.uleb128 0x5
 1137 0088 27       		.uleb128 0x27
 1138 0089 19       		.uleb128 0x19
 1139 008a 11       		.uleb128 0x11
 1140 008b 01       		.uleb128 0x1
 1141 008c 12       		.uleb128 0x12
 1142 008d 06       		.uleb128 0x6
 1143 008e 40       		.uleb128 0x40
 1144 008f 18       		.uleb128 0x18
 1145 0090 9742     		.uleb128 0x2117
 1146 0092 19       		.uleb128 0x19
 1147 0093 00       		.byte	0
 1148 0094 00       		.byte	0
 1149 0095 0D       		.uleb128 0xd
 1150 0096 2E       		.uleb128 0x2e
 1151 0097 01       		.byte	0x1
 1152 0098 3F       		.uleb128 0x3f
 1153 0099 19       		.uleb128 0x19
 1154 009a 03       		.uleb128 0x3
 1155 009b 0E       		.uleb128 0xe
 1156 009c 3A       		.uleb128 0x3a
 1157 009d 0B       		.uleb128 0xb
 1158 009e 3B       		.uleb128 0x3b
 1159 009f 05       		.uleb128 0x5
 1160 00a0 27       		.uleb128 0x27
 1161 00a1 19       		.uleb128 0x19
 1162 00a2 11       		.uleb128 0x11
 1163 00a3 01       		.uleb128 0x1
 1164 00a4 12       		.uleb128 0x12
 1165 00a5 06       		.uleb128 0x6
 1166 00a6 40       		.uleb128 0x40
 1167 00a7 18       		.uleb128 0x18
 1168 00a8 9642     		.uleb128 0x2116
 1169 00aa 19       		.uleb128 0x19
 1170 00ab 01       		.uleb128 0x1
 1171 00ac 13       		.uleb128 0x13
 1172 00ad 00       		.byte	0
 1173 00ae 00       		.byte	0
 1174 00af 0E       		.uleb128 0xe
 1175 00b0 1D       		.uleb128 0x1d
 1176 00b1 01       		.byte	0x1
 1177 00b2 31       		.uleb128 0x31
 1178 00b3 13       		.uleb128 0x13
 1179 00b4 11       		.uleb128 0x11
 1180 00b5 01       		.uleb128 0x1
 1181 00b6 12       		.uleb128 0x12
 1182 00b7 06       		.uleb128 0x6
 1183 00b8 58       		.uleb128 0x58
ARM GAS  /tmp/ccYrce8v.s 			page 37


 1184 00b9 0B       		.uleb128 0xb
 1185 00ba 59       		.uleb128 0x59
 1186 00bb 05       		.uleb128 0x5
 1187 00bc 01       		.uleb128 0x1
 1188 00bd 13       		.uleb128 0x13
 1189 00be 00       		.byte	0
 1190 00bf 00       		.byte	0
 1191 00c0 0F       		.uleb128 0xf
 1192 00c1 0B       		.uleb128 0xb
 1193 00c2 01       		.byte	0x1
 1194 00c3 11       		.uleb128 0x11
 1195 00c4 01       		.uleb128 0x1
 1196 00c5 12       		.uleb128 0x12
 1197 00c6 06       		.uleb128 0x6
 1198 00c7 00       		.byte	0
 1199 00c8 00       		.byte	0
 1200 00c9 10       		.uleb128 0x10
 1201 00ca 34       		.uleb128 0x34
 1202 00cb 00       		.byte	0
 1203 00cc 31       		.uleb128 0x31
 1204 00cd 13       		.uleb128 0x13
 1205 00ce 02       		.uleb128 0x2
 1206 00cf 18       		.uleb128 0x18
 1207 00d0 00       		.byte	0
 1208 00d1 00       		.byte	0
 1209 00d2 11       		.uleb128 0x11
 1210 00d3 1D       		.uleb128 0x1d
 1211 00d4 01       		.byte	0x1
 1212 00d5 31       		.uleb128 0x31
 1213 00d6 13       		.uleb128 0x13
 1214 00d7 11       		.uleb128 0x11
 1215 00d8 01       		.uleb128 0x1
 1216 00d9 12       		.uleb128 0x12
 1217 00da 06       		.uleb128 0x6
 1218 00db 58       		.uleb128 0x58
 1219 00dc 0B       		.uleb128 0xb
 1220 00dd 59       		.uleb128 0x59
 1221 00de 05       		.uleb128 0x5
 1222 00df 00       		.byte	0
 1223 00e0 00       		.byte	0
 1224 00e1 12       		.uleb128 0x12
 1225 00e2 05       		.uleb128 0x5
 1226 00e3 00       		.byte	0
 1227 00e4 31       		.uleb128 0x31
 1228 00e5 13       		.uleb128 0x13
 1229 00e6 02       		.uleb128 0x2
 1230 00e7 18       		.uleb128 0x18
 1231 00e8 00       		.byte	0
 1232 00e9 00       		.byte	0
 1233 00ea 13       		.uleb128 0x13
 1234 00eb 2E       		.uleb128 0x2e
 1235 00ec 01       		.byte	0x1
 1236 00ed 3F       		.uleb128 0x3f
 1237 00ee 19       		.uleb128 0x19
 1238 00ef 03       		.uleb128 0x3
 1239 00f0 0E       		.uleb128 0xe
 1240 00f1 3A       		.uleb128 0x3a
ARM GAS  /tmp/ccYrce8v.s 			page 38


 1241 00f2 0B       		.uleb128 0xb
 1242 00f3 3B       		.uleb128 0x3b
 1243 00f4 05       		.uleb128 0x5
 1244 00f5 27       		.uleb128 0x27
 1245 00f6 19       		.uleb128 0x19
 1246 00f7 11       		.uleb128 0x11
 1247 00f8 01       		.uleb128 0x1
 1248 00f9 12       		.uleb128 0x12
 1249 00fa 06       		.uleb128 0x6
 1250 00fb 40       		.uleb128 0x40
 1251 00fc 18       		.uleb128 0x18
 1252 00fd 9742     		.uleb128 0x2117
 1253 00ff 19       		.uleb128 0x19
 1254 0100 01       		.uleb128 0x1
 1255 0101 13       		.uleb128 0x13
 1256 0102 00       		.byte	0
 1257 0103 00       		.byte	0
 1258 0104 14       		.uleb128 0x14
 1259 0105 2E       		.uleb128 0x2e
 1260 0106 00       		.byte	0
 1261 0107 3F       		.uleb128 0x3f
 1262 0108 19       		.uleb128 0x19
 1263 0109 03       		.uleb128 0x3
 1264 010a 0E       		.uleb128 0xe
 1265 010b 3A       		.uleb128 0x3a
 1266 010c 0B       		.uleb128 0xb
 1267 010d 3B       		.uleb128 0x3b
 1268 010e 05       		.uleb128 0x5
 1269 010f 27       		.uleb128 0x27
 1270 0110 19       		.uleb128 0x19
 1271 0111 49       		.uleb128 0x49
 1272 0112 13       		.uleb128 0x13
 1273 0113 11       		.uleb128 0x11
 1274 0114 01       		.uleb128 0x1
 1275 0115 12       		.uleb128 0x12
 1276 0116 06       		.uleb128 0x6
 1277 0117 40       		.uleb128 0x40
 1278 0118 18       		.uleb128 0x18
 1279 0119 9642     		.uleb128 0x2116
 1280 011b 19       		.uleb128 0x19
 1281 011c 00       		.byte	0
 1282 011d 00       		.byte	0
 1283 011e 15       		.uleb128 0x15
 1284 011f 2E       		.uleb128 0x2e
 1285 0120 00       		.byte	0
 1286 0121 03       		.uleb128 0x3
 1287 0122 0E       		.uleb128 0xe
 1288 0123 3A       		.uleb128 0x3a
 1289 0124 0B       		.uleb128 0xb
 1290 0125 3B       		.uleb128 0x3b
 1291 0126 0B       		.uleb128 0xb
 1292 0127 27       		.uleb128 0x27
 1293 0128 19       		.uleb128 0x19
 1294 0129 11       		.uleb128 0x11
 1295 012a 01       		.uleb128 0x1
 1296 012b 12       		.uleb128 0x12
 1297 012c 06       		.uleb128 0x6
ARM GAS  /tmp/ccYrce8v.s 			page 39


 1298 012d 40       		.uleb128 0x40
 1299 012e 18       		.uleb128 0x18
 1300 012f 9742     		.uleb128 0x2117
 1301 0131 19       		.uleb128 0x19
 1302 0132 00       		.byte	0
 1303 0133 00       		.byte	0
 1304 0134 16       		.uleb128 0x16
 1305 0135 2E       		.uleb128 0x2e
 1306 0136 00       		.byte	0
 1307 0137 3F       		.uleb128 0x3f
 1308 0138 19       		.uleb128 0x19
 1309 0139 03       		.uleb128 0x3
 1310 013a 0E       		.uleb128 0xe
 1311 013b 3A       		.uleb128 0x3a
 1312 013c 0B       		.uleb128 0xb
 1313 013d 3B       		.uleb128 0x3b
 1314 013e 0B       		.uleb128 0xb
 1315 013f 27       		.uleb128 0x27
 1316 0140 19       		.uleb128 0x19
 1317 0141 11       		.uleb128 0x11
 1318 0142 01       		.uleb128 0x1
 1319 0143 12       		.uleb128 0x12
 1320 0144 06       		.uleb128 0x6
 1321 0145 40       		.uleb128 0x40
 1322 0146 18       		.uleb128 0x18
 1323 0147 9742     		.uleb128 0x2117
 1324 0149 19       		.uleb128 0x19
 1325 014a 00       		.byte	0
 1326 014b 00       		.byte	0
 1327 014c 17       		.uleb128 0x17
 1328 014d 2E       		.uleb128 0x2e
 1329 014e 01       		.byte	0x1
 1330 014f 03       		.uleb128 0x3
 1331 0150 0E       		.uleb128 0xe
 1332 0151 3A       		.uleb128 0x3a
 1333 0152 0B       		.uleb128 0xb
 1334 0153 3B       		.uleb128 0x3b
 1335 0154 0B       		.uleb128 0xb
 1336 0155 27       		.uleb128 0x27
 1337 0156 19       		.uleb128 0x19
 1338 0157 11       		.uleb128 0x11
 1339 0158 01       		.uleb128 0x1
 1340 0159 12       		.uleb128 0x12
 1341 015a 06       		.uleb128 0x6
 1342 015b 40       		.uleb128 0x40
 1343 015c 18       		.uleb128 0x18
 1344 015d 9742     		.uleb128 0x2117
 1345 015f 19       		.uleb128 0x19
 1346 0160 01       		.uleb128 0x1
 1347 0161 13       		.uleb128 0x13
 1348 0162 00       		.byte	0
 1349 0163 00       		.byte	0
 1350 0164 18       		.uleb128 0x18
 1351 0165 1D       		.uleb128 0x1d
 1352 0166 01       		.byte	0x1
 1353 0167 31       		.uleb128 0x31
 1354 0168 13       		.uleb128 0x13
ARM GAS  /tmp/ccYrce8v.s 			page 40


 1355 0169 11       		.uleb128 0x11
 1356 016a 01       		.uleb128 0x1
 1357 016b 12       		.uleb128 0x12
 1358 016c 06       		.uleb128 0x6
 1359 016d 58       		.uleb128 0x58
 1360 016e 0B       		.uleb128 0xb
 1361 016f 59       		.uleb128 0x59
 1362 0170 0B       		.uleb128 0xb
 1363 0171 00       		.byte	0
 1364 0172 00       		.byte	0
 1365 0173 19       		.uleb128 0x19
 1366 0174 2E       		.uleb128 0x2e
 1367 0175 01       		.byte	0x1
 1368 0176 3F       		.uleb128 0x3f
 1369 0177 19       		.uleb128 0x19
 1370 0178 03       		.uleb128 0x3
 1371 0179 0E       		.uleb128 0xe
 1372 017a 3A       		.uleb128 0x3a
 1373 017b 0B       		.uleb128 0xb
 1374 017c 3B       		.uleb128 0x3b
 1375 017d 0B       		.uleb128 0xb
 1376 017e 27       		.uleb128 0x27
 1377 017f 19       		.uleb128 0x19
 1378 0180 49       		.uleb128 0x49
 1379 0181 13       		.uleb128 0x13
 1380 0182 11       		.uleb128 0x11
 1381 0183 01       		.uleb128 0x1
 1382 0184 12       		.uleb128 0x12
 1383 0185 06       		.uleb128 0x6
 1384 0186 40       		.uleb128 0x40
 1385 0187 18       		.uleb128 0x18
 1386 0188 9742     		.uleb128 0x2117
 1387 018a 19       		.uleb128 0x19
 1388 018b 01       		.uleb128 0x1
 1389 018c 13       		.uleb128 0x13
 1390 018d 00       		.byte	0
 1391 018e 00       		.byte	0
 1392 018f 1A       		.uleb128 0x1a
 1393 0190 05       		.uleb128 0x5
 1394 0191 00       		.byte	0
 1395 0192 03       		.uleb128 0x3
 1396 0193 0E       		.uleb128 0xe
 1397 0194 3A       		.uleb128 0x3a
 1398 0195 0B       		.uleb128 0xb
 1399 0196 3B       		.uleb128 0x3b
 1400 0197 0B       		.uleb128 0xb
 1401 0198 49       		.uleb128 0x49
 1402 0199 13       		.uleb128 0x13
 1403 019a 02       		.uleb128 0x2
 1404 019b 18       		.uleb128 0x18
 1405 019c 00       		.byte	0
 1406 019d 00       		.byte	0
 1407 019e 1B       		.uleb128 0x1b
 1408 019f 2E       		.uleb128 0x2e
 1409 01a0 01       		.byte	0x1
 1410 01a1 03       		.uleb128 0x3
 1411 01a2 0E       		.uleb128 0xe
ARM GAS  /tmp/ccYrce8v.s 			page 41


 1412 01a3 3A       		.uleb128 0x3a
 1413 01a4 0B       		.uleb128 0xb
 1414 01a5 3B       		.uleb128 0x3b
 1415 01a6 0B       		.uleb128 0xb
 1416 01a7 27       		.uleb128 0x27
 1417 01a8 19       		.uleb128 0x19
 1418 01a9 20       		.uleb128 0x20
 1419 01aa 0B       		.uleb128 0xb
 1420 01ab 01       		.uleb128 0x1
 1421 01ac 13       		.uleb128 0x13
 1422 01ad 00       		.byte	0
 1423 01ae 00       		.byte	0
 1424 01af 1C       		.uleb128 0x1c
 1425 01b0 05       		.uleb128 0x5
 1426 01b1 00       		.byte	0
 1427 01b2 03       		.uleb128 0x3
 1428 01b3 0E       		.uleb128 0xe
 1429 01b4 3A       		.uleb128 0x3a
 1430 01b5 0B       		.uleb128 0xb
 1431 01b6 3B       		.uleb128 0x3b
 1432 01b7 0B       		.uleb128 0xb
 1433 01b8 49       		.uleb128 0x49
 1434 01b9 13       		.uleb128 0x13
 1435 01ba 00       		.byte	0
 1436 01bb 00       		.byte	0
 1437 01bc 1D       		.uleb128 0x1d
 1438 01bd 2E       		.uleb128 0x2e
 1439 01be 01       		.byte	0x1
 1440 01bf 03       		.uleb128 0x3
 1441 01c0 0E       		.uleb128 0xe
 1442 01c1 3A       		.uleb128 0x3a
 1443 01c2 0B       		.uleb128 0xb
 1444 01c3 3B       		.uleb128 0x3b
 1445 01c4 0B       		.uleb128 0xb
 1446 01c5 27       		.uleb128 0x27
 1447 01c6 19       		.uleb128 0x19
 1448 01c7 20       		.uleb128 0x20
 1449 01c8 0B       		.uleb128 0xb
 1450 01c9 00       		.byte	0
 1451 01ca 00       		.byte	0
 1452 01cb 1E       		.uleb128 0x1e
 1453 01cc 34       		.uleb128 0x34
 1454 01cd 00       		.byte	0
 1455 01ce 03       		.uleb128 0x3
 1456 01cf 0E       		.uleb128 0xe
 1457 01d0 3A       		.uleb128 0x3a
 1458 01d1 0B       		.uleb128 0xb
 1459 01d2 3B       		.uleb128 0x3b
 1460 01d3 0B       		.uleb128 0xb
 1461 01d4 49       		.uleb128 0x49
 1462 01d5 13       		.uleb128 0x13
 1463 01d6 00       		.byte	0
 1464 01d7 00       		.byte	0
 1465 01d8 00       		.byte	0
 1466              		.section	.debug_aranges,"",%progbits
 1467 0000 1C000000 		.4byte	0x1c
 1468 0004 0200     		.2byte	0x2
ARM GAS  /tmp/ccYrce8v.s 			page 42


 1469 0006 00000000 		.4byte	.Ldebug_info0
 1470 000a 04       		.byte	0x4
 1471 000b 00       		.byte	0
 1472 000c 0000     		.2byte	0
 1473 000e 0000     		.2byte	0
 1474 0010 00000000 		.4byte	.Ltext0
 1475 0014 4C020000 		.4byte	.Letext0-.Ltext0
 1476 0018 00000000 		.4byte	0
 1477 001c 00000000 		.4byte	0
 1478              		.section	.debug_line,"",%progbits
 1479              	.Ldebug_line0:
 1480 0000 80010000 		.section	.debug_str,"MS",%progbits,1
 1480      0200E800 
 1480      00000201 
 1480      FB0E0D00 
 1480      01010101 
 1481              	.LASF22:
 1482 0000 76506F72 		.ascii	"vPortEnterCritical\000"
 1482      74456E74 
 1482      65724372 
 1482      69746963 
 1482      616C00
 1483              	.LASF28:
 1484 0013 7078436F 		.ascii	"pxCode\000"
 1484      646500
 1485              	.LASF23:
 1486 001a 76506F72 		.ascii	"vPortEndScheduler\000"
 1486      74456E64 
 1486      53636865 
 1486      64756C65 
 1486      7200
 1487              	.LASF15:
 1488 002c 5469636B 		.ascii	"TickType_t\000"
 1488      54797065 
 1488      5F7400
 1489              	.LASF20:
 1490 0037 53797354 		.ascii	"SysTick_Handler\000"
 1490      69636B5F 
 1490      48616E64 
 1490      6C657200 
 1491              	.LASF5:
 1492 0047 6C6F6E67 		.ascii	"long int\000"
 1492      20696E74 
 1492      00
 1493              	.LASF3:
 1494 0050 73686F72 		.ascii	"short int\000"
 1494      7420696E 
 1494      7400
 1495              	.LASF36:
 1496 005a 70727654 		.ascii	"prvTaskExitError\000"
 1496      61736B45 
 1496      78697445 
 1496      72726F72 
 1496      00
 1497              	.LASF11:
 1498 006b 5461736B 		.ascii	"TaskFunction_t\000"
 1498      46756E63 
ARM GAS  /tmp/ccYrce8v.s 			page 43


 1498      74696F6E 
 1498      5F7400
 1499              	.LASF26:
 1500 007a 756C4475 		.ascii	"ulDummy\000"
 1500      6D6D7900 
 1501              	.LASF2:
 1502 0082 756E7369 		.ascii	"unsigned char\000"
 1502      676E6564 
 1502      20636861 
 1502      7200
 1503              	.LASF6:
 1504 0090 6C6F6E67 		.ascii	"long unsigned int\000"
 1504      20756E73 
 1504      69676E65 
 1504      6420696E 
 1504      7400
 1505              	.LASF4:
 1506 00a2 73686F72 		.ascii	"short unsigned int\000"
 1506      7420756E 
 1506      7369676E 
 1506      65642069 
 1506      6E7400
 1507              	.LASF33:
 1508 00b5 53797374 		.ascii	"SystemCoreClock\000"
 1508      656D436F 
 1508      7265436C 
 1508      6F636B00 
 1509              	.LASF9:
 1510 00c5 5F5F7569 		.ascii	"__uint32_t\000"
 1510      6E743332 
 1510      5F7400
 1511              	.LASF32:
 1512 00d0 2F686F6D 		.ascii	"/home/sls/workspace/stm32f103c8-blink\000"
 1512      652F736C 
 1512      732F776F 
 1512      726B7370 
 1512      6163652F 
 1513              	.LASF41:
 1514 00f6 756C4E65 		.ascii	"ulNewBASEPRI\000"
 1514      77424153 
 1514      45505249 
 1514      00
 1515              	.LASF37:
 1516 0103 7078506F 		.ascii	"pxPortInitialiseStack\000"
 1516      7274496E 
 1516      69746961 
 1516      6C697365 
 1516      53746163 
 1517              	.LASF38:
 1518 0119 76506F72 		.ascii	"vPortSetBASEPRI\000"
 1518      74536574 
 1518      42415345 
 1518      50524900 
 1519              	.LASF12:
 1520 0129 53746163 		.ascii	"StackType_t\000"
 1520      6B547970 
 1520      655F7400 
ARM GAS  /tmp/ccYrce8v.s 			page 44


 1521              	.LASF0:
 1522 0135 756E7369 		.ascii	"unsigned int\000"
 1522      676E6564 
 1522      20696E74 
 1522      00
 1523              	.LASF8:
 1524 0142 6C6F6E67 		.ascii	"long long unsigned int\000"
 1524      206C6F6E 
 1524      6720756E 
 1524      7369676E 
 1524      65642069 
 1525              	.LASF40:
 1526 0159 76506F72 		.ascii	"vPortRaiseBASEPRI\000"
 1526      74526169 
 1526      73654241 
 1526      53455052 
 1526      4900
 1527              	.LASF30:
 1528 016b 474E5520 		.ascii	"GNU C99 6.3.1 20170620 -mthumb -mcpu=cortex-m3 -g -"
 1528      43393920 
 1528      362E332E 
 1528      31203230 
 1528      31373036 
 1529 019e 7374643D 		.ascii	"std=c99 -fno-common\000"
 1529      63393920 
 1529      2D666E6F 
 1529      2D636F6D 
 1529      6D6F6E00 
 1530              	.LASF25:
 1531 01b2 75784372 		.ascii	"uxCriticalNesting\000"
 1531      69746963 
 1531      616C4E65 
 1531      7374696E 
 1531      6700
 1532              	.LASF18:
 1533 01c4 76506F72 		.ascii	"vPortSetupTimerInterrupt\000"
 1533      74536574 
 1533      75705469 
 1533      6D657249 
 1533      6E746572 
 1534              	.LASF16:
 1535 01dd 73697A65 		.ascii	"sizetype\000"
 1535      74797065 
 1535      00
 1536              	.LASF7:
 1537 01e6 6C6F6E67 		.ascii	"long long int\000"
 1537      206C6F6E 
 1537      6720696E 
 1537      7400
 1538              	.LASF31:
 1539 01f4 46726565 		.ascii	"FreeRTOS/Source/portable/GCC/ARM_CM3/port.c\000"
 1539      52544F53 
 1539      2F536F75 
 1539      7263652F 
 1539      706F7274 
 1540              	.LASF24:
 1541 0220 5356435F 		.ascii	"SVC_Handler\000"
ARM GAS  /tmp/ccYrce8v.s 			page 45


 1541      48616E64 
 1541      6C657200 
 1542              	.LASF29:
 1543 022c 70765061 		.ascii	"pvParameters\000"
 1543      72616D65 
 1543      74657273 
 1543      00
 1544              	.LASF27:
 1545 0239 7078546F 		.ascii	"pxTopOfStack\000"
 1545      704F6653 
 1545      7461636B 
 1545      00
 1546              	.LASF19:
 1547 0246 50656E64 		.ascii	"PendSV_Handler\000"
 1547      53565F48 
 1547      616E646C 
 1547      657200
 1548              	.LASF21:
 1549 0255 76506F72 		.ascii	"vPortExitCritical\000"
 1549      74457869 
 1549      74437269 
 1549      74696361 
 1549      6C00
 1550              	.LASF10:
 1551 0267 75696E74 		.ascii	"uint32_t\000"
 1551      33325F74 
 1551      00
 1552              	.LASF39:
 1553 0270 756C4E65 		.ascii	"ulNewMaskValue\000"
 1553      774D6173 
 1553      6B56616C 
 1553      756500
 1554              	.LASF17:
 1555 027f 63686172 		.ascii	"char\000"
 1555      00
 1556              	.LASF35:
 1557 0284 70727650 		.ascii	"prvPortStartFirstTask\000"
 1557      6F727453 
 1557      74617274 
 1557      46697273 
 1557      74546173 
 1558              	.LASF1:
 1559 029a 7369676E 		.ascii	"signed char\000"
 1559      65642063 
 1559      68617200 
 1560              	.LASF34:
 1561 02a6 78506F72 		.ascii	"xPortStartScheduler\000"
 1561      74537461 
 1561      72745363 
 1561      68656475 
 1561      6C657200 
 1562              	.LASF14:
 1563 02ba 55426173 		.ascii	"UBaseType_t\000"
 1563      65547970 
 1563      655F7400 
 1564              	.LASF13:
 1565 02c6 42617365 		.ascii	"BaseType_t\000"
ARM GAS  /tmp/ccYrce8v.s 			page 46


 1565      54797065 
 1565      5F7400
 1566              		.ident	"GCC: (15:6.3.1+svn253039-1build1) 6.3.1 20170620"
ARM GAS  /tmp/ccYrce8v.s 			page 47


DEFINED SYMBOLS
                            *ABS*:0000000000000000 port.c
     /tmp/ccYrce8v.s:16     .data:0000000000000000 $d
     /tmp/ccYrce8v.s:19     .data:0000000000000000 uxCriticalNesting
     /tmp/ccYrce8v.s:22     .text:0000000000000000 $t
     /tmp/ccYrce8v.s:29     .text:0000000000000000 pxPortInitialiseStack
     /tmp/ccYrce8v.s:100    .text:0000000000000054 $d
     /tmp/ccYrce8v.s:110    .text:0000000000000058 prvTaskExitError
     /tmp/ccYrce8v.s:104    .text:0000000000000058 $t
     /tmp/ccYrce8v.s:172    .text:0000000000000086 SVC_Handler
     /tmp/ccYrce8v.s:194    .text:00000000000000b0 pxCurrentTCBConst2
     /tmp/ccYrce8v.s:194    .text:00000000000000b0 $d
     /tmp/ccYrce8v.s:200    .text:00000000000000b4 $t
     /tmp/ccYrce8v.s:210    .text:00000000000000b6 prvPortStartFirstTask
     /tmp/ccYrce8v.s:246    .text:00000000000000d2 xPortStartScheduler
     /tmp/ccYrce8v.s:587    .text:0000000000000208 vPortSetupTimerInterrupt
     /tmp/ccYrce8v.s:290    .text:000000000000010c $d
     /tmp/ccYrce8v.s:295    .text:0000000000000114 $t
     /tmp/ccYrce8v.s:302    .text:0000000000000114 vPortEndScheduler
     /tmp/ccYrce8v.s:333    .text:0000000000000120 vPortEnterCritical
     /tmp/ccYrce8v.s:383    .text:000000000000014c $d
     /tmp/ccYrce8v.s:387    .text:0000000000000150 $t
     /tmp/ccYrce8v.s:394    .text:0000000000000150 vPortExitCritical
     /tmp/ccYrce8v.s:448    .text:000000000000017c $d
     /tmp/ccYrce8v.s:452    .text:0000000000000180 $t
     /tmp/ccYrce8v.s:459    .text:0000000000000180 PendSV_Handler
     /tmp/ccYrce8v.s:494    .text:00000000000001c0 pxCurrentTCBConst
     /tmp/ccYrce8v.s:494    .text:00000000000001c0 $d
     /tmp/ccYrce8v.s:500    .text:00000000000001c4 $t
     /tmp/ccYrce8v.s:511    .text:00000000000001c6 SysTick_Handler
     /tmp/ccYrce8v.s:576    .text:0000000000000204 $d
     /tmp/ccYrce8v.s:580    .text:0000000000000208 $t
     /tmp/ccYrce8v.s:632    .text:0000000000000238 $d
     /tmp/ccYrce8v.s:1566   .text:000000000000024c $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
pxCurrentTCB
vTaskSwitchContext
xTaskIncrementTick
SystemCoreClock
